/*! For license information please see archethic.js.LICENSE.txt */
var archethic;(()=>{var t={6374:t=>{t.exports=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}},6396:t=>{t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},1572:t=>{t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},6381:t=>{t.exports=function(t,e){if(t!==e)throw new TypeError("Cannot instantiate an arrow function")}},3694:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},4778:(t,e,r)=>{var n=r(6396);t.exports=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),i.forEach((function(e){n(t,e,r[e])}))}return t}},9892:(t,e,r)=>{var n=r(3712);t.exports=function(t,e){if(null==t)return{};var r,i,o=n(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(i=0;i<a.length;i++)r=a[i],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}},3712:t=>{t.exports=function(t,e){if(null==t)return{};var r,n,i={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}},1259:(t,e,r)=>{var n=r(6374),i=r(1572),o=r(3694);t.exports=function(t){return n(t)||i(t)||o()}},1203:t=>{"use strict";t.exports=function t(e,r){if(e===r)return!0;var n,i=Array.isArray(e),o=Array.isArray(r);if(i&&o){if(e.length!=r.length)return!1;for(n=0;n<e.length;n++)if(!t(e[n],r[n]))return!1;return!0}if(i!=o)return!1;if(e&&r&&"object"==typeof e&&"object"==typeof r){var a=Object.keys(e);if(a.length!==Object.keys(r).length)return!1;var s=e instanceof Date,c=r instanceof Date;if(s&&c)return e.getTime()==r.getTime();if(s!=c)return!1;var f=e instanceof RegExp,u=r instanceof RegExp;if(f&&u)return e.toString()==r.toString();if(f!=u)return!1;for(n=0;n<a.length;n++)if(!Object.prototype.hasOwnProperty.call(r,a[n]))return!1;for(n=0;n<a.length;n++)if(!t(e[a[n]],r[a[n]]))return!1;return!0}return!1}},6271:(t,e)=>{"use strict";function r(t,e,n){return function(){var i=n.concat(Array.prototype.slice.call(arguments));return i.length>=e?t.apply(this,i):r(t,e,i)}}e.cF=function(t){return r(t,t.length,[])}},9780:(t,e,r)=>{t.exports={default:r(4385),__esModule:!0}},4123:(t,e,r)=>{t.exports={default:r(4510),__esModule:!0}},3053:(t,e,r)=>{t.exports={default:r(8386),__esModule:!0}},7405:(t,e,r)=>{t.exports={default:r(3342),__esModule:!0}},3193:(t,e,r)=>{t.exports={default:r(4734),__esModule:!0}},9829:(t,e,r)=>{t.exports={default:r(315),__esModule:!0}},534:(t,e,r)=>{t.exports={default:r(2019),__esModule:!0}},508:(t,e,r)=>{t.exports={default:r(7567),__esModule:!0}},5522:(t,e,r)=>{t.exports={default:r(6560),__esModule:!0}},6327:(t,e,r)=>{t.exports={default:r(4220),__esModule:!0}},4508:(t,e,r)=>{"use strict";var n,i=(n=r(9829))&&n.__esModule?n:{default:n};e.A=function(t,e,r){return e in t?(0,i.default)(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},5505:(t,e,r)=>{"use strict";var n,i=(n=r(3193))&&n.__esModule?n:{default:n};e.A=i.default||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}},8941:(t,e)=>{"use strict";e.A=function(t,e){if(t!==e)throw new TypeError("Cannot instantiate an arrow function")}},5748:(t,e)=>{"use strict";e.A=function(t,e){var r={};for(var n in t)e.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n]);return r}},2040:(t,e,r)=>{"use strict";var n=o(r(3053)),i=o(r(4123));function o(t){return t&&t.__esModule?t:{default:t}}e.A=function(t,e){if(Array.isArray(t))return t;if((0,n.default)(Object(t)))return function(t,e){var r=[],n=!0,o=!1,a=void 0;try{for(var s,c=(0,i.default)(t);!(n=(s=c.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){o=!0,a=t}finally{try{!n&&c.return&&c.return()}finally{if(o)throw a}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}},2779:(t,e,r)=>{"use strict";var n,i=(n=r(9780))&&n.__esModule?n:{default:n};e.A=function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return(0,i.default)(t)}},7479:(t,e,r)=>{"use strict";var n=a(r(6327)),i=a(r(5522)),o="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function a(t){return t&&t.__esModule?t:{default:t}}e.A="function"==typeof i.default&&"symbol"===o(n.default)?function(t){return void 0===t?"undefined":o(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":o(t)}},4156:(t,e,r)=>{const n=r(829);function i(t,e,r){const n=t[e]+t[r];let i=t[e+1]+t[r+1];n>=4294967296&&i++,t[e]=n,t[e+1]=i}function o(t,e,r,n){let i=t[e]+r;r<0&&(i+=4294967296);let o=t[e+1]+n;i>=4294967296&&o++,t[e]=i,t[e+1]=o}function a(t,e){return t[e]^t[e+1]<<8^t[e+2]<<16^t[e+3]<<24}function s(t,e,r,n,a,s){const c=d[a],f=d[a+1],h=d[s],l=d[s+1];i(u,t,e),o(u,t,c,f);let p=u[n]^u[t],b=u[n+1]^u[t+1];u[n]=b,u[n+1]=p,i(u,r,n),p=u[e]^u[r],b=u[e+1]^u[r+1],u[e]=p>>>24^b<<8,u[e+1]=b>>>24^p<<8,i(u,t,e),o(u,t,h,l),p=u[n]^u[t],b=u[n+1]^u[t+1],u[n]=p>>>16^b<<16,u[n+1]=b>>>16^p<<16,i(u,r,n),p=u[e]^u[r],b=u[e+1]^u[r+1],u[e]=b>>>31^p<<1,u[e+1]=p>>>31^b<<1}const c=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),f=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3].map((function(t){return 2*t}))),u=new Uint32Array(32),d=new Uint32Array(32);function h(t,e){let r=0;for(r=0;r<16;r++)u[r]=t.h[r],u[r+16]=c[r];for(u[24]=u[24]^t.t,u[25]=u[25]^t.t/4294967296,e&&(u[28]=~u[28],u[29]=~u[29]),r=0;r<32;r++)d[r]=a(t.b,4*r);for(r=0;r<12;r++)s(0,8,16,24,f[16*r+0],f[16*r+1]),s(2,10,18,26,f[16*r+2],f[16*r+3]),s(4,12,20,28,f[16*r+4],f[16*r+5]),s(6,14,22,30,f[16*r+6],f[16*r+7]),s(0,10,20,30,f[16*r+8],f[16*r+9]),s(2,12,22,24,f[16*r+10],f[16*r+11]),s(4,14,16,26,f[16*r+12],f[16*r+13]),s(6,8,18,28,f[16*r+14],f[16*r+15]);for(r=0;r<16;r++)t.h[r]=t.h[r]^u[r]^u[r+16]}const l=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);function p(t,e,r,n){if(0===t||t>64)throw new Error("Illegal output length, expected 0 < length <= 64");if(e&&e.length>64)throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");if(r&&16!==r.length)throw new Error("Illegal salt, expected Uint8Array with length is 16");if(n&&16!==n.length)throw new Error("Illegal personal, expected Uint8Array with length is 16");const i={b:new Uint8Array(128),h:new Uint32Array(16),t:0,c:0,outlen:t};l.fill(0),l[0]=t,e&&(l[1]=e.length),l[2]=1,l[3]=1,r&&l.set(r,32),n&&l.set(n,48);for(let t=0;t<16;t++)i.h[t]=c[t]^a(l,4*t);return e&&(b(i,e),i.c=128),i}function b(t,e){for(let r=0;r<e.length;r++)128===t.c&&(t.t+=t.c,h(t,!1),t.c=0),t.b[t.c++]=e[r]}function v(t){for(t.t+=t.c;t.c<128;)t.b[t.c++]=0;h(t,!0);const e=new Uint8Array(t.outlen);for(let r=0;r<t.outlen;r++)e[r]=t.h[r>>2]>>8*(3&r);return e}function y(t,e,r,i,o){r=r||64,t=n.normalizeInput(t),i&&(i=n.normalizeInput(i)),o&&(o=n.normalizeInput(o));const a=p(r,e,i,o);return b(a,t),v(a)}t.exports={blake2b:y,blake2bHex:function(t,e,r,i,o){const a=y(t,e,r,i,o);return n.toHex(a)},blake2bInit:p,blake2bUpdate:b,blake2bFinal:v}},1843:(t,e,r)=>{const n=r(829);function i(t,e){return t[e]^t[e+1]<<8^t[e+2]<<16^t[e+3]<<24}function o(t,e,r,n,i,o){f[t]=f[t]+f[e]+i,f[n]=a(f[n]^f[t],16),f[r]=f[r]+f[n],f[e]=a(f[e]^f[r],12),f[t]=f[t]+f[e]+o,f[n]=a(f[n]^f[t],8),f[r]=f[r]+f[n],f[e]=a(f[e]^f[r],7)}function a(t,e){return t>>>e^t<<32-e}const s=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),c=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0]),f=new Uint32Array(16),u=new Uint32Array(16);function d(t,e){let r=0;for(r=0;r<8;r++)f[r]=t.h[r],f[r+8]=s[r];for(f[12]^=t.t,f[13]^=t.t/4294967296,e&&(f[14]=~f[14]),r=0;r<16;r++)u[r]=i(t.b,4*r);for(r=0;r<10;r++)o(0,4,8,12,u[c[16*r+0]],u[c[16*r+1]]),o(1,5,9,13,u[c[16*r+2]],u[c[16*r+3]]),o(2,6,10,14,u[c[16*r+4]],u[c[16*r+5]]),o(3,7,11,15,u[c[16*r+6]],u[c[16*r+7]]),o(0,5,10,15,u[c[16*r+8]],u[c[16*r+9]]),o(1,6,11,12,u[c[16*r+10]],u[c[16*r+11]]),o(2,7,8,13,u[c[16*r+12]],u[c[16*r+13]]),o(3,4,9,14,u[c[16*r+14]],u[c[16*r+15]]);for(r=0;r<8;r++)t.h[r]^=f[r]^f[r+8]}function h(t,e){if(!(t>0&&t<=32))throw new Error("Incorrect output length, should be in [1, 32]");const r=e?e.length:0;if(e&&!(r>0&&r<=32))throw new Error("Incorrect key length, should be in [1, 32]");const n={h:new Uint32Array(s),b:new Uint8Array(64),c:0,t:0,outlen:t};return n.h[0]^=16842752^r<<8^t,r>0&&(l(n,e),n.c=64),n}function l(t,e){for(let r=0;r<e.length;r++)64===t.c&&(t.t+=t.c,d(t,!1),t.c=0),t.b[t.c++]=e[r]}function p(t){for(t.t+=t.c;t.c<64;)t.b[t.c++]=0;d(t,!0);const e=new Uint8Array(t.outlen);for(let r=0;r<t.outlen;r++)e[r]=t.h[r>>2]>>8*(3&r)&255;return e}function b(t,e,r){r=r||32,t=n.normalizeInput(t);const i=h(r,e);return l(i,t),p(i)}t.exports={blake2s:b,blake2sHex:function(t,e,r){const i=b(t,e,r);return n.toHex(i)},blake2sInit:h,blake2sUpdate:l,blake2sFinal:p}},2493:(t,e,r)=>{const n=r(4156),i=r(1843);t.exports={blake2b:n.blake2b,blake2bHex:n.blake2bHex,blake2bInit:n.blake2bInit,blake2bUpdate:n.blake2bUpdate,blake2bFinal:n.blake2bFinal,blake2s:i.blake2s,blake2sHex:i.blake2sHex,blake2sInit:i.blake2sInit,blake2sUpdate:i.blake2sUpdate,blake2sFinal:i.blake2sFinal}},829:t=>{function e(t){return(4294967296+t).toString(16).substring(1)}t.exports={normalizeInput:function(t){let e;if(t instanceof Uint8Array)e=t;else{if("string"!=typeof t)throw new Error("Input must be an string, Buffer or Uint8Array");e=(new TextEncoder).encode(t)}return e},toHex:function(t){return Array.prototype.map.call(t,(function(t){return(t<16?"0":"")+t.toString(16)})).join("")},debugPrint:function(t,r,n){let i="\n"+t+" = ";for(let o=0;o<r.length;o+=2){if(32===n)i+=e(r[o]).toUpperCase(),i+=" ",i+=e(r[o+1]).toUpperCase();else{if(64!==n)throw new Error("Invalid size "+n);i+=e(r[o+1]).toUpperCase(),i+=e(r[o]).toUpperCase()}o%6==4?i+="\n"+new Array(t.length+4).join(" "):o<r.length-2&&(i+=" ")}console.log(i)},testSpeed:function(t,e,r){let n=(new Date).getTime();const i=new Uint8Array(e);for(let t=0;t<e;t++)i[t]=t%256;const o=(new Date).getTime();console.log("Generated random input in "+(o-n)+"ms"),n=o;for(let o=0;o<r;o++){const r=t(i),o=(new Date).getTime(),a=o-n;n=o,console.log("Hashed in "+a+"ms: "+r.substring(0,20)+"..."),console.log(Math.round(e/(1<<20)/(a/1e3)*100)/100+" MB PER SECOND")}}}},9404:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var a;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{a="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(7790).Buffer}catch(t){}function s(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function c(t,e,r){var n=s(t,r);return r-1>=e&&(n|=s(t,r-1)<<4),n}function f(t,e,r,n){for(var i=0,o=Math.min(t.length,r),a=e;a<o;a++){var s=t.charCodeAt(a)-48;i*=n,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,a,s=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)a=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)a=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,a=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=c(t,e,n)<<o,this.words[a]|=67108863&i,o>=18?(o-=18,a+=1,this.words[a]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=c(t,e,n)<<o,this.words[a]|=67108863&i,o>=18?(o-=18,a+=1,this.words[a]|=i>>>26):o+=8;this.strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,a=o%n,s=Math.min(o,o-a)+r,c=0,u=r;u<s;u+=n)c=f(t,u,u+n,e),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==a){var d=1;for(c=f(t,u,t.length,e),u=0;u<a;u++)d*=e;this.imuln(d),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}this.strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],a=i*o,s=67108863&a,c=a/67108864|0;r.words[0]=s;for(var f=1;f<n;f++){for(var u=c>>>26,d=67108863&c,h=Math.min(f,e.length-1),l=Math.max(0,f-t.length+1);l<=h;l++){var p=f-l|0;u+=(a=(i=0|t.words[p])*(o=0|e.words[l])+d)/67108864|0,d=67108863&a}r.words[f]=0|d,c=0|u}return 0!==c?r.words[f]=0|c:r.length--,r.strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,a=0;a<this.length;a++){var s=this.words[a],c=(16777215&(s<<i|o)).toString(16);r=0!=(o=s>>>24-i&16777215)||a!==this.length-1?u[6-c.length]+c+r:c+r,(i+=2)>=26&&(i-=26,a--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var f=d[t],l=h[t];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modn(l).toString(t);r=(p=p.idivn(l)).isZero()?b+r:u[f-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return n(void 0!==a),this.toArrayLike(a,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var a,s,c="le"===e,f=new t(o),u=this.clone();if(c){for(s=0;!u.isZero();s++)a=u.andln(255),u.iushrn(8),f[s]=a;for(;s<o;s++)f[s]=0}else{for(s=0;s<o-i;s++)f[s]=0;for(s=0;!u.isZero();s++)a=u.andln(255),u.iushrn(8),f[o-s-1]=a}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 8191&e||(r+=13,e>>>=13),127&e||(r+=7,e>>>=7),15&e||(r+=4,e>>>=4),3&e||(r+=2,e>>>=2),1&e||r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return n(!(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return n(!(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return n(!(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,a=0;a<n.length;a++)o=(e=(0|r.words[a])-(0|n.words[a])+o)>>26,this.words[a]=67108863&e;for(;0!==o&&a<r.length;a++)o=(e=(0|r.words[a])+o)>>26,this.words[a]=67108863&e;if(0===o&&a<r.length&&r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this.length=Math.max(this.length,a),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,o,a=t.words,s=e.words,c=r.words,f=0,u=0|a[0],d=8191&u,h=u>>>13,l=0|a[1],p=8191&l,b=l>>>13,v=0|a[2],y=8191&v,m=v>>>13,g=0|a[3],w=8191&g,_=g>>>13,A=0|a[4],M=8191&A,S=A>>>13,x=0|a[5],k=8191&x,E=x>>>13,O=0|a[6],R=8191&O,P=O>>>13,C=0|a[7],B=8191&C,I=C>>>13,z=0|a[8],T=8191&z,N=z>>>13,j=0|a[9],L=8191&j,q=j>>>13,F=0|s[0],U=8191&F,D=F>>>13,H=0|s[1],J=8191&H,W=H>>>13,K=0|s[2],G=8191&K,V=K>>>13,X=0|s[3],Y=8191&X,Z=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],rt=8191&et,nt=et>>>13,it=0|s[6],ot=8191&it,at=it>>>13,st=0|s[7],ct=8191&st,ft=st>>>13,ut=0|s[8],dt=8191&ut,ht=ut>>>13,lt=0|s[9],pt=8191&lt,bt=lt>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(f+(n=Math.imul(d,U))|0)+((8191&(i=(i=Math.imul(d,D))+Math.imul(h,U)|0))<<13)|0;f=((o=Math.imul(h,D))+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(p,U),i=(i=Math.imul(p,D))+Math.imul(b,U)|0,o=Math.imul(b,D);var yt=(f+(n=n+Math.imul(d,J)|0)|0)+((8191&(i=(i=i+Math.imul(d,W)|0)+Math.imul(h,J)|0))<<13)|0;f=((o=o+Math.imul(h,W)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(y,U),i=(i=Math.imul(y,D))+Math.imul(m,U)|0,o=Math.imul(m,D),n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(b,J)|0,o=o+Math.imul(b,W)|0;var mt=(f+(n=n+Math.imul(d,G)|0)|0)+((8191&(i=(i=i+Math.imul(d,V)|0)+Math.imul(h,G)|0))<<13)|0;f=((o=o+Math.imul(h,V)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,n=Math.imul(w,U),i=(i=Math.imul(w,D))+Math.imul(_,U)|0,o=Math.imul(_,D),n=n+Math.imul(y,J)|0,i=(i=i+Math.imul(y,W)|0)+Math.imul(m,J)|0,o=o+Math.imul(m,W)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,V)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,V)|0;var gt=(f+(n=n+Math.imul(d,Y)|0)|0)+((8191&(i=(i=i+Math.imul(d,Z)|0)+Math.imul(h,Y)|0))<<13)|0;f=((o=o+Math.imul(h,Z)|0)+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(M,U),i=(i=Math.imul(M,D))+Math.imul(S,U)|0,o=Math.imul(S,D),n=n+Math.imul(w,J)|0,i=(i=i+Math.imul(w,W)|0)+Math.imul(_,J)|0,o=o+Math.imul(_,W)|0,n=n+Math.imul(y,G)|0,i=(i=i+Math.imul(y,V)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,V)|0,n=n+Math.imul(p,Y)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,Z)|0;var wt=(f+(n=n+Math.imul(d,Q)|0)|0)+((8191&(i=(i=i+Math.imul(d,tt)|0)+Math.imul(h,Q)|0))<<13)|0;f=((o=o+Math.imul(h,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(k,U),i=(i=Math.imul(k,D))+Math.imul(E,U)|0,o=Math.imul(E,D),n=n+Math.imul(M,J)|0,i=(i=i+Math.imul(M,W)|0)+Math.imul(S,J)|0,o=o+Math.imul(S,W)|0,n=n+Math.imul(w,G)|0,i=(i=i+Math.imul(w,V)|0)+Math.imul(_,G)|0,o=o+Math.imul(_,V)|0,n=n+Math.imul(y,Y)|0,i=(i=i+Math.imul(y,Z)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,Z)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0;var _t=(f+(n=n+Math.imul(d,rt)|0)|0)+((8191&(i=(i=i+Math.imul(d,nt)|0)+Math.imul(h,rt)|0))<<13)|0;f=((o=o+Math.imul(h,nt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(R,U),i=(i=Math.imul(R,D))+Math.imul(P,U)|0,o=Math.imul(P,D),n=n+Math.imul(k,J)|0,i=(i=i+Math.imul(k,W)|0)+Math.imul(E,J)|0,o=o+Math.imul(E,W)|0,n=n+Math.imul(M,G)|0,i=(i=i+Math.imul(M,V)|0)+Math.imul(S,G)|0,o=o+Math.imul(S,V)|0,n=n+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(_,Y)|0,o=o+Math.imul(_,Z)|0,n=n+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0;var At=(f+(n=n+Math.imul(d,ot)|0)|0)+((8191&(i=(i=i+Math.imul(d,at)|0)+Math.imul(h,ot)|0))<<13)|0;f=((o=o+Math.imul(h,at)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(B,U),i=(i=Math.imul(B,D))+Math.imul(I,U)|0,o=Math.imul(I,D),n=n+Math.imul(R,J)|0,i=(i=i+Math.imul(R,W)|0)+Math.imul(P,J)|0,o=o+Math.imul(P,W)|0,n=n+Math.imul(k,G)|0,i=(i=i+Math.imul(k,V)|0)+Math.imul(E,G)|0,o=o+Math.imul(E,V)|0,n=n+Math.imul(M,Y)|0,i=(i=i+Math.imul(M,Z)|0)+Math.imul(S,Y)|0,o=o+Math.imul(S,Z)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,n=n+Math.imul(y,rt)|0,i=(i=i+Math.imul(y,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,at)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,at)|0;var Mt=(f+(n=n+Math.imul(d,ct)|0)|0)+((8191&(i=(i=i+Math.imul(d,ft)|0)+Math.imul(h,ct)|0))<<13)|0;f=((o=o+Math.imul(h,ft)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(T,U),i=(i=Math.imul(T,D))+Math.imul(N,U)|0,o=Math.imul(N,D),n=n+Math.imul(B,J)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(I,J)|0,o=o+Math.imul(I,W)|0,n=n+Math.imul(R,G)|0,i=(i=i+Math.imul(R,V)|0)+Math.imul(P,G)|0,o=o+Math.imul(P,V)|0,n=n+Math.imul(k,Y)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(E,Y)|0,o=o+Math.imul(E,Z)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(S,Q)|0,o=o+Math.imul(S,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(_,rt)|0,o=o+Math.imul(_,nt)|0,n=n+Math.imul(y,ot)|0,i=(i=i+Math.imul(y,at)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,at)|0,n=n+Math.imul(p,ct)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(b,ct)|0,o=o+Math.imul(b,ft)|0;var St=(f+(n=n+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,ht)|0)+Math.imul(h,dt)|0))<<13)|0;f=((o=o+Math.imul(h,ht)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(L,U),i=(i=Math.imul(L,D))+Math.imul(q,U)|0,o=Math.imul(q,D),n=n+Math.imul(T,J)|0,i=(i=i+Math.imul(T,W)|0)+Math.imul(N,J)|0,o=o+Math.imul(N,W)|0,n=n+Math.imul(B,G)|0,i=(i=i+Math.imul(B,V)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,V)|0,n=n+Math.imul(R,Y)|0,i=(i=i+Math.imul(R,Z)|0)+Math.imul(P,Y)|0,o=o+Math.imul(P,Z)|0,n=n+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(S,rt)|0,o=o+Math.imul(S,nt)|0,n=n+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,at)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,at)|0,n=n+Math.imul(y,ct)|0,i=(i=i+Math.imul(y,ft)|0)+Math.imul(m,ct)|0,o=o+Math.imul(m,ft)|0,n=n+Math.imul(p,dt)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(b,dt)|0,o=o+Math.imul(b,ht)|0;var xt=(f+(n=n+Math.imul(d,pt)|0)|0)+((8191&(i=(i=i+Math.imul(d,bt)|0)+Math.imul(h,pt)|0))<<13)|0;f=((o=o+Math.imul(h,bt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(L,J),i=(i=Math.imul(L,W))+Math.imul(q,J)|0,o=Math.imul(q,W),n=n+Math.imul(T,G)|0,i=(i=i+Math.imul(T,V)|0)+Math.imul(N,G)|0,o=o+Math.imul(N,V)|0,n=n+Math.imul(B,Y)|0,i=(i=i+Math.imul(B,Z)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,Z)|0,n=n+Math.imul(R,Q)|0,i=(i=i+Math.imul(R,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(k,rt)|0,i=(i=i+Math.imul(k,nt)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,nt)|0,n=n+Math.imul(M,ot)|0,i=(i=i+Math.imul(M,at)|0)+Math.imul(S,ot)|0,o=o+Math.imul(S,at)|0,n=n+Math.imul(w,ct)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(_,ct)|0,o=o+Math.imul(_,ft)|0,n=n+Math.imul(y,dt)|0,i=(i=i+Math.imul(y,ht)|0)+Math.imul(m,dt)|0,o=o+Math.imul(m,ht)|0;var kt=(f+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,bt)|0)+Math.imul(b,pt)|0))<<13)|0;f=((o=o+Math.imul(b,bt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(L,G),i=(i=Math.imul(L,V))+Math.imul(q,G)|0,o=Math.imul(q,V),n=n+Math.imul(T,Y)|0,i=(i=i+Math.imul(T,Z)|0)+Math.imul(N,Y)|0,o=o+Math.imul(N,Z)|0,n=n+Math.imul(B,Q)|0,i=(i=i+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,n=n+Math.imul(R,rt)|0,i=(i=i+Math.imul(R,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(k,ot)|0,i=(i=i+Math.imul(k,at)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,at)|0,n=n+Math.imul(M,ct)|0,i=(i=i+Math.imul(M,ft)|0)+Math.imul(S,ct)|0,o=o+Math.imul(S,ft)|0,n=n+Math.imul(w,dt)|0,i=(i=i+Math.imul(w,ht)|0)+Math.imul(_,dt)|0,o=o+Math.imul(_,ht)|0;var Et=(f+(n=n+Math.imul(y,pt)|0)|0)+((8191&(i=(i=i+Math.imul(y,bt)|0)+Math.imul(m,pt)|0))<<13)|0;f=((o=o+Math.imul(m,bt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(L,Y),i=(i=Math.imul(L,Z))+Math.imul(q,Y)|0,o=Math.imul(q,Z),n=n+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,n=n+Math.imul(B,rt)|0,i=(i=i+Math.imul(B,nt)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,nt)|0,n=n+Math.imul(R,ot)|0,i=(i=i+Math.imul(R,at)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,at)|0,n=n+Math.imul(k,ct)|0,i=(i=i+Math.imul(k,ft)|0)+Math.imul(E,ct)|0,o=o+Math.imul(E,ft)|0,n=n+Math.imul(M,dt)|0,i=(i=i+Math.imul(M,ht)|0)+Math.imul(S,dt)|0,o=o+Math.imul(S,ht)|0;var Ot=(f+(n=n+Math.imul(w,pt)|0)|0)+((8191&(i=(i=i+Math.imul(w,bt)|0)+Math.imul(_,pt)|0))<<13)|0;f=((o=o+Math.imul(_,bt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,n=Math.imul(L,Q),i=(i=Math.imul(L,tt))+Math.imul(q,Q)|0,o=Math.imul(q,tt),n=n+Math.imul(T,rt)|0,i=(i=i+Math.imul(T,nt)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,nt)|0,n=n+Math.imul(B,ot)|0,i=(i=i+Math.imul(B,at)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,at)|0,n=n+Math.imul(R,ct)|0,i=(i=i+Math.imul(R,ft)|0)+Math.imul(P,ct)|0,o=o+Math.imul(P,ft)|0,n=n+Math.imul(k,dt)|0,i=(i=i+Math.imul(k,ht)|0)+Math.imul(E,dt)|0,o=o+Math.imul(E,ht)|0;var Rt=(f+(n=n+Math.imul(M,pt)|0)|0)+((8191&(i=(i=i+Math.imul(M,bt)|0)+Math.imul(S,pt)|0))<<13)|0;f=((o=o+Math.imul(S,bt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(L,rt),i=(i=Math.imul(L,nt))+Math.imul(q,rt)|0,o=Math.imul(q,nt),n=n+Math.imul(T,ot)|0,i=(i=i+Math.imul(T,at)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,at)|0,n=n+Math.imul(B,ct)|0,i=(i=i+Math.imul(B,ft)|0)+Math.imul(I,ct)|0,o=o+Math.imul(I,ft)|0,n=n+Math.imul(R,dt)|0,i=(i=i+Math.imul(R,ht)|0)+Math.imul(P,dt)|0,o=o+Math.imul(P,ht)|0;var Pt=(f+(n=n+Math.imul(k,pt)|0)|0)+((8191&(i=(i=i+Math.imul(k,bt)|0)+Math.imul(E,pt)|0))<<13)|0;f=((o=o+Math.imul(E,bt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(L,ot),i=(i=Math.imul(L,at))+Math.imul(q,ot)|0,o=Math.imul(q,at),n=n+Math.imul(T,ct)|0,i=(i=i+Math.imul(T,ft)|0)+Math.imul(N,ct)|0,o=o+Math.imul(N,ft)|0,n=n+Math.imul(B,dt)|0,i=(i=i+Math.imul(B,ht)|0)+Math.imul(I,dt)|0,o=o+Math.imul(I,ht)|0;var Ct=(f+(n=n+Math.imul(R,pt)|0)|0)+((8191&(i=(i=i+Math.imul(R,bt)|0)+Math.imul(P,pt)|0))<<13)|0;f=((o=o+Math.imul(P,bt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(L,ct),i=(i=Math.imul(L,ft))+Math.imul(q,ct)|0,o=Math.imul(q,ft),n=n+Math.imul(T,dt)|0,i=(i=i+Math.imul(T,ht)|0)+Math.imul(N,dt)|0,o=o+Math.imul(N,ht)|0;var Bt=(f+(n=n+Math.imul(B,pt)|0)|0)+((8191&(i=(i=i+Math.imul(B,bt)|0)+Math.imul(I,pt)|0))<<13)|0;f=((o=o+Math.imul(I,bt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(L,dt),i=(i=Math.imul(L,ht))+Math.imul(q,dt)|0,o=Math.imul(q,ht);var It=(f+(n=n+Math.imul(T,pt)|0)|0)+((8191&(i=(i=i+Math.imul(T,bt)|0)+Math.imul(N,pt)|0))<<13)|0;f=((o=o+Math.imul(N,bt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var zt=(f+(n=Math.imul(L,pt))|0)+((8191&(i=(i=Math.imul(L,bt))+Math.imul(q,pt)|0))<<13)|0;return f=((o=Math.imul(q,bt))+(i>>>13)|0)+(zt>>>26)|0,zt&=67108863,c[0]=vt,c[1]=yt,c[2]=mt,c[3]=gt,c[4]=wt,c[5]=_t,c[6]=At,c[7]=Mt,c[8]=St,c[9]=xt,c[10]=kt,c[11]=Et,c[12]=Ot,c[13]=Rt,c[14]=Pt,c[15]=Ct,c[16]=Bt,c[17]=It,c[18]=zt,0!==f&&(c[19]=f,r.length++),r};function b(t,e,r){return(new v).mulp(t,e,r)}function v(t,e){this.x=t,this.y=e}Math.imul||(p=l),o.prototype.mulTo=function(t,e){var r,n=this.length+t.length;return r=10===this.length&&10===t.length?p(this,t,e):n<63?l(this,t,e):n<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var a=i;i=0;for(var s=67108863&n,c=Math.min(o,e.length-1),f=Math.max(0,o-t.length+1);f<=c;f++){var u=o-f,d=(0|t.words[u])*(0|e.words[f]),h=67108863&d;s=67108863&(h=h+s|0),i+=(a=(a=a+(d/67108864|0)|0)+(h>>>26)|0)>>>26,a&=67108863}r.words[o]=s,n=a,a=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,t,e):b(this,t,e),r},v.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},v.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},v.prototype.permute=function(t,e,r,n,i,o){for(var a=0;a<o;a++)n[a]=e[t[a]],i[a]=r[t[a]]},v.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var a=1;a<i;a<<=1)for(var s=a<<1,c=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),u=0;u<i;u+=s)for(var d=c,h=f,l=0;l<a;l++){var p=r[u+l],b=n[u+l],v=r[u+l+a],y=n[u+l+a],m=d*v-h*y;y=d*y+h*v,v=m,r[u+l]=p+v,n[u+l]=b+y,r[u+l+a]=p-v,n[u+l+a]=b-y,l!==s&&(m=c*d-f*h,h=c*h+f*d,d=m)}},v.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},v.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},v.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},v.prototype.convert13b=function(t,e,r,i){for(var o=0,a=0;a<e;a++)o+=0|t[a],r[2*a]=8191&o,o>>>=13,r[2*a+1]=8191&o,o>>>=13;for(a=2*e;a<i;++a)r[a]=0;n(0===o),n(!(-8192&o))},v.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},v.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),a=new Array(n),s=new Array(n),c=new Array(n),f=new Array(n),u=new Array(n),d=new Array(n),h=r.words;h.length=n,this.convert13b(t.words,t.length,a,n),this.convert13b(e.words,e.length,f,n),this.transform(a,o,s,c,n,i),this.transform(f,o,u,d,n,i);for(var l=0;l<n;l++){var p=s[l]*u[l]-c[l]*d[l];c[l]=s[l]*d[l]+c[l]*u[l],s[l]=p}return this.conjugate(s,c,n),this.transform(s,c,h,o,n,i),this.conjugate(h,o,n),this.normalize13b(h,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),b(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[r]=67108863&o}return 0!==e&&(this.words[r]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var a=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,c=(0|this.words[e])-s<<r;this.words[e]=c|a,a=s>>>26-r}a&&(this.words[e]=a,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,a=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,c=r;if(i-=a,i=Math.max(0,i),c){for(var f=0;f<a;f++)c.words[f]=this.words[f];c.length=a}if(0===a);else if(this.length>a)for(this.length-=a,f=0;f<this.length;f++)this.words[f]=this.words[f+a];else this.words[0]=0,this.length=1;var u=0;for(f=this.length-1;f>=0&&(0!==u||f>=i);f--){var d=0|this.words[f];this.words[f]=u<<26-o|d>>>o,u=d&s}return c&&0!==u&&(c.words[c.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,a=t.length+r;this._expand(a);var s=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+s;var c=(0|t.words[i])*e;s=((o-=67108863&c)>>26)-(c/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)s=(o=(0|this.words[i+r])+s)>>26,this.words[i+r]=67108863&o;if(0===s)return this.strip();for(n(-1===s),s=0,i=0;i<this.length;i++)s=(o=-(0|this.words[i])+s)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,a=0|i.words[i.length-1];0!=(r=26-this._countBits(a))&&(i=i.ushln(r),n.iushln(r),a=0|i.words[i.length-1]);var s,c=n.length-i.length;if("mod"!==e){(s=new o(null)).length=c+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var u=n.clone()._ishlnsubmul(i,1,c);0===u.negative&&(n=u,s&&(s.words[c]=1));for(var d=c-1;d>=0;d--){var h=67108864*(0|n.words[i.length+d])+(0|n.words[i.length+d-1]);for(h=Math.min(h/a|0,67108863),n._ishlnsubmul(i,h,d);0!==n.negative;)h--,n.negative=0,n._ishlnsubmul(i,1,d),n.isZero()||(n.negative^=1);s&&(s.words[d]=h)}return s&&s.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:s||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(a=s.mod.neg(),r&&0!==a.negative&&a.iadd(t)),{div:i,mod:a}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):this.negative&t.negative?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(a=s.mod.neg(),r&&0!==a.negative&&a.isub(t)),{div:s.div,mod:a}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,a,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},o.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),a=new o(0),s=new o(0),c=new o(1),f=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++f;for(var u=r.clone(),d=e.clone();!e.isZero();){for(var h=0,l=1;!(e.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(e.iushrn(h);h-- >0;)(i.isOdd()||a.isOdd())&&(i.iadd(u),a.isub(d)),i.iushrn(1),a.iushrn(1);for(var p=0,b=1;!(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||c.isOdd())&&(s.iadd(u),c.isub(d)),s.iushrn(1),c.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(s),a.isub(c)):(r.isub(e),s.isub(i),c.isub(a))}return{a:s,b:c,gcd:r.iushln(f)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,a=new o(1),s=new o(0),c=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var f=0,u=1;!(e.words[0]&u)&&f<26;++f,u<<=1);if(f>0)for(e.iushrn(f);f-- >0;)a.isOdd()&&a.iadd(c),a.iushrn(1);for(var d=0,h=1;!(r.words[0]&h)&&d<26;++d,h<<=1);if(d>0)for(r.iushrn(d);d-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);e.cmp(r)>=0?(e.isub(r),a.isub(s)):(r.isub(e),s.isub(a))}return(i=0===e.cmpn(1)?a:s).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return!(1&this.words[0])},o.prototype.isOdd=function(){return!(1&~this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,a=r;0!==o&&a<this.length;a++){var s=0|this.words[a];o=(s+=o)>>>26,s&=67108863,this.words[a]=s}return 0!==o&&(this.words[a]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new M(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var y={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function g(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function w(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function A(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function M(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){M.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(g,m),g.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var a=0|t.words[i];t.words[i-10]=(a&r)<<4|o>>>22,o=a}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},g.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(w,m),i(_,m),i(A,m),A.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(y[t])return y[t];var e;if("k256"===t)e=new g;else if("p224"===t)e=new w;else if("p192"===t)e=new _;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new A}return y[t]=e,e},M.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},M.prototype._verify2=function(t,e){n(!(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},M.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},M.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},M.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},M.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},M.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},M.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},M.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},M.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},M.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},M.prototype.isqr=function(t){return this.imul(t,t.clone())},M.prototype.sqr=function(t){return this.mul(t,t)},M.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),a=0;!i.isZero()&&0===i.andln(1);)a++,i.iushrn(1);n(!i.isZero());var s=new o(1).toRed(this),c=s.redNeg(),f=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new o(2*u*u).toRed(this);0!==this.pow(u,f).cmp(c);)u.redIAdd(c);for(var d=this.pow(u,i),h=this.pow(t,i.addn(1).iushrn(1)),l=this.pow(t,i),p=a;0!==l.cmp(s);){for(var b=l,v=0;0!==b.cmp(s);v++)b=b.redSqr();n(v<p);var y=this.pow(d,new o(1).iushln(p-v-1));h=h.redMul(y),d=y.redSqr(),l=l.redMul(d),p=v}return h},M.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},M.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],a=0,s=0,c=e.bitLength()%26;for(0===c&&(c=26),n=e.length-1;n>=0;n--){for(var f=e.words[n],u=c-1;u>=0;u--){var d=f>>u&1;i!==r[0]&&(i=this.sqr(i)),0!==d||0!==a?(a<<=1,a|=d,(4==++s||0===n&&0===u)&&(i=this.mul(i,r[a]),s=0,a=0)):s=0}c=26}return i},M.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},M.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},i(S,M),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},5037:(t,e,r)=>{var n;function i(t){this.rand=t}if(t.exports=function(t){return n||(n=new i(null)),n.generate(t)},t.exports.Rand=i,i.prototype.generate=function(t){return this._rand(t)},i.prototype._rand=function(t){if(this.rand.getBytes)return this.rand.getBytes(t);for(var e=new Uint8Array(t),r=0;r<e.length;r++)e[r]=this.rand.getByte();return e},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(t){var e=new Uint8Array(t);return self.crypto.getRandomValues(e),e}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(t){var e=new Uint8Array(t);return self.msCrypto.getRandomValues(e),e}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=r(3776);if("function"!=typeof o.randomBytes)throw new Error("Not supported");i.prototype._rand=function(t){return o.randomBytes(t)}}catch(t){}},4385:(t,e,r)=>{r(7863),r(5263),t.exports=r(6438).Array.from},4510:(t,e,r)=>{r(7914),r(7863),t.exports=r(7342)},8386:(t,e,r)=>{r(7914),r(7863),t.exports=r(98)},3342:(t,e,r)=>{r(5882),t.exports=r(6438).Number.isInteger},4734:(t,e,r)=>{r(3758),t.exports=r(6438).Object.assign},315:(t,e,r)=>{r(4712);var n=r(6438).Object;t.exports=function(t,e,r){return n.defineProperty(t,e,r)}},2019:(t,e,r)=>{r(2946),t.exports=r(6438).Object.entries},7567:(t,e,r)=>{r(6847),t.exports=r(6438).Object.keys},6560:(t,e,r)=>{r(9626),r(8978),r(2860),r(716),t.exports=r(6438).Symbol},4220:(t,e,r)=>{r(7863),r(7914),t.exports=r(4336).f("iterator")},5219:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2560:t=>{t.exports=function(){}},812:(t,e,r)=>{var n=r(4401);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},4448:(t,e,r)=>{var n=r(5133),i=r(181),o=r(2917);t.exports=function(t){return function(e,r,a){var s,c=n(e),f=i(c.length),u=o(a,f);if(t&&r!=r){for(;f>u;)if((s=c[u++])!=s)return!0}else for(;f>u;u++)if((t||u in c)&&c[u]===r)return t||u||0;return!t&&-1}}},4968:(t,e,r)=>{var n=r(3417),i=r(254)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:o?n(e):"Object"==(a=n(e))&&"function"==typeof e.callee?"Arguments":a}},3417:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},6438:t=>{var e=t.exports={version:"2.6.0"};"number"==typeof __e&&(__e=e)},1891:(t,e,r)=>{"use strict";var n=r(8423),i=r(6260);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},8852:(t,e,r)=>{var n=r(5219);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},7608:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},8219:(t,e,r)=>{t.exports=!r(1984)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},3802:(t,e,r)=>{var n=r(4401),i=r(6670).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},7956:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},6473:(t,e,r)=>{var n=r(4311),i=r(9820),o=r(6569);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var a,s=r(t),c=o.f,f=0;s.length>f;)c.call(t,a=s[f++])&&e.push(a);return e}},8535:(t,e,r)=>{var n=r(6670),i=r(6438),o=r(8852),a=r(2677),s=r(5509),c="prototype",f=function(t,e,r){var u,d,h,l=t&f.F,p=t&f.G,b=t&f.S,v=t&f.P,y=t&f.B,m=t&f.W,g=p?i:i[e]||(i[e]={}),w=g[c],_=p?n:b?n[e]:(n[e]||{})[c];for(u in p&&(r=e),r)(d=!l&&_&&void 0!==_[u])&&s(g,u)||(h=d?_[u]:r[u],g[u]=p&&"function"!=typeof _[u]?r[u]:y&&d?o(h,n):m&&_[u]==h?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e[c]=t[c],e}(h):v&&"function"==typeof h?o(Function.call,h):h,v&&((g.virtual||(g.virtual={}))[u]=h,t&f.R&&w&&!w[u]&&a(w,u,h)))};f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},1984:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},6670:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},5509:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},2677:(t,e,r)=>{var n=r(8423),i=r(6260);t.exports=r(8219)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},3879:(t,e,r)=>{var n=r(6670).document;t.exports=n&&n.documentElement},2484:(t,e,r)=>{t.exports=!r(8219)&&!r(1984)((function(){return 7!=Object.defineProperty(r(3802)("div"),"a",{get:function(){return 7}}).a}))},7001:(t,e,r)=>{var n=r(3417);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},2828:(t,e,r)=>{var n=r(210),i=r(254)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[i]===t)}},5461:(t,e,r)=>{var n=r(3417);t.exports=Array.isArray||function(t){return"Array"==n(t)}},5194:(t,e,r)=>{var n=r(4401),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},4401:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},7904:(t,e,r)=>{var n=r(812);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},8248:(t,e,r)=>{"use strict";var n=r(2087),i=r(6260),o=r(1356),a={};r(2677)(a,r(254)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(a,{next:i(1,r)}),o(t,e+" Iterator")}},8839:(t,e,r)=>{"use strict";var n=r(4742),i=r(8535),o=r(1331),a=r(2677),s=r(210),c=r(8248),f=r(1356),u=r(6123),d=r(254)("iterator"),h=!([].keys&&"next"in[].keys()),l="keys",p="values",b=function(){return this};t.exports=function(t,e,r,v,y,m,g){c(r,e,v);var w,_,A,M=function(t){if(!h&&t in E)return E[t];switch(t){case l:case p:return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=e+" Iterator",x=y==p,k=!1,E=t.prototype,O=E[d]||E["@@iterator"]||y&&E[y],R=O||M(y),P=y?x?M("entries"):R:void 0,C="Array"==e&&E.entries||O;if(C&&(A=u(C.call(new t)))!==Object.prototype&&A.next&&(f(A,S,!0),n||"function"==typeof A[d]||a(A,d,b)),x&&O&&O.name!==p&&(k=!0,R=function(){return O.call(this)}),n&&!g||!h&&!k&&E[d]||a(E,d,R),s[e]=R,s[S]=b,y)if(w={values:x?R:M(p),keys:m?R:M(l),entries:P},g)for(_ in w)_ in E||o(E,_,w[_]);else i(i.P+i.F*(h||k),e,w);return w}},7899:(t,e,r)=>{var n=r(254)("iterator"),i=!1;try{var o=[7][n]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o=[7],a=o[n]();a.next=function(){return{done:r=!0}},o[n]=function(){return a},t(o)}catch(t){}return r}},322:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},210:t=>{t.exports={}},4742:t=>{t.exports=!0},5172:(t,e,r)=>{var n=r(9191)("meta"),i=r(4401),o=r(5509),a=r(8423).f,s=0,c=Object.isExtensible||function(){return!0},f=!r(1984)((function(){return c(Object.preventExtensions({}))})),u=function(t){a(t,n,{value:{i:"O"+ ++s,w:{}}})},d=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,n)){if(!c(t))return"F";if(!e)return"E";u(t)}return t[n].i},getWeak:function(t,e){if(!o(t,n)){if(!c(t))return!0;if(!e)return!1;u(t)}return t[n].w},onFreeze:function(t){return f&&d.NEED&&c(t)&&!o(t,n)&&u(t),t}}},6854:(t,e,r)=>{"use strict";var n=r(4311),i=r(9820),o=r(6569),a=r(6310),s=r(7001),c=Object.assign;t.exports=!c||r(1984)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n}))?function(t,e){for(var r=a(t),c=arguments.length,f=1,u=i.f,d=o.f;c>f;)for(var h,l=s(arguments[f++]),p=u?n(l).concat(u(l)):n(l),b=p.length,v=0;b>v;)d.call(l,h=p[v++])&&(r[h]=l[h]);return r}:c},2087:(t,e,r)=>{var n=r(812),i=r(82),o=r(7956),a=r(4566)("IE_PROTO"),s=function(){},c="prototype",f=function(){var t,e=r(3802)("iframe"),n=o.length;for(e.style.display="none",r(3879).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;n--;)delete f[c][o[n]];return f()};t.exports=Object.create||function(t,e){var r;return null!==t?(s[c]=n(t),r=new s,s[c]=null,r[a]=t):r=f(),void 0===e?r:i(r,e)}},8423:(t,e,r)=>{var n=r(812),i=r(2484),o=r(752),a=Object.defineProperty;e.f=r(8219)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},82:(t,e,r)=>{var n=r(8423),i=r(812),o=r(4311);t.exports=r(8219)?Object.defineProperties:function(t,e){i(t);for(var r,a=o(e),s=a.length,c=0;s>c;)n.f(t,r=a[c++],e[r]);return t}},1033:(t,e,r)=>{var n=r(6569),i=r(6260),o=r(5133),a=r(752),s=r(5509),c=r(2484),f=Object.getOwnPropertyDescriptor;e.f=r(8219)?f:function(t,e){if(t=o(t),e=a(e,!0),c)try{return f(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},6309:(t,e,r)=>{var n=r(5133),i=r(1743).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(n(t))}},1743:(t,e,r)=>{var n=r(5081),i=r(7956).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},9820:(t,e)=>{e.f=Object.getOwnPropertySymbols},6123:(t,e,r)=>{var n=r(5509),i=r(6310),o=r(4566)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},5081:(t,e,r)=>{var n=r(5509),i=r(5133),o=r(4448)(!1),a=r(4566)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),c=0,f=[];for(r in s)r!=a&&n(s,r)&&f.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~o(f,r)||f.push(r));return f}},4311:(t,e,r)=>{var n=r(5081),i=r(7956);t.exports=Object.keys||function(t){return n(t,i)}},6569:(t,e)=>{e.f={}.propertyIsEnumerable},7331:(t,e,r)=>{var n=r(8535),i=r(6438),o=r(1984);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],a={};a[t]=e(r),n(n.S+n.F*o((function(){r(1)})),"Object",a)}},2566:(t,e,r)=>{var n=r(4311),i=r(5133),o=r(6569).f;t.exports=function(t){return function(e){for(var r,a=i(e),s=n(a),c=s.length,f=0,u=[];c>f;)o.call(a,r=s[f++])&&u.push(t?[r,a[r]]:a[r]);return u}}},6260:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},1331:(t,e,r)=>{t.exports=r(2677)},1356:(t,e,r)=>{var n=r(8423).f,i=r(5509),o=r(254)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},4566:(t,e,r)=>{var n=r(3927)("keys"),i=r(9191);t.exports=function(t){return n[t]||(n[t]=i(t))}},3927:(t,e,r)=>{var n=r(6438),i=r(6670),o="__core-js_shared__",a=i[o]||(i[o]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(4742)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},3172:(t,e,r)=>{var n=r(9383),i=r(7608);t.exports=function(t){return function(e,r){var o,a,s=String(i(e)),c=n(r),f=s.length;return c<0||c>=f?t?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===f||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):o:t?s.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},2917:(t,e,r)=>{var n=r(9383),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):o(t,e)}},9383:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},5133:(t,e,r)=>{var n=r(7001),i=r(7608);t.exports=function(t){return n(i(t))}},181:(t,e,r)=>{var n=r(9383),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},6310:(t,e,r)=>{var n=r(7608);t.exports=function(t){return Object(n(t))}},752:(t,e,r)=>{var n=r(4401);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},9191:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},7816:(t,e,r)=>{var n=r(6670),i=r(6438),o=r(4742),a=r(4336),s=r(8423).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},4336:(t,e,r)=>{e.f=r(254)},254:(t,e,r)=>{var n=r(3927)("wks"),i=r(9191),o=r(6670).Symbol,a="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=n},5298:(t,e,r)=>{var n=r(4968),i=r(254)("iterator"),o=r(210);t.exports=r(6438).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},7342:(t,e,r)=>{var n=r(812),i=r(5298);t.exports=r(6438).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return n(e.call(t))}},98:(t,e,r)=>{var n=r(4968),i=r(254)("iterator"),o=r(210);t.exports=r(6438).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||o.hasOwnProperty(n(e))}},5263:(t,e,r)=>{"use strict";var n=r(8852),i=r(8535),o=r(6310),a=r(7904),s=r(2828),c=r(181),f=r(1891),u=r(5298);i(i.S+i.F*!r(7899)((function(t){Array.from(t)})),"Array",{from:function(t){var e,r,i,d,h=o(t),l="function"==typeof this?this:Array,p=arguments.length,b=p>1?arguments[1]:void 0,v=void 0!==b,y=0,m=u(h);if(v&&(b=n(b,p>2?arguments[2]:void 0,2)),null==m||l==Array&&s(m))for(r=new l(e=c(h.length));e>y;y++)f(r,y,v?b(h[y],y):h[y]);else for(d=m.call(h),r=new l;!(i=d.next()).done;y++)f(r,y,v?a(d,b,[i.value,y],!0):i.value);return r.length=y,r}})},2293:(t,e,r)=>{"use strict";var n=r(2560),i=r(322),o=r(210),a=r(5133);t.exports=r(8839)(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},5882:(t,e,r)=>{var n=r(8535);n(n.S,"Number",{isInteger:r(5194)})},3758:(t,e,r)=>{var n=r(8535);n(n.S+n.F,"Object",{assign:r(6854)})},4712:(t,e,r)=>{var n=r(8535);n(n.S+n.F*!r(8219),"Object",{defineProperty:r(8423).f})},6847:(t,e,r)=>{var n=r(6310),i=r(4311);r(7331)("keys",(function(){return function(t){return i(n(t))}}))},8978:()=>{},7863:(t,e,r)=>{"use strict";var n=r(3172)(!0);r(8839)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},9626:(t,e,r)=>{"use strict";var n=r(6670),i=r(5509),o=r(8219),a=r(8535),s=r(1331),c=r(5172).KEY,f=r(1984),u=r(3927),d=r(1356),h=r(9191),l=r(254),p=r(4336),b=r(7816),v=r(6473),y=r(5461),m=r(812),g=r(4401),w=r(5133),_=r(752),A=r(6260),M=r(2087),S=r(6309),x=r(1033),k=r(8423),E=r(4311),O=x.f,R=k.f,P=S.f,C=n.Symbol,B=n.JSON,I=B&&B.stringify,z="prototype",T=l("_hidden"),N=l("toPrimitive"),j={}.propertyIsEnumerable,L=u("symbol-registry"),q=u("symbols"),F=u("op-symbols"),U=Object[z],D="function"==typeof C,H=n.QObject,J=!H||!H[z]||!H[z].findChild,W=o&&f((function(){return 7!=M(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=O(U,e);n&&delete U[e],R(t,e,r),n&&t!==U&&R(U,e,n)}:R,K=function(t){var e=q[t]=M(C[z]);return e._k=t,e},G=D&&"symbol"==typeof C.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof C},V=function(t,e,r){return t===U&&V(F,e,r),m(t),e=_(e,!0),m(r),i(q,e)?(r.enumerable?(i(t,T)&&t[T][e]&&(t[T][e]=!1),r=M(r,{enumerable:A(0,!1)})):(i(t,T)||R(t,T,A(1,{})),t[T][e]=!0),W(t,e,r)):R(t,e,r)},X=function(t,e){m(t);for(var r,n=v(e=w(e)),i=0,o=n.length;o>i;)V(t,r=n[i++],e[r]);return t},Y=function(t){var e=j.call(this,t=_(t,!0));return!(this===U&&i(q,t)&&!i(F,t))&&(!(e||!i(this,t)||!i(q,t)||i(this,T)&&this[T][t])||e)},Z=function(t,e){if(t=w(t),e=_(e,!0),t!==U||!i(q,e)||i(F,e)){var r=O(t,e);return!r||!i(q,e)||i(t,T)&&t[T][e]||(r.enumerable=!0),r}},$=function(t){for(var e,r=P(w(t)),n=[],o=0;r.length>o;)i(q,e=r[o++])||e==T||e==c||n.push(e);return n},Q=function(t){for(var e,r=t===U,n=P(r?F:w(t)),o=[],a=0;n.length>a;)!i(q,e=n[a++])||r&&!i(U,e)||o.push(q[e]);return o};D||(s((C=function(){if(this instanceof C)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===U&&e.call(F,r),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),W(this,t,A(1,r))};return o&&J&&W(U,t,{configurable:!0,set:e}),K(t)})[z],"toString",(function(){return this._k})),x.f=Z,k.f=V,r(1743).f=S.f=$,r(6569).f=Y,r(9820).f=Q,o&&!r(4742)&&s(U,"propertyIsEnumerable",Y,!0),p.f=function(t){return K(l(t))}),a(a.G+a.W+a.F*!D,{Symbol:C});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;tt.length>et;)l(tt[et++]);for(var rt=E(l.store),nt=0;rt.length>nt;)b(rt[nt++]);a(a.S+a.F*!D,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=C(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){J=!0},useSimple:function(){J=!1}}),a(a.S+a.F*!D,"Object",{create:function(t,e){return void 0===e?M(t):X(M(t),e)},defineProperty:V,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:$,getOwnPropertySymbols:Q}),B&&a(a.S+a.F*(!D||f((function(){var t=C();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(g(e)||void 0!==t)&&!G(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!G(e))return e}),n[1]=e,I.apply(B,n)}}),C[z][N]||r(2677)(C[z],N,C[z].valueOf),d(C,"Symbol"),d(Math,"Math",!0),d(n.JSON,"JSON",!0)},2946:(t,e,r)=>{var n=r(8535),i=r(2566)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},2860:(t,e,r)=>{r(7816)("asyncIterator")},716:(t,e,r)=>{r(7816)("observable")},7914:(t,e,r)=>{r(2293);for(var n=r(6670),i=r(2677),o=r(210),a=r(254)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<s.length;c++){var f=s[c],u=n[f],d=u&&u.prototype;d&&!d[a]&&i(d,a,f),o[f]=o.Array}},3387:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},8184:(t,e,r)=>{var n=r(7574)("unscopables"),i=Array.prototype;null==i[n]&&r(3341)(i,n,{}),t.exports=function(t){i[n][t]=!0}},8828:(t,e,r)=>{"use strict";var n=r(1212)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},4228:(t,e,r)=>{var n=r(3305);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},1464:(t,e,r)=>{var n=r(7221),i=r(1485),o=r(157);t.exports=function(t){return function(e,r,a){var s,c=n(e),f=i(c.length),u=o(a,f);if(t&&r!=r){for(;f>u;)if((s=c[u++])!=s)return!0}else for(;f>u;u++)if((t||u in c)&&c[u]===r)return t||u||0;return!t&&-1}}},6179:(t,e,r)=>{var n=r(5052),i=r(1249),o=r(8270),a=r(1485),s=r(5572);t.exports=function(t,e){var r=1==t,c=2==t,f=3==t,u=4==t,d=6==t,h=5==t||d,l=e||s;return function(e,s,p){for(var b,v,y=o(e),m=i(y),g=n(s,p,3),w=a(m.length),_=0,A=r?l(e,w):c?l(e,0):void 0;w>_;_++)if((h||_ in m)&&(v=g(b=m[_],_,y),t))if(r)A[_]=v;else if(v)switch(t){case 3:return!0;case 5:return b;case 6:return _;case 2:A.push(b)}else if(u)return!1;return d?-1:f||u?u:A}}},3606:(t,e,r)=>{var n=r(3305),i=r(7981),o=r(7574)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},5572:(t,e,r)=>{var n=r(3606);t.exports=function(t,e){return new(n(t))(e)}},5538:(t,e,r)=>{"use strict";var n=r(3387),i=r(3305),o=r(4877),a=[].slice,s={};t.exports=Function.bind||function(t){var e=n(this),r=a.call(arguments,1),c=function(){var n=r.concat(a.call(arguments));return this instanceof c?function(t,e,r){if(!(e in s)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)}(e,n.length,n):o(e,n,t)};return i(e.prototype)&&(c.prototype=e.prototype),c}},4848:(t,e,r)=>{var n=r(5089),i=r(7574)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:o?n(e):"Object"==(a=n(e))&&"function"==typeof e.callee?"Arguments":a}},5089:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},6094:t=>{var e=t.exports={version:"2.6.0"};"number"==typeof __e&&(__e=e)},5052:(t,e,r)=>{var n=r(3387);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},3344:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},1763:(t,e,r)=>{t.exports=!r(9448)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},6034:(t,e,r)=>{var n=r(3305),i=r(7526).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},6140:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},2127:(t,e,r)=>{var n=r(7526),i=r(6094),o=r(3341),a=r(8859),s=r(5052),c="prototype",f=function(t,e,r){var u,d,h,l,p=t&f.F,b=t&f.G,v=t&f.S,y=t&f.P,m=t&f.B,g=b?n:v?n[e]||(n[e]={}):(n[e]||{})[c],w=b?i:i[e]||(i[e]={}),_=w[c]||(w[c]={});for(u in b&&(r=e),r)h=((d=!p&&g&&void 0!==g[u])?g:r)[u],l=m&&d?s(h,n):y&&"function"==typeof h?s(Function.call,h):h,g&&a(g,u,h,t&f.U),w[u]!=h&&o(w,u,l),y&&_[u]!=h&&(_[u]=h)};n.core=i,f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},5203:(t,e,r)=>{var n=r(7574)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},9448:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},9228:(t,e,r)=>{"use strict";r(4116);var n=r(8859),i=r(3341),o=r(9448),a=r(3344),s=r(7574),c=r(9600),f=s("species"),u=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),d=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),l=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),p=l?!o((function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[f]=function(){return r}),r[h](""),!e})):void 0;if(!l||!p||"replace"===t&&!u||"split"===t&&!d){var b=/./[h],v=r(a,h,""[t],(function(t,e,r,n,i){return e.exec===c?l&&!i?{done:!0,value:b.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}})),y=v[0],m=v[1];n(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},1158:(t,e,r)=>{"use strict";var n=r(4228);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},7526:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},7917:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},3341:(t,e,r)=>{var n=r(7967),i=r(1996);t.exports=r(1763)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},1308:(t,e,r)=>{var n=r(7526).document;t.exports=n&&n.documentElement},2956:(t,e,r)=>{t.exports=!r(1763)&&!r(9448)((function(){return 7!=Object.defineProperty(r(6034)("div"),"a",{get:function(){return 7}}).a}))},4877:t=>{t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},1249:(t,e,r)=>{var n=r(5089);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},7981:(t,e,r)=>{var n=r(5089);t.exports=Array.isArray||function(t){return"Array"==n(t)}},3305:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},5411:(t,e,r)=>{var n=r(3305),i=r(5089),o=r(7574)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},6032:(t,e,r)=>{"use strict";var n=r(4719),i=r(1996),o=r(3844),a={};r(3341)(a,r(7574)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(a,{next:i(1,r)}),o(t,e+" Iterator")}},8175:(t,e,r)=>{"use strict";var n=r(2750),i=r(2127),o=r(8859),a=r(3341),s=r(906),c=r(6032),f=r(3844),u=r(627),d=r(7574)("iterator"),h=!([].keys&&"next"in[].keys()),l="keys",p="values",b=function(){return this};t.exports=function(t,e,r,v,y,m,g){c(r,e,v);var w,_,A,M=function(t){if(!h&&t in E)return E[t];switch(t){case l:case p:return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=e+" Iterator",x=y==p,k=!1,E=t.prototype,O=E[d]||E["@@iterator"]||y&&E[y],R=O||M(y),P=y?x?M("entries"):R:void 0,C="Array"==e&&E.entries||O;if(C&&(A=u(C.call(new t)))!==Object.prototype&&A.next&&(f(A,S,!0),n||"function"==typeof A[d]||a(A,d,b)),x&&O&&O.name!==p&&(k=!0,R=function(){return O.call(this)}),n&&!g||!h&&!k&&E[d]||a(E,d,R),s[e]=R,s[S]=b,y)if(w={values:x?R:M(p),keys:m?R:M(l),entries:P},g)for(_ in w)_ in E||o(E,_,w[_]);else i(i.P+i.F*(h||k),e,w);return w}},4970:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},906:t=>{t.exports={}},2750:t=>{t.exports=!1},4719:(t,e,r)=>{var n=r(4228),i=r(1626),o=r(6140),a=r(766)("IE_PROTO"),s=function(){},c="prototype",f=function(){var t,e=r(6034)("iframe"),n=o.length;for(e.style.display="none",r(1308).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;n--;)delete f[c][o[n]];return f()};t.exports=Object.create||function(t,e){var r;return null!==t?(s[c]=n(t),r=new s,s[c]=null,r[a]=t):r=f(),void 0===e?r:i(r,e)}},7967:(t,e,r)=>{var n=r(4228),i=r(2956),o=r(3048),a=Object.defineProperty;e.f=r(1763)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},1626:(t,e,r)=>{var n=r(7967),i=r(4228),o=r(1311);t.exports=r(1763)?Object.defineProperties:function(t,e){i(t);for(var r,a=o(e),s=a.length,c=0;s>c;)n.f(t,r=a[c++],e[r]);return t}},627:(t,e,r)=>{var n=r(7917),i=r(8270),o=r(766)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},4561:(t,e,r)=>{var n=r(7917),i=r(7221),o=r(1464)(!1),a=r(766)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),c=0,f=[];for(r in s)r!=a&&n(s,r)&&f.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~o(f,r)||f.push(r));return f}},1311:(t,e,r)=>{var n=r(4561),i=r(6140);t.exports=Object.keys||function(t){return n(t,i)}},1996:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},8859:(t,e,r)=>{var n=r(7526),i=r(3341),o=r(7917),a=r(4415)("src"),s="toString",c=Function[s],f=(""+c).split(s);r(6094).inspectSource=function(t){return c.call(t)},(t.exports=function(t,e,r,s){var c="function"==typeof r;c&&(o(r,"name")||i(r,"name",e)),t[e]!==r&&(c&&(o(r,a)||i(r,a,t[e]?""+t[e]:f.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,s,(function(){return"function"==typeof this&&this[a]||c.call(this)}))},2535:(t,e,r)=>{"use strict";var n=r(4848),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var o=r.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},9600:(t,e,r)=>{"use strict";var n,i,o=r(1158),a=RegExp.prototype.exec,s=String.prototype.replace,c=a,f="lastIndex",u=(n=/a/,i=/b*/g,a.call(n,"a"),a.call(i,"a"),0!==n[f]||0!==i[f]),d=void 0!==/()??/.exec("")[1];(u||d)&&(c=function(t){var e,r,n,i,c=this;return d&&(r=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),u&&(e=c[f]),n=a.call(c,t),u&&n&&(c[f]=c.global?n.index+n[0].length:e),d&&n&&n.length>1&&s.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=c},3844:(t,e,r)=>{var n=r(7967).f,i=r(7917),o=r(7574)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},766:(t,e,r)=>{var n=r(4556)("keys"),i=r(4415);t.exports=function(t){return n[t]||(n[t]=i(t))}},4556:(t,e,r)=>{var n=r(6094),i=r(7526),o="__core-js_shared__",a=i[o]||(i[o]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(2750)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},6884:(t,e,r)=>{"use strict";var n=r(9448);t.exports=function(t,e){return!!t&&n((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},1212:(t,e,r)=>{var n=r(7087),i=r(3344);t.exports=function(t){return function(e,r){var o,a,s=String(i(e)),c=n(r),f=s.length;return c<0||c>=f?t?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===f||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):o:t?s.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},8942:(t,e,r)=>{var n=r(5411),i=r(3344);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},157:(t,e,r)=>{var n=r(7087),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):o(t,e)}},7087:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},7221:(t,e,r)=>{var n=r(1249),i=r(3344);t.exports=function(t){return n(i(t))}},1485:(t,e,r)=>{var n=r(7087),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},8270:(t,e,r)=>{var n=r(3344);t.exports=function(t){return Object(n(t))}},3048:(t,e,r)=>{var n=r(3305);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},4415:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},7574:(t,e,r)=>{var n=r(4556)("wks"),i=r(4415),o=r(7526).Symbol,a="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=n},5369:(t,e,r)=>{"use strict";var n=r(2127),i=r(6179)(6),o="findIndex",a=!0;o in[]&&Array(1)[o]((function(){a=!1})),n(n.P+n.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(8184)(o)},5144:(t,e,r)=>{"use strict";var n=r(2127),i=r(6179)(5),o="find",a=!0;o in[]&&Array(1)[o]((function(){a=!1})),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(8184)(o)},3504:(t,e,r)=>{"use strict";var n=r(2127),i=r(6179)(0),o=r(6884)([].forEach,!0);n(n.P+n.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},4609:(t,e,r)=>{"use strict";var n=r(2127),i=r(1464)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(a||!r(6884)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},5165:(t,e,r)=>{"use strict";var n=r(8184),i=r(4970),o=r(906),a=r(7221);t.exports=r(8175)(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},4913:(t,e,r)=>{"use strict";var n=r(2127),i=r(6179)(1);n(n.P+n.F*!r(6884)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},6511:(t,e,r)=>{"use strict";var n=r(2127),i=r(6179)(3);n(n.P+n.F*!r(6884)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},5049:(t,e,r)=>{var n=r(2127);n(n.P,"Function",{bind:r(5538)})},489:(t,e,r)=>{var n=r(7967).f,i=Function.prototype,o=/^\s*function ([^ (]*)/,a="name";a in i||r(1763)&&n(i,a,{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},4116:(t,e,r)=>{"use strict";var n=r(9600);r(2127)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},4040:(t,e,r)=>{"use strict";var n=r(4228),i=r(1485),o=r(8828),a=r(2535);r(9228)("match",1,(function(t,e,r,s){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var c=n(t),f=String(this);if(!c.global)return a(c,f);var u=c.unicode;c.lastIndex=0;for(var d,h=[],l=0;null!==(d=a(c,f));){var p=String(d[0]);h[l]=p,""===p&&(c.lastIndex=o(f,i(c.lastIndex),u)),l++}return 0===l?null:h}]}))},8872:(t,e,r)=>{"use strict";var n=r(2127),i=r(8942),o="includes";n(n.P+n.F*r(5203)(o),"String",{includes:function(t){return!!~i(this,t,o).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},9087:(t,e,r)=>{"use strict";var n=r(2127),i=r(1464)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(8184)("includes")},5890:(t,e,r)=>{for(var n=r(5165),i=r(1311),o=r(8859),a=r(7526),s=r(3341),c=r(906),f=r(7574),u=f("iterator"),d=f("toStringTag"),h=c.Array,l={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(l),b=0;b<p.length;b++){var v,y=p[b],m=l[y],g=a[y],w=g&&g.prototype;if(w&&(w[u]||s(w,u,h),w[d]||s(w,d,y),c[y]=h,m))for(v in n)w[v]||o(w,v,n[v],!0)}},4945:(t,e,r)=>{var n="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r.g&&r.g,i=function(){function t(){this.fetch=!1,this.DOMException=n.DOMException}return t.prototype=n,new t}();!function(t){!function(e){var r=void 0!==t&&t||"undefined"!=typeof self&&self||void 0!==r&&r,n="URLSearchParams"in r,i="Symbol"in r&&"iterator"in Symbol,o="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in r,s="ArrayBuffer"in r;if(s)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],f=ArrayBuffer.isView||function(t){return t&&c.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function d(t){return"string"!=typeof t&&(t=String(t)),t}function h(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function l(t){this.map={},t instanceof l?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function b(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function v(t){var e=new FileReader,r=b(e);return e.readAsArrayBuffer(t),r}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:o&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():s&&o&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):s&&(ArrayBuffer.prototype.isPrototypeOf(t)||f(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(v)}),this.text=function(){var t,e,r,n=p(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,r=b(e=new FileReader),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(_)}),this.json=function(){return this.text().then(JSON.parse)},this}l.prototype.append=function(t,e){t=u(t),e=d(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},l.prototype.delete=function(t){delete this.map[u(t)]},l.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},l.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},l.prototype.set=function(t,e){this.map[u(t)]=d(e)},l.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},l.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),h(t)},l.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),h(t)},l.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),h(t)},i&&(l.prototype[Symbol.iterator]=l.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var r,n,i=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new l(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(n=(r=e.method||this.method||"GET").toUpperCase(),g.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(i),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function _(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(i))}})),e}function A(t,e){if(!(this instanceof A))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new l(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},m.call(w.prototype),m.call(A.prototype),A.prototype.clone=function(){return new A(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},A.error=function(){var t=new A(null,{status:0,statusText:""});return t.type="error",t};var M=[301,302,303,307,308];A.redirect=function(t,e){if(-1===M.indexOf(e))throw new RangeError("Invalid status code");return new A(null,{status:e,headers:{location:t}})},e.DOMException=r.DOMException;try{new e.DOMException}catch(t){e.DOMException=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack},e.DOMException.prototype=Object.create(Error.prototype),e.DOMException.prototype.constructor=e.DOMException}function S(t,n){return new Promise((function(i,a){var c=new w(t,n);if(c.signal&&c.signal.aborted)return a(new e.DOMException("Aborted","AbortError"));var f=new XMLHttpRequest;function u(){f.abort()}f.onload=function(){var t,e,r={status:f.status,statusText:f.statusText,headers:(t=f.getAllResponseHeaders()||"",e=new l,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();e.append(n,i)}})),e)};r.url="responseURL"in f?f.responseURL:r.headers.get("X-Request-URL");var n="response"in f?f.response:f.responseText;setTimeout((function(){i(new A(n,r))}),0)},f.onerror=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},f.ontimeout=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},f.onabort=function(){setTimeout((function(){a(new e.DOMException("Aborted","AbortError"))}),0)},f.open(c.method,function(t){try{return""===t&&r.location.href?r.location.href:t}catch(e){return t}}(c.url),!0),"include"===c.credentials?f.withCredentials=!0:"omit"===c.credentials&&(f.withCredentials=!1),"responseType"in f&&(o?f.responseType="blob":s&&c.headers.get("Content-Type")&&-1!==c.headers.get("Content-Type").indexOf("application/octet-stream")&&(f.responseType="arraybuffer")),!n||"object"!=typeof n.headers||n.headers instanceof l?c.headers.forEach((function(t,e){f.setRequestHeader(e,t)})):Object.getOwnPropertyNames(n.headers).forEach((function(t){f.setRequestHeader(t,d(n.headers[t]))})),c.signal&&(c.signal.addEventListener("abort",u),f.onreadystatechange=function(){4===f.readyState&&c.signal.removeEventListener("abort",u)}),f.send(void 0===c._bodyInit?null:c._bodyInit)}))}S.polyfill=!0,r.fetch||(r.fetch=S,r.Headers=l,r.Request=w,r.Response=A),e.Headers=l,e.Request=w,e.Response=A,e.fetch=S}({})}(i),i.fetch.ponyfill=!0,delete i.fetch.polyfill;var o=n.fetch?n:i;(e=o.fetch).default=o.fetch,e.fetch=o.fetch,e.Headers=o.Headers,e.Request=o.Request,e.Response=o.Response,t.exports=e},955:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.BlockCipher,r=t.algo,i=[],o=[],a=[],s=[],c=[],f=[],u=[],d=[],h=[],l=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var r=0,n=0;for(e=0;e<256;e++){var p=n^n<<1^n<<2^n<<3^n<<4;p=p>>>8^255&p^99,i[r]=p,o[p]=r;var b=t[r],v=t[b],y=t[v],m=257*t[p]^16843008*p;a[r]=m<<24|m>>>8,s[r]=m<<16|m>>>16,c[r]=m<<8|m>>>24,f[r]=m,m=16843009*y^65537*v^257*b^16843008*r,u[p]=m<<24|m>>>8,d[p]=m<<16|m>>>16,h[p]=m<<8|m>>>24,l[p]=m,r?(r=b^t[t[t[y^b]]],n^=t[t[n]]):r=n=1}}();var p=[0,1,2,4,8,16,32,64,128,27,54],b=r.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,n=4*((this._nRounds=r+6)+1),o=this._keySchedule=[],a=0;a<n;a++)a<r?o[a]=e[a]:(f=o[a-1],a%r?r>6&&a%r==4&&(f=i[f>>>24]<<24|i[f>>>16&255]<<16|i[f>>>8&255]<<8|i[255&f]):(f=i[(f=f<<8|f>>>24)>>>24]<<24|i[f>>>16&255]<<16|i[f>>>8&255]<<8|i[255&f],f^=p[a/r|0]<<24),o[a]=o[a-r]^f);for(var s=this._invKeySchedule=[],c=0;c<n;c++){if(a=n-c,c%4)var f=o[a];else f=o[a-4];s[c]=c<4||a<=4?f:u[i[f>>>24]]^d[i[f>>>16&255]]^h[i[f>>>8&255]]^l[i[255&f]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,a,s,c,f,i)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,u,d,h,l,o),r=t[e+1],t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,n,i,o,a,s){for(var c=this._nRounds,f=t[e]^r[0],u=t[e+1]^r[1],d=t[e+2]^r[2],h=t[e+3]^r[3],l=4,p=1;p<c;p++){var b=n[f>>>24]^i[u>>>16&255]^o[d>>>8&255]^a[255&h]^r[l++],v=n[u>>>24]^i[d>>>16&255]^o[h>>>8&255]^a[255&f]^r[l++],y=n[d>>>24]^i[h>>>16&255]^o[f>>>8&255]^a[255&u]^r[l++],m=n[h>>>24]^i[f>>>16&255]^o[u>>>8&255]^a[255&d]^r[l++];f=b,u=v,d=y,h=m}b=(s[f>>>24]<<24|s[u>>>16&255]<<16|s[d>>>8&255]<<8|s[255&h])^r[l++],v=(s[u>>>24]<<24|s[d>>>16&255]<<16|s[h>>>8&255]<<8|s[255&f])^r[l++],y=(s[d>>>24]<<24|s[h>>>16&255]<<16|s[f>>>8&255]<<8|s[255&u])^r[l++],m=(s[h>>>24]<<24|s[f>>>16&255]<<16|s[u>>>8&255]<<8|s[255&d])^r[l++],t[e]=b,t[e+1]=v,t[e+2]=y,t[e+3]=m},keySize:8});t.AES=e._createHelper(b)}(),n.AES)},3128:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.BlockCipher,r=t.algo;const i=16,o=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],a=[[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946],[1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055],[3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504],[976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462]];var s={pbox:[],sbox:[]};function c(t,e){let r=e>>24&255,n=e>>16&255,i=e>>8&255,o=255&e,a=t.sbox[0][r]+t.sbox[1][n];return a^=t.sbox[2][i],a+=t.sbox[3][o],a}function f(t,e,r){let n,o=e,a=r;for(let e=0;e<i;++e)o^=t.pbox[e],a=c(t,o)^a,n=o,o=a,a=n;return n=o,o=a,a=n,a^=t.pbox[i],o^=t.pbox[i+1],{left:o,right:a}}var u=r.Blowfish=e.extend({_doReset:function(){if(this._keyPriorReset!==this._key){var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4;!function(t,e,r){for(let e=0;e<4;e++){t.sbox[e]=[];for(let r=0;r<256;r++)t.sbox[e][r]=a[e][r]}let n=0;for(let a=0;a<i+2;a++)t.pbox[a]=o[a]^e[n],n++,n>=r&&(n=0);let s=0,c=0,u=0;for(let e=0;e<i+2;e+=2)u=f(t,s,c),s=u.left,c=u.right,t.pbox[e]=s,t.pbox[e+1]=c;for(let e=0;e<4;e++)for(let r=0;r<256;r+=2)u=f(t,s,c),s=u.left,c=u.right,t.sbox[e][r]=s,t.sbox[e][r+1]=c}(s,e,r)}},encryptBlock:function(t,e){var r=f(s,t[e],t[e+1]);t[e]=r.left,t[e+1]=r.right},decryptBlock:function(t,e){var r=function(t,e,r){let n,o=e,a=r;for(let e=i+1;e>1;--e)o^=t.pbox[e],a=c(t,o)^a,n=o,o=a,a=n;return n=o,o=a,a=n,a^=t.pbox[1],o^=t.pbox[0],{left:o,right:a}}(s,t[e],t[e+1]);t[e]=r.left,t[e+1]=r.right},blockSize:2,keySize:4,ivSize:2});t.Blowfish=e._createHelper(u)}(),n.Blowfish)},7165:function(t,e,r){var n,i,o,a,s,c,f,u,d,h,l,p,b,v,y,m,g,w,_;t.exports=(n=r(9021),r(9506),void(n.lib.Cipher||(o=(i=n).lib,a=o.Base,s=o.WordArray,c=o.BufferedBlockAlgorithm,(f=i.enc).Utf8,u=f.Base64,d=i.algo.EvpKDF,h=o.Cipher=c.extend({cfg:a.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){c.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?_:g}return function(e){return{encrypt:function(r,n,i){return t(n).encrypt(e,r,n,i)},decrypt:function(r,n,i){return t(n).decrypt(e,r,n,i)}}}}()}),o.StreamCipher=h.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),l=i.mode={},p=o.BlockCipherMode=a.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),b=l.CBC=function(){var t=p.extend();function e(t,e,r){var n,i=this._iv;i?(n=i,this._iv=void 0):n=this._prevBlock;for(var o=0;o<r;o++)t[e+o]^=n[o]}return t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize;e.call(this,t,r,i),n.encryptBlock(t,r),this._prevBlock=t.slice(r,r+i)}}),t.Decryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,o=t.slice(r,r+i);n.decryptBlock(t,r),e.call(this,t,r,i),this._prevBlock=o}}),t}(),v=(i.pad={}).Pkcs7={pad:function(t,e){for(var r=4*e,n=r-t.sigBytes%r,i=n<<24|n<<16|n<<8|n,o=[],a=0;a<n;a+=4)o.push(i);var c=s.create(o,n);t.concat(c)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},o.BlockCipher=h.extend({cfg:h.cfg.extend({mode:b,padding:v}),reset:function(){var t;h.reset.call(this);var e=this.cfg,r=e.iv,n=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=n.createEncryptor:(t=n.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,r&&r.words):(this._mode=t.call(n,this,r&&r.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),y=o.CipherParams=a.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),m=(i.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,r=t.salt;return(r?s.create([1398893684,1701076831]).concat(r).concat(e):e).toString(u)},parse:function(t){var e,r=u.parse(t),n=r.words;return 1398893684==n[0]&&1701076831==n[1]&&(e=s.create(n.slice(2,4)),n.splice(0,4),r.sigBytes-=16),y.create({ciphertext:r,salt:e})}},g=o.SerializableCipher=a.extend({cfg:a.extend({format:m}),encrypt:function(t,e,r,n){n=this.cfg.extend(n);var i=t.createEncryptor(r,n),o=i.finalize(e),a=i.cfg;return y.create({ciphertext:o,key:r,iv:a.iv,algorithm:t,mode:a.mode,padding:a.padding,blockSize:t.blockSize,formatter:n.format})},decrypt:function(t,e,r,n){return n=this.cfg.extend(n),e=this._parse(e,n.format),t.createDecryptor(r,n).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),w=(i.kdf={}).OpenSSL={execute:function(t,e,r,n,i){if(n||(n=s.random(8)),i)o=d.create({keySize:e+r,hasher:i}).compute(t,n);else var o=d.create({keySize:e+r}).compute(t,n);var a=s.create(o.words.slice(e),4*r);return o.sigBytes=4*e,y.create({key:o,iv:a,salt:n})}},_=o.PasswordBasedCipher=g.extend({cfg:g.cfg.extend({kdf:w}),encrypt:function(t,e,r,n){var i=(n=this.cfg.extend(n)).kdf.execute(r,t.keySize,t.ivSize,n.salt,n.hasher);n.iv=i.iv;var o=g.encrypt.call(this,t,e,i.key,n);return o.mixIn(i),o},decrypt:function(t,e,r,n){n=this.cfg.extend(n),e=this._parse(e,n.format);var i=n.kdf.execute(r,t.keySize,t.ivSize,e.salt,n.hasher);return n.iv=i.iv,g.decrypt.call(this,t,e,i.key,n)}}))))},9021:function(t,e,r){var n;t.exports=(n=n||function(t,e){var n;if("undefined"!=typeof window&&window.crypto&&(n=window.crypto),"undefined"!=typeof self&&self.crypto&&(n=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(n=globalThis.crypto),!n&&"undefined"!=typeof window&&window.msCrypto&&(n=window.msCrypto),!n&&void 0!==r.g&&r.g.crypto&&(n=r.g.crypto),!n)try{n=r(477)}catch(t){}var i=function(){if(n){if("function"==typeof n.getRandomValues)try{return n.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof n.randomBytes)try{return n.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),a={},s=a.lib={},c=s.Base={extend:function(t){var e=o(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},f=s.WordArray=c.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||d).stringify(this)},concat:function(t){var e=this.words,r=t.words,n=this.sigBytes,i=t.sigBytes;if(this.clamp(),n%4)for(var o=0;o<i;o++){var a=r[o>>>2]>>>24-o%4*8&255;e[n+o>>>2]|=a<<24-(n+o)%4*8}else for(var s=0;s<i;s+=4)e[n+s>>>2]=r[s>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=t.ceil(r/4)},clone:function(){var t=c.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(i());return new f.init(e,t)}}),u=a.enc={},d=u.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var o=e[i>>>2]>>>24-i%4*8&255;n.push((o>>>4).toString(16)),n.push((15&o).toString(16))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n+=2)r[n>>>3]|=parseInt(t.substr(n,2),16)<<24-n%8*4;return new f.init(r,e/2)}},h=u.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var o=e[i>>>2]>>>24-i%4*8&255;n.push(String.fromCharCode(o))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n++)r[n>>>2]|=(255&t.charCodeAt(n))<<24-n%4*8;return new f.init(r,e)}},l=u.Utf8={stringify:function(t){try{return decodeURIComponent(escape(h.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return h.parse(unescape(encodeURIComponent(t)))}},p=s.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new f.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var r,n=this._data,i=n.words,o=n.sigBytes,a=this.blockSize,s=o/(4*a),c=(s=e?t.ceil(s):t.max((0|s)-this._minBufferSize,0))*a,u=t.min(4*c,o);if(c){for(var d=0;d<c;d+=a)this._doProcessBlock(i,d);r=i.splice(0,c),n.sigBytes-=u}return new f.init(r,u)},clone:function(){var t=c.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),b=(s.Hasher=p.extend({cfg:c.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){p.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new b.HMAC.init(t,r).finalize(e)}}}),a.algo={});return a}(Math),n)},754:function(t,e,r){var n,i,o;t.exports=(n=r(9021),o=(i=n).lib.WordArray,i.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,n=this._map;t.clamp();for(var i=[],o=0;o<r;o+=3)for(var a=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,s=0;s<4&&o+.75*s<r;s++)i.push(n.charAt(a>>>6*(3-s)&63));var c=n.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join("")},parse:function(t){var e=t.length,r=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var i=0;i<r.length;i++)n[r.charCodeAt(i)]=i}var a=r.charAt(64);if(a){var s=t.indexOf(a);-1!==s&&(e=s)}return function(t,e,r){for(var n=[],i=0,a=0;a<e;a++)if(a%4){var s=r[t.charCodeAt(a-1)]<<a%4*2|r[t.charCodeAt(a)]>>>6-a%4*2;n[i>>>2]|=s<<24-i%4*8,i++}return o.create(n,i)}(t,e,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},n.enc.Base64)},4725:function(t,e,r){var n,i,o;t.exports=(n=r(9021),o=(i=n).lib.WordArray,i.enc.Base64url={stringify:function(t,e){void 0===e&&(e=!0);var r=t.words,n=t.sigBytes,i=e?this._safe_map:this._map;t.clamp();for(var o=[],a=0;a<n;a+=3)for(var s=(r[a>>>2]>>>24-a%4*8&255)<<16|(r[a+1>>>2]>>>24-(a+1)%4*8&255)<<8|r[a+2>>>2]>>>24-(a+2)%4*8&255,c=0;c<4&&a+.75*c<n;c++)o.push(i.charAt(s>>>6*(3-c)&63));var f=i.charAt(64);if(f)for(;o.length%4;)o.push(f);return o.join("")},parse:function(t,e){void 0===e&&(e=!0);var r=t.length,n=e?this._safe_map:this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var a=0;a<n.length;a++)i[n.charCodeAt(a)]=a}var s=n.charAt(64);if(s){var c=t.indexOf(s);-1!==c&&(r=c)}return function(t,e,r){for(var n=[],i=0,a=0;a<e;a++)if(a%4){var s=r[t.charCodeAt(a-1)]<<a%4*2|r[t.charCodeAt(a)]>>>6-a%4*2;n[i>>>2]|=s<<24-i%4*8,i++}return o.create(n,i)}(t,r,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},n.enc.Base64url)},5503:function(t,e,r){var n;t.exports=(n=r(9021),function(){var t=n,e=t.lib.WordArray,r=t.enc;function i(t){return t<<8&4278255360|t>>>8&16711935}r.Utf16=r.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i+=2){var o=e[i>>>2]>>>16-i%4*8&65535;n.push(String.fromCharCode(o))}return n.join("")},parse:function(t){for(var r=t.length,n=[],i=0;i<r;i++)n[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return e.create(n,2*r)}},r.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],o=0;o<r;o+=2){var a=i(e[o>>>2]>>>16-o%4*8&65535);n.push(String.fromCharCode(a))}return n.join("")},parse:function(t){for(var r=t.length,n=[],o=0;o<r;o++)n[o>>>1]|=i(t.charCodeAt(o)<<16-o%2*16);return e.create(n,2*r)}}}(),n.enc.Utf16)},9506:function(t,e,r){var n,i,o,a,s,c,f,u;t.exports=(n=r(9021),r(5471),r(1025),a=(o=(i=n).lib).Base,s=o.WordArray,f=(c=i.algo).MD5,u=c.EvpKDF=a.extend({cfg:a.extend({keySize:4,hasher:f,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r,n=this.cfg,i=n.hasher.create(),o=s.create(),a=o.words,c=n.keySize,f=n.iterations;a.length<c;){r&&i.update(r),r=i.update(t).finalize(e),i.reset();for(var u=1;u<f;u++)r=i.finalize(r),i.reset();o.concat(r)}return o.sigBytes=4*c,o}}),i.EvpKDF=function(t,e,r){return u.create(r).compute(t,e)},n.EvpKDF)},25:function(t,e,r){var n,i,o,a;t.exports=(n=r(9021),r(7165),o=(i=n).lib.CipherParams,a=i.enc.Hex,i.format.Hex={stringify:function(t){return t.ciphertext.toString(a)},parse:function(t){var e=a.parse(t);return o.create({ciphertext:e})}},n.format.Hex)},1025:function(t,e,r){var n,i,o,a;t.exports=(n=r(9021),o=(i=n).lib.Base,a=i.enc.Utf8,void(i.algo.HMAC=o.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=a.parse(e));var r=t.blockSize,n=4*r;e.sigBytes>n&&(e=t.finalize(e)),e.clamp();for(var i=this._oKey=e.clone(),o=this._iKey=e.clone(),s=i.words,c=o.words,f=0;f<r;f++)s[f]^=1549556828,c[f]^=909522486;i.sigBytes=o.sigBytes=n,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,r=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(r))}})))},1396:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),r(6440),r(5503),r(754),r(4725),r(4636),r(5471),r(3009),r(6308),r(1380),r(9557),r(5953),r(8056),r(1025),r(19),r(9506),r(7165),r(2169),r(6939),r(6372),r(3797),r(8454),r(2073),r(4905),r(482),r(2155),r(8124),r(25),r(955),r(7628),r(7193),r(6298),r(2696),r(3128),n)},6440:function(t,e,r){var n;t.exports=(n=r(9021),function(){if("function"==typeof ArrayBuffer){var t=n.lib.WordArray,e=t.init,r=t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var r=t.byteLength,n=[],i=0;i<r;i++)n[i>>>2]|=t[i]<<24-i%4*8;e.call(this,n,r)}else e.apply(this,arguments)};r.prototype=t}}(),n.lib.WordArray)},4636:function(t,e,r){var n;t.exports=(n=r(9021),function(t){var e=n,r=e.lib,i=r.WordArray,o=r.Hasher,a=e.algo,s=[];!function(){for(var e=0;e<64;e++)s[e]=4294967296*t.abs(t.sin(e+1))|0}();var c=a.MD5=o.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var o=this._hash.words,a=t[e+0],c=t[e+1],l=t[e+2],p=t[e+3],b=t[e+4],v=t[e+5],y=t[e+6],m=t[e+7],g=t[e+8],w=t[e+9],_=t[e+10],A=t[e+11],M=t[e+12],S=t[e+13],x=t[e+14],k=t[e+15],E=o[0],O=o[1],R=o[2],P=o[3];E=f(E,O,R,P,a,7,s[0]),P=f(P,E,O,R,c,12,s[1]),R=f(R,P,E,O,l,17,s[2]),O=f(O,R,P,E,p,22,s[3]),E=f(E,O,R,P,b,7,s[4]),P=f(P,E,O,R,v,12,s[5]),R=f(R,P,E,O,y,17,s[6]),O=f(O,R,P,E,m,22,s[7]),E=f(E,O,R,P,g,7,s[8]),P=f(P,E,O,R,w,12,s[9]),R=f(R,P,E,O,_,17,s[10]),O=f(O,R,P,E,A,22,s[11]),E=f(E,O,R,P,M,7,s[12]),P=f(P,E,O,R,S,12,s[13]),R=f(R,P,E,O,x,17,s[14]),E=u(E,O=f(O,R,P,E,k,22,s[15]),R,P,c,5,s[16]),P=u(P,E,O,R,y,9,s[17]),R=u(R,P,E,O,A,14,s[18]),O=u(O,R,P,E,a,20,s[19]),E=u(E,O,R,P,v,5,s[20]),P=u(P,E,O,R,_,9,s[21]),R=u(R,P,E,O,k,14,s[22]),O=u(O,R,P,E,b,20,s[23]),E=u(E,O,R,P,w,5,s[24]),P=u(P,E,O,R,x,9,s[25]),R=u(R,P,E,O,p,14,s[26]),O=u(O,R,P,E,g,20,s[27]),E=u(E,O,R,P,S,5,s[28]),P=u(P,E,O,R,l,9,s[29]),R=u(R,P,E,O,m,14,s[30]),E=d(E,O=u(O,R,P,E,M,20,s[31]),R,P,v,4,s[32]),P=d(P,E,O,R,g,11,s[33]),R=d(R,P,E,O,A,16,s[34]),O=d(O,R,P,E,x,23,s[35]),E=d(E,O,R,P,c,4,s[36]),P=d(P,E,O,R,b,11,s[37]),R=d(R,P,E,O,m,16,s[38]),O=d(O,R,P,E,_,23,s[39]),E=d(E,O,R,P,S,4,s[40]),P=d(P,E,O,R,a,11,s[41]),R=d(R,P,E,O,p,16,s[42]),O=d(O,R,P,E,y,23,s[43]),E=d(E,O,R,P,w,4,s[44]),P=d(P,E,O,R,M,11,s[45]),R=d(R,P,E,O,k,16,s[46]),E=h(E,O=d(O,R,P,E,l,23,s[47]),R,P,a,6,s[48]),P=h(P,E,O,R,m,10,s[49]),R=h(R,P,E,O,x,15,s[50]),O=h(O,R,P,E,v,21,s[51]),E=h(E,O,R,P,M,6,s[52]),P=h(P,E,O,R,p,10,s[53]),R=h(R,P,E,O,_,15,s[54]),O=h(O,R,P,E,c,21,s[55]),E=h(E,O,R,P,g,6,s[56]),P=h(P,E,O,R,k,10,s[57]),R=h(R,P,E,O,y,15,s[58]),O=h(O,R,P,E,S,21,s[59]),E=h(E,O,R,P,b,6,s[60]),P=h(P,E,O,R,A,10,s[61]),R=h(R,P,E,O,l,15,s[62]),O=h(O,R,P,E,w,21,s[63]),o[0]=o[0]+E|0,o[1]=o[1]+O|0,o[2]=o[2]+R|0,o[3]=o[3]+P|0},_doFinalize:function(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;r[i>>>5]|=128<<24-i%32;var o=t.floor(n/4294967296),a=n;r[15+(i+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),r[14+(i+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),e.sigBytes=4*(r.length+1),this._process();for(var s=this._hash,c=s.words,f=0;f<4;f++){var u=c[f];c[f]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}return s},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function f(t,e,r,n,i,o,a){var s=t+(e&r|~e&n)+i+a;return(s<<o|s>>>32-o)+e}function u(t,e,r,n,i,o,a){var s=t+(e&n|r&~n)+i+a;return(s<<o|s>>>32-o)+e}function d(t,e,r,n,i,o,a){var s=t+(e^r^n)+i+a;return(s<<o|s>>>32-o)+e}function h(t,e,r,n,i,o,a){var s=t+(r^(e|~n))+i+a;return(s<<o|s>>>32-o)+e}e.MD5=o._createHelper(c),e.HmacMD5=o._createHmacHelper(c)}(Math),n.MD5)},2169:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.mode.CFB=function(){var t=n.lib.BlockCipherMode.extend();function e(t,e,r,n){var i,o=this._iv;o?(i=o.slice(0),this._iv=void 0):i=this._prevBlock,n.encryptBlock(i,0);for(var a=0;a<r;a++)t[e+a]^=i[a]}return t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize;e.call(this,t,r,i,n),this._prevBlock=t.slice(r,r+i)}}),t.Decryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,o=t.slice(r,r+i);e.call(this,t,r,i,n),this._prevBlock=o}}),t}(),n.mode.CFB)},6372:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.mode.CTRGladman=function(){var t=n.lib.BlockCipherMode.extend();function e(t){if(255&~(t>>24))t+=1<<24;else{var e=t>>16&255,r=t>>8&255,n=255&t;255===e?(e=0,255===r?(r=0,255===n?n=0:++n):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=n}return t}var r=t.Encryptor=t.extend({processBlock:function(t,r){var n=this._cipher,i=n.blockSize,o=this._iv,a=this._counter;o&&(a=this._counter=o.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(a);var s=a.slice(0);n.encryptBlock(s,0);for(var c=0;c<i;c++)t[r+c]^=s[c]}});return t.Decryptor=r,t}(),n.mode.CTRGladman)},6939:function(t,e,r){var n,i,o;t.exports=(n=r(9021),r(7165),n.mode.CTR=(o=(i=n.lib.BlockCipherMode.extend()).Encryptor=i.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,o=this._counter;i&&(o=this._counter=i.slice(0),this._iv=void 0);var a=o.slice(0);r.encryptBlock(a,0),o[n-1]=o[n-1]+1|0;for(var s=0;s<n;s++)t[e+s]^=a[s]}}),i.Decryptor=o,i),n.mode.CTR)},8454:function(t,e,r){var n,i;t.exports=(n=r(9021),r(7165),n.mode.ECB=((i=n.lib.BlockCipherMode.extend()).Encryptor=i.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),i.Decryptor=i.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),i),n.mode.ECB)},3797:function(t,e,r){var n,i,o;t.exports=(n=r(9021),r(7165),n.mode.OFB=(o=(i=n.lib.BlockCipherMode.extend()).Encryptor=i.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,o=this._keystream;i&&(o=this._keystream=i.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var a=0;a<n;a++)t[e+a]^=o[a]}}),i.Decryptor=o,i),n.mode.OFB)},2073:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,n=4*e,i=n-r%n,o=r+i-1;t.clamp(),t.words[o>>>2]|=i<<24-o%4*8,t.sigBytes+=i},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},n.pad.Ansix923)},4905:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.Iso10126={pad:function(t,e){var r=4*e,i=r-t.sigBytes%r;t.concat(n.lib.WordArray.random(i-1)).concat(n.lib.WordArray.create([i<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},n.pad.Iso10126)},482:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.Iso97971={pad:function(t,e){t.concat(n.lib.WordArray.create([2147483648],1)),n.pad.ZeroPadding.pad(t,e)},unpad:function(t){n.pad.ZeroPadding.unpad(t),t.sigBytes--}},n.pad.Iso97971)},8124:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.NoPadding={pad:function(){},unpad:function(){}},n.pad.NoPadding)},2155:function(t,e,r){var n;t.exports=(n=r(9021),r(7165),n.pad.ZeroPadding={pad:function(t,e){var r=4*e;t.clamp(),t.sigBytes+=r-(t.sigBytes%r||r)},unpad:function(t){var e=t.words,r=t.sigBytes-1;for(r=t.sigBytes-1;r>=0;r--)if(e[r>>>2]>>>24-r%4*8&255){t.sigBytes=r+1;break}}},n.pad.ZeroPadding)},19:function(t,e,r){var n,i,o,a,s,c,f,u,d;t.exports=(n=r(9021),r(3009),r(1025),a=(o=(i=n).lib).Base,s=o.WordArray,f=(c=i.algo).SHA256,u=c.HMAC,d=c.PBKDF2=a.extend({cfg:a.extend({keySize:4,hasher:f,iterations:25e4}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,n=u.create(r.hasher,t),i=s.create(),o=s.create([1]),a=i.words,c=o.words,f=r.keySize,d=r.iterations;a.length<f;){var h=n.update(e).finalize(o);n.reset();for(var l=h.words,p=l.length,b=h,v=1;v<d;v++){b=n.finalize(b),n.reset();for(var y=b.words,m=0;m<p;m++)l[m]^=y[m]}i.concat(h),c[0]++}return i.sigBytes=4*f,i}}),i.PBKDF2=function(t,e,r){return d.create(r).compute(t,e)},n.PBKDF2)},2696:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=[],o=[],a=[],s=r.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var i=0;i<4;i++)c.call(this);for(i=0;i<8;i++)n[i]^=r[i+4&7];if(e){var o=e.words,a=o[0],s=o[1],f=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),u=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),d=f>>>16|4294901760&u,h=u<<16|65535&f;for(n[0]^=f,n[1]^=d,n[2]^=u,n[3]^=h,n[4]^=f,n[5]^=d,n[6]^=u,n[7]^=h,i=0;i<4;i++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)o[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,s=n>>>16,c=((i*i>>>17)+i*s>>>15)+s*s,f=((4294901760&n)*n|0)+((65535&n)*n|0);a[r]=c^f}t[0]=a[0]+(a[7]<<16|a[7]>>>16)+(a[6]<<16|a[6]>>>16)|0,t[1]=a[1]+(a[0]<<8|a[0]>>>24)+a[7]|0,t[2]=a[2]+(a[1]<<16|a[1]>>>16)+(a[0]<<16|a[0]>>>16)|0,t[3]=a[3]+(a[2]<<8|a[2]>>>24)+a[1]|0,t[4]=a[4]+(a[3]<<16|a[3]>>>16)+(a[2]<<16|a[2]>>>16)|0,t[5]=a[5]+(a[4]<<8|a[4]>>>24)+a[3]|0,t[6]=a[6]+(a[5]<<16|a[5]>>>16)+(a[4]<<16|a[4]>>>16)|0,t[7]=a[7]+(a[6]<<8|a[6]>>>24)+a[5]|0}t.RabbitLegacy=e._createHelper(s)}(),n.RabbitLegacy)},6298:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=[],o=[],a=[],s=r.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);var n=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,r=0;r<4;r++)c.call(this);for(r=0;r<8;r++)i[r]^=n[r+4&7];if(e){var o=e.words,a=o[0],s=o[1],f=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),u=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),d=f>>>16|4294901760&u,h=u<<16|65535&f;for(i[0]^=f,i[1]^=d,i[2]^=u,i[3]^=h,i[4]^=f,i[5]^=d,i[6]^=u,i[7]^=h,r=0;r<4;r++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)o[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,s=n>>>16,c=((i*i>>>17)+i*s>>>15)+s*s,f=((4294901760&n)*n|0)+((65535&n)*n|0);a[r]=c^f}t[0]=a[0]+(a[7]<<16|a[7]>>>16)+(a[6]<<16|a[6]>>>16)|0,t[1]=a[1]+(a[0]<<8|a[0]>>>24)+a[7]|0,t[2]=a[2]+(a[1]<<16|a[1]>>>16)+(a[0]<<16|a[0]>>>16)|0,t[3]=a[3]+(a[2]<<8|a[2]>>>24)+a[1]|0,t[4]=a[4]+(a[3]<<16|a[3]>>>16)+(a[2]<<16|a[2]>>>16)|0,t[5]=a[5]+(a[4]<<8|a[4]>>>24)+a[3]|0,t[6]=a[6]+(a[5]<<16|a[5]>>>16)+(a[4]<<16|a[4]>>>16)|0,t[7]=a[7]+(a[6]<<8|a[6]>>>24)+a[5]|0}t.Rabbit=e._createHelper(s)}(),n.Rabbit)},7193:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib.StreamCipher,r=t.algo,i=r.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,n=this._S=[],i=0;i<256;i++)n[i]=i;i=0;for(var o=0;i<256;i++){var a=i%r,s=e[a>>>2]>>>24-a%4*8&255;o=(o+n[i]+s)%256;var c=n[i];n[i]=n[o],n[o]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=o.call(this)},keySize:8,ivSize:0});function o(){for(var t=this._S,e=this._i,r=this._j,n=0,i=0;i<4;i++){r=(r+t[e=(e+1)%256])%256;var o=t[e];t[e]=t[r],t[r]=o,n|=t[(t[e]+t[r])%256]<<24-8*i}return this._i=e,this._j=r,n}t.RC4=e._createHelper(i);var a=r.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)o.call(this)}});t.RC4Drop=e._createHelper(a)}(),n.RC4)},8056:function(t,e,r){var n;t.exports=(n=r(9021),function(t){var e=n,r=e.lib,i=r.WordArray,o=r.Hasher,a=e.algo,s=i.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),c=i.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),f=i.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),u=i.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),d=i.create([0,1518500249,1859775393,2400959708,2840853838]),h=i.create([1352829926,1548603684,1836072691,2053994217,0]),l=a.RIPEMD160=o.extend({_doReset:function(){this._hash=i.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var o,a,l,w,_,A,M,S,x,k,E,O=this._hash.words,R=d.words,P=h.words,C=s.words,B=c.words,I=f.words,z=u.words;for(A=o=O[0],M=a=O[1],S=l=O[2],x=w=O[3],k=_=O[4],r=0;r<80;r+=1)E=o+t[e+C[r]]|0,E+=r<16?p(a,l,w)+R[0]:r<32?b(a,l,w)+R[1]:r<48?v(a,l,w)+R[2]:r<64?y(a,l,w)+R[3]:m(a,l,w)+R[4],E=(E=g(E|=0,I[r]))+_|0,o=_,_=w,w=g(l,10),l=a,a=E,E=A+t[e+B[r]]|0,E+=r<16?m(M,S,x)+P[0]:r<32?y(M,S,x)+P[1]:r<48?v(M,S,x)+P[2]:r<64?b(M,S,x)+P[3]:p(M,S,x)+P[4],E=(E=g(E|=0,z[r]))+k|0,A=k,k=x,x=g(S,10),S=M,M=E;E=O[1]+l+x|0,O[1]=O[2]+w+k|0,O[2]=O[3]+_+A|0,O[3]=O[4]+o+M|0,O[4]=O[0]+a+S|0,O[0]=E},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var i=this._hash,o=i.words,a=0;a<5;a++){var s=o[a];o[a]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return i},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function p(t,e,r){return t^e^r}function b(t,e,r){return t&e|~t&r}function v(t,e,r){return(t|~e)^r}function y(t,e,r){return t&r|e&~r}function m(t,e,r){return t^(e|~r)}function g(t,e){return t<<e|t>>>32-e}e.RIPEMD160=o._createHelper(l),e.HmacRIPEMD160=o._createHmacHelper(l)}(Math),n.RIPEMD160)},5471:function(t,e,r){var n,i,o,a,s,c,f,u;t.exports=(n=r(9021),o=(i=n).lib,a=o.WordArray,s=o.Hasher,c=i.algo,f=[],u=c.SHA1=s.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],a=r[3],s=r[4],c=0;c<80;c++){if(c<16)f[c]=0|t[e+c];else{var u=f[c-3]^f[c-8]^f[c-14]^f[c-16];f[c]=u<<1|u>>>31}var d=(n<<5|n>>>27)+s+f[c];d+=c<20?1518500249+(i&o|~i&a):c<40?1859775393+(i^o^a):c<60?(i&o|i&a|o&a)-1894007588:(i^o^a)-899497514,s=a,a=o,o=i<<30|i>>>2,i=n,n=d}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+s|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),e[15+(n+64>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}}),i.SHA1=s._createHelper(u),i.HmacSHA1=s._createHmacHelper(u),n.SHA1)},6308:function(t,e,r){var n,i,o,a,s,c;t.exports=(n=r(9021),r(3009),o=(i=n).lib.WordArray,a=i.algo,s=a.SHA256,c=a.SHA224=s.extend({_doReset:function(){this._hash=new o.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=s._doFinalize.call(this);return t.sigBytes-=4,t}}),i.SHA224=s._createHelper(c),i.HmacSHA224=s._createHmacHelper(c),n.SHA224)},3009:function(t,e,r){var n;t.exports=(n=r(9021),function(t){var e=n,r=e.lib,i=r.WordArray,o=r.Hasher,a=e.algo,s=[],c=[];!function(){function e(e){for(var r=t.sqrt(e),n=2;n<=r;n++)if(!(e%n))return!1;return!0}function r(t){return 4294967296*(t-(0|t))|0}for(var n=2,i=0;i<64;)e(n)&&(i<8&&(s[i]=r(t.pow(n,.5))),c[i]=r(t.pow(n,1/3)),i++),n++}();var f=[],u=a.SHA256=o.extend({_doReset:function(){this._hash=new i.init(s.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],a=r[3],s=r[4],u=r[5],d=r[6],h=r[7],l=0;l<64;l++){if(l<16)f[l]=0|t[e+l];else{var p=f[l-15],b=(p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3,v=f[l-2],y=(v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10;f[l]=b+f[l-7]+y+f[l-16]}var m=n&i^n&o^i&o,g=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),w=h+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&u^~s&d)+c[l]+f[l];h=d,d=u,u=s,s=a+w|0,a=o,o=i,i=n,n=w+(g+m)|0}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+s|0,r[5]=r[5]+u|0,r[6]=r[6]+d|0,r[7]=r[7]+h|0},_doFinalize:function(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;return r[i>>>5]|=128<<24-i%32,r[14+(i+64>>>9<<4)]=t.floor(n/4294967296),r[15+(i+64>>>9<<4)]=n,e.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=o._createHelper(u),e.HmacSHA256=o._createHmacHelper(u)}(Math),n.SHA256)},5953:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),function(t){var e=n,r=e.lib,i=r.WordArray,o=r.Hasher,a=e.x64.Word,s=e.algo,c=[],f=[],u=[];!function(){for(var t=1,e=0,r=0;r<24;r++){c[t+5*e]=(r+1)*(r+2)/2%64;var n=(2*t+3*e)%5;t=e%5,e=n}for(t=0;t<5;t++)for(e=0;e<5;e++)f[t+5*e]=e+(2*t+3*e)%5*5;for(var i=1,o=0;o<24;o++){for(var s=0,d=0,h=0;h<7;h++){if(1&i){var l=(1<<h)-1;l<32?d^=1<<l:s^=1<<l-32}128&i?i=i<<1^113:i<<=1}u[o]=a.create(s,d)}}();var d=[];!function(){for(var t=0;t<25;t++)d[t]=a.create()}();var h=s.SHA3=o.extend({cfg:o.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new a.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,n=this.blockSize/2,i=0;i<n;i++){var o=t[e+2*i],a=t[e+2*i+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),(O=r[i]).high^=a,O.low^=o}for(var s=0;s<24;s++){for(var h=0;h<5;h++){for(var l=0,p=0,b=0;b<5;b++)l^=(O=r[h+5*b]).high,p^=O.low;var v=d[h];v.high=l,v.low=p}for(h=0;h<5;h++){var y=d[(h+4)%5],m=d[(h+1)%5],g=m.high,w=m.low;for(l=y.high^(g<<1|w>>>31),p=y.low^(w<<1|g>>>31),b=0;b<5;b++)(O=r[h+5*b]).high^=l,O.low^=p}for(var _=1;_<25;_++){var A=(O=r[_]).high,M=O.low,S=c[_];S<32?(l=A<<S|M>>>32-S,p=M<<S|A>>>32-S):(l=M<<S-32|A>>>64-S,p=A<<S-32|M>>>64-S);var x=d[f[_]];x.high=l,x.low=p}var k=d[0],E=r[0];for(k.high=E.high,k.low=E.low,h=0;h<5;h++)for(b=0;b<5;b++){var O=r[_=h+5*b],R=d[_],P=d[(h+1)%5+5*b],C=d[(h+2)%5+5*b];O.high=R.high^~P.high&C.high,O.low=R.low^~P.low&C.low}O=r[0];var B=u[s];O.high^=B.high,O.low^=B.low}},_doFinalize:function(){var e=this._data,r=e.words,n=(this._nDataBytes,8*e.sigBytes),o=32*this.blockSize;r[n>>>5]|=1<<24-n%32,r[(t.ceil((n+1)/o)*o>>>5)-1]|=128,e.sigBytes=4*r.length,this._process();for(var a=this._state,s=this.cfg.outputLength/8,c=s/8,f=[],u=0;u<c;u++){var d=a[u],h=d.high,l=d.low;h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),l=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8),f.push(l),f.push(h)}return new i.init(f,s)},clone:function(){for(var t=o.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});e.SHA3=o._createHelper(h),e.HmacSHA3=o._createHmacHelper(h)}(Math),n.SHA3)},9557:function(t,e,r){var n,i,o,a,s,c,f,u;t.exports=(n=r(9021),r(3240),r(1380),o=(i=n).x64,a=o.Word,s=o.WordArray,c=i.algo,f=c.SHA512,u=c.SHA384=f.extend({_doReset:function(){this._hash=new s.init([new a.init(3418070365,3238371032),new a.init(1654270250,914150663),new a.init(2438529370,812702999),new a.init(355462360,4144912697),new a.init(1731405415,4290775857),new a.init(2394180231,1750603025),new a.init(3675008525,1694076839),new a.init(1203062813,3204075428)])},_doFinalize:function(){var t=f._doFinalize.call(this);return t.sigBytes-=16,t}}),i.SHA384=f._createHelper(u),i.HmacSHA384=f._createHmacHelper(u),n.SHA384)},1380:function(t,e,r){var n;t.exports=(n=r(9021),r(3240),function(){var t=n,e=t.lib.Hasher,r=t.x64,i=r.Word,o=r.WordArray,a=t.algo;function s(){return i.create.apply(i,arguments)}var c=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],f=[];!function(){for(var t=0;t<80;t++)f[t]=s()}();var u=a.SHA512=e.extend({_doReset:function(){this._hash=new o.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],a=r[3],s=r[4],u=r[5],d=r[6],h=r[7],l=n.high,p=n.low,b=i.high,v=i.low,y=o.high,m=o.low,g=a.high,w=a.low,_=s.high,A=s.low,M=u.high,S=u.low,x=d.high,k=d.low,E=h.high,O=h.low,R=l,P=p,C=b,B=v,I=y,z=m,T=g,N=w,j=_,L=A,q=M,F=S,U=x,D=k,H=E,J=O,W=0;W<80;W++){var K,G,V=f[W];if(W<16)G=V.high=0|t[e+2*W],K=V.low=0|t[e+2*W+1];else{var X=f[W-15],Y=X.high,Z=X.low,$=(Y>>>1|Z<<31)^(Y>>>8|Z<<24)^Y>>>7,Q=(Z>>>1|Y<<31)^(Z>>>8|Y<<24)^(Z>>>7|Y<<25),tt=f[W-2],et=tt.high,rt=tt.low,nt=(et>>>19|rt<<13)^(et<<3|rt>>>29)^et>>>6,it=(rt>>>19|et<<13)^(rt<<3|et>>>29)^(rt>>>6|et<<26),ot=f[W-7],at=ot.high,st=ot.low,ct=f[W-16],ft=ct.high,ut=ct.low;G=(G=(G=$+at+((K=Q+st)>>>0<Q>>>0?1:0))+nt+((K+=it)>>>0<it>>>0?1:0))+ft+((K+=ut)>>>0<ut>>>0?1:0),V.high=G,V.low=K}var dt,ht=j&q^~j&U,lt=L&F^~L&D,pt=R&C^R&I^C&I,bt=P&B^P&z^B&z,vt=(R>>>28|P<<4)^(R<<30|P>>>2)^(R<<25|P>>>7),yt=(P>>>28|R<<4)^(P<<30|R>>>2)^(P<<25|R>>>7),mt=(j>>>14|L<<18)^(j>>>18|L<<14)^(j<<23|L>>>9),gt=(L>>>14|j<<18)^(L>>>18|j<<14)^(L<<23|j>>>9),wt=c[W],_t=wt.high,At=wt.low,Mt=H+mt+((dt=J+gt)>>>0<J>>>0?1:0),St=yt+bt;H=U,J=D,U=q,D=F,q=j,F=L,j=T+(Mt=(Mt=(Mt=Mt+ht+((dt+=lt)>>>0<lt>>>0?1:0))+_t+((dt+=At)>>>0<At>>>0?1:0))+G+((dt+=K)>>>0<K>>>0?1:0))+((L=N+dt|0)>>>0<N>>>0?1:0)|0,T=I,N=z,I=C,z=B,C=R,B=P,R=Mt+(vt+pt+(St>>>0<yt>>>0?1:0))+((P=dt+St|0)>>>0<dt>>>0?1:0)|0}p=n.low=p+P,n.high=l+R+(p>>>0<P>>>0?1:0),v=i.low=v+B,i.high=b+C+(v>>>0<B>>>0?1:0),m=o.low=m+z,o.high=y+I+(m>>>0<z>>>0?1:0),w=a.low=w+N,a.high=g+T+(w>>>0<N>>>0?1:0),A=s.low=A+L,s.high=_+j+(A>>>0<L>>>0?1:0),S=u.low=S+F,u.high=M+q+(S>>>0<F>>>0?1:0),k=d.low=k+D,d.high=x+U+(k>>>0<D>>>0?1:0),O=h.low=O+J,h.high=E+H+(O>>>0<J>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),e[31+(n+128>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(u),t.HmacSHA512=e._createHmacHelper(u)}(),n.SHA512)},7628:function(t,e,r){var n;t.exports=(n=r(9021),r(754),r(4636),r(9506),r(7165),function(){var t=n,e=t.lib,r=e.WordArray,i=e.BlockCipher,o=t.algo,a=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],s=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],f=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],u=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],d=o.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var n=a[r]-1;e[r]=t[n>>>5]>>>31-n%32&1}for(var i=this._subKeys=[],o=0;o<16;o++){var f=i[o]=[],u=c[o];for(r=0;r<24;r++)f[r/6|0]|=e[(s[r]-1+u)%28]<<31-r%6,f[4+(r/6|0)]|=e[28+(s[r+24]-1+u)%28]<<31-r%6;for(f[0]=f[0]<<1|f[0]>>>31,r=1;r<7;r++)f[r]=f[r]>>>4*(r-1)+3;f[7]=f[7]<<5|f[7]>>>27}var d=this._invSubKeys=[];for(r=0;r<16;r++)d[r]=i[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],h.call(this,4,252645135),h.call(this,16,65535),l.call(this,2,858993459),l.call(this,8,16711935),h.call(this,1,1431655765);for(var n=0;n<16;n++){for(var i=r[n],o=this._lBlock,a=this._rBlock,s=0,c=0;c<8;c++)s|=f[c][((a^i[c])&u[c])>>>0];this._lBlock=a,this._rBlock=o^s}var d=this._lBlock;this._lBlock=this._rBlock,this._rBlock=d,h.call(this,1,1431655765),l.call(this,8,16711935),l.call(this,2,858993459),h.call(this,16,65535),h.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function h(t,e){var r=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=r,this._lBlock^=r<<t}function l(t,e){var r=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=r,this._rBlock^=r<<t}t.DES=i._createHelper(d);var p=o.TripleDES=i.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),n=t.length<4?t.slice(0,2):t.slice(2,4),i=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=d.createEncryptor(r.create(e)),this._des2=d.createEncryptor(r.create(n)),this._des3=d.createEncryptor(r.create(i))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=i._createHelper(p)}(),n.TripleDES)},3240:function(t,e,r){var n,i,o,a,s,c;t.exports=(n=r(9021),o=(i=n).lib,a=o.Base,s=o.WordArray,(c=i.x64={}).Word=a.extend({init:function(t,e){this.high=t,this.low=e}}),c.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],n=0;n<e;n++){var i=t[n];r.push(i.high),r.push(i.low)}return s.create(r,this.sigBytes)},clone:function(){for(var t=a.clone.call(this),e=t.words=this.words.slice(0),r=e.length,n=0;n<r;n++)e[n]=e[n].clone();return t}}),n)},7078:(t,e)=>{"use strict";function r(t){var e,r=new Float64Array(16);if(t)for(e=0;e<t.length;e++)r[e]=t[e];return r}new Uint8Array(16),new Uint8Array(32)[0]=9;r(),r([1]),r([56129,1]),r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16])},8385:function(t,e,r){!function(e,n){"use strict";t.exports?t.exports=n(r(8947)):e.ed2curve=n(e.nacl)}(this,(function(t){"use strict";if(!t)throw new Error("tweetnacl not loaded");var e=function(t){var e,r=new Float64Array(16);if(t)for(e=0;e<t.length;e++)r[e]=t[e];return r},r=e(),n=e([1]),i=e([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),o=e([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function a(t){var e,r;for(r=0;r<16;r++)t[r]+=65536,e=Math.floor(t[r]/65536),t[(r+1)*(r<15?1:0)]+=e-1+37*(e-1)*(15===r?1:0),t[r]-=65536*e}function s(t,e,r){for(var n,i=~(r-1),o=0;o<16;o++)n=i&(t[o]^e[o]),t[o]^=n,e[o]^=n}function c(t,e,r){var n;for(n=0;n<16;n++)t[n]=e[n]+r[n]|0}function f(t,e,r){var n;for(n=0;n<16;n++)t[n]=e[n]-r[n]|0}function u(t,e,r){var n,i,o=new Float64Array(31);for(n=0;n<31;n++)o[n]=0;for(n=0;n<16;n++)for(i=0;i<16;i++)o[n+i]+=e[n]*r[i];for(n=0;n<15;n++)o[n]+=38*o[n+16];for(n=0;n<16;n++)t[n]=o[n];a(t),a(t)}function d(t,e){u(t,e,e)}function h(t,r){var n,i,o,c=e(),f=e();for(n=0;n<16;n++)f[n]=r[n];for(a(f),a(f),a(f),i=0;i<2;i++){for(c[0]=f[0]-65517,n=1;n<15;n++)c[n]=f[n]-65535-(c[n-1]>>16&1),c[n-1]&=65535;c[15]=f[15]-32767-(c[14]>>16&1),o=c[15]>>16&1,c[14]&=65535,s(f,c,1-o)}for(n=0;n<16;n++)t[2*n]=255&f[n],t[2*n+1]=f[n]>>8}function l(t,e){var r=new Uint8Array(32),n=new Uint8Array(32);return h(r,t),h(n,e),function(t,e,r,n,i){var o,a=0;for(o=0;o<32;o++)a|=t[0+o]^r[0+o];return(1&a-1>>>8)-1}(r,0,n)}function p(t){var a=new Uint8Array(32),s=[e(),e(),e(),e()],p=e(),b=e();if(function(t,a){var s,p,b=e(),v=e(),y=e(),m=e(),g=e(),w=e(),_=e();return function(t,e){var r;for(r=0;r<16;r++)t[r]=0|e[r]}(t[2],n),function(t,e){var r;for(r=0;r<16;r++)t[r]=e[2*r]+(e[2*r+1]<<8);t[15]&=32767}(t[1],a),d(y,t[1]),u(m,y,i),f(y,y,t[2]),c(m,t[2],m),d(g,m),d(w,g),u(_,w,g),u(b,_,y),u(b,b,m),function(t,r){var n,i=e();for(n=0;n<16;n++)i[n]=r[n];for(n=250;n>=0;n--)d(i,i),1!==n&&u(i,i,r);for(n=0;n<16;n++)t[n]=i[n]}(b,b),u(b,b,y),u(b,b,m),u(b,b,m),u(t[0],b,m),d(v,t[0]),u(v,v,m),l(v,y)&&u(t[0],t[0],o),d(v,t[0]),u(v,v,m),l(v,y)?-1:(s=t[0],h(p=new Uint8Array(32),s),(1&p[0])==a[31]>>7&&f(t[0],r,t[0]),u(t[3],t[0],t[1]),0)}(s,t))return null;var v=s[1];return c(p,n,v),f(b,n,v),function(t,r){var n,i=e();for(n=0;n<16;n++)i[n]=r[n];for(n=253;n>=0;n--)d(i,i),2!==n&&4!==n&&u(i,i,r);for(n=0;n<16;n++)t[n]=i[n]}(b,b),u(p,p,b),h(a,p),a}function b(e){var r,n=new Uint8Array(64),i=new Uint8Array(32);for(t.lowlevel.crypto_hash(n,e,32),n[0]&=248,n[31]&=127,n[31]|=64,r=0;r<32;r++)i[r]=n[r];for(r=0;r<64;r++)n[r]=0;return i}return{convertPublicKey:p,convertSecretKey:b,convertKeyPair:function(t){var e=p(t.publicKey);return e?{publicKey:e,secretKey:b(t.secretKey)}:null}}}))},6729:(t,e,r)=>{"use strict";var n=e;n.version=r(1636).rE,n.utils=r(7011),n.rand=r(5037),n.curve=r(894),n.curves=r(480),n.ec=r(7447),n.eddsa=r(8650)},6677:(t,e,r)=>{"use strict";var n=r(9404),i=r(7011),o=i.getNAF,a=i.getJSF,s=i.assert;function c(t,e){this.type=t,this.p=new n(e.p,16),this.red=e.prime?n.red(e.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=e.n&&new n(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function f(t,e){this.curve=t,this.type=e,this.precomputed=null}t.exports=c,c.prototype.point=function(){throw new Error("Not implemented")},c.prototype.validate=function(){throw new Error("Not implemented")},c.prototype._fixedNafMul=function(t,e){s(t.precomputed);var r=t._getDoubles(),n=o(e,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var a,c,f=[];for(a=0;a<n.length;a+=r.step){c=0;for(var u=a+r.step-1;u>=a;u--)c=(c<<1)+n[u];f.push(c)}for(var d=this.jpoint(null,null,null),h=this.jpoint(null,null,null),l=i;l>0;l--){for(a=0;a<f.length;a++)(c=f[a])===l?h=h.mixedAdd(r.points[a]):c===-l&&(h=h.mixedAdd(r.points[a].neg()));d=d.add(h)}return d.toP()},c.prototype._wnafMul=function(t,e){var r=4,n=t._getNAFPoints(r);r=n.wnd;for(var i=n.points,a=o(e,r,this._bitLength),c=this.jpoint(null,null,null),f=a.length-1;f>=0;f--){for(var u=0;f>=0&&0===a[f];f--)u++;if(f>=0&&u++,c=c.dblp(u),f<0)break;var d=a[f];s(0!==d),c="affine"===t.type?d>0?c.mixedAdd(i[d-1>>1]):c.mixedAdd(i[-d-1>>1].neg()):d>0?c.add(i[d-1>>1]):c.add(i[-d-1>>1].neg())}return"affine"===t.type?c.toP():c},c.prototype._wnafMulAdd=function(t,e,r,n,i){var s,c,f,u=this._wnafT1,d=this._wnafT2,h=this._wnafT3,l=0;for(s=0;s<n;s++){var p=(f=e[s])._getNAFPoints(t);u[s]=p.wnd,d[s]=p.points}for(s=n-1;s>=1;s-=2){var b=s-1,v=s;if(1===u[b]&&1===u[v]){var y=[e[b],null,null,e[v]];0===e[b].y.cmp(e[v].y)?(y[1]=e[b].add(e[v]),y[2]=e[b].toJ().mixedAdd(e[v].neg())):0===e[b].y.cmp(e[v].y.redNeg())?(y[1]=e[b].toJ().mixedAdd(e[v]),y[2]=e[b].add(e[v].neg())):(y[1]=e[b].toJ().mixedAdd(e[v]),y[2]=e[b].toJ().mixedAdd(e[v].neg()));var m=[-3,-1,-5,-7,0,7,5,1,3],g=a(r[b],r[v]);for(l=Math.max(g[0].length,l),h[b]=new Array(l),h[v]=new Array(l),c=0;c<l;c++){var w=0|g[0][c],_=0|g[1][c];h[b][c]=m[3*(w+1)+(_+1)],h[v][c]=0,d[b]=y}}else h[b]=o(r[b],u[b],this._bitLength),h[v]=o(r[v],u[v],this._bitLength),l=Math.max(h[b].length,l),l=Math.max(h[v].length,l)}var A=this.jpoint(null,null,null),M=this._wnafT4;for(s=l;s>=0;s--){for(var S=0;s>=0;){var x=!0;for(c=0;c<n;c++)M[c]=0|h[c][s],0!==M[c]&&(x=!1);if(!x)break;S++,s--}if(s>=0&&S++,A=A.dblp(S),s<0)break;for(c=0;c<n;c++){var k=M[c];0!==k&&(k>0?f=d[c][k-1>>1]:k<0&&(f=d[c][-k-1>>1].neg()),A="affine"===f.type?A.mixedAdd(f):A.add(f))}}for(s=0;s<n;s++)d[s]=null;return i?A:A.toP()},c.BasePoint=f,f.prototype.eq=function(){throw new Error("Not implemented")},f.prototype.validate=function(){return this.curve.validate(this)},c.prototype.decodePoint=function(t,e){t=i.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r)return 6===t[0]?s(t[t.length-1]%2==0):7===t[0]&&s(t[t.length-1]%2==1),this.point(t.slice(1,1+r),t.slice(1+r,1+2*r));if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},f.prototype.encodeCompressed=function(t){return this.encode(t,!0)},f.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},f.prototype.encode=function(t,e){return i.encode(this._encode(e),t)},f.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},f.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},f.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<e;i+=t){for(var o=0;o<t;o++)n=n.dbl();r.push(n)}return{step:t,points:r}},f.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)e[i]=e[i-1].add(n);return{wnd:t,points:e}},f.prototype._getBeta=function(){return null},f.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e}},1298:(t,e,r)=>{"use strict";var n=r(7011),i=r(9404),o=r(6698),a=r(6677),s=n.assert;function c(t){this.twisted=1!=(0|t.a),this.mOneA=this.twisted&&-1==(0|t.a),this.extended=this.mOneA,a.call(this,"edwards",t),this.a=new i(t.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new i(t.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new i(t.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|t.c)}function f(t,e,r,n,o){a.BasePoint.call(this,t,"projective"),null===e&&null===r&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new i(e,16),this.y=new i(r,16),this.z=n?new i(n,16):this.curve.one,this.t=o&&new i(o,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}o(c,a),t.exports=c,c.prototype._mulA=function(t){return this.mOneA?t.redNeg():this.a.redMul(t)},c.prototype._mulC=function(t){return this.oneC?t:this.c.redMul(t)},c.prototype.jpoint=function(t,e,r,n){return this.point(t,e,r,n)},c.prototype.pointFromX=function(t,e){(t=new i(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr(),n=this.c2.redSub(this.a.redMul(r)),o=this.one.redSub(this.c2.redMul(this.d).redMul(r)),a=n.redMul(o.redInvm()),s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");var c=s.fromRed().isOdd();return(e&&!c||!e&&c)&&(s=s.redNeg()),this.point(t,s)},c.prototype.pointFromY=function(t,e){(t=new i(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr(),n=r.redSub(this.c2),o=r.redMul(this.d).redMul(this.c2).redSub(this.a),a=n.redMul(o.redInvm());if(0===a.cmp(this.zero)){if(e)throw new Error("invalid point");return this.point(this.zero,t)}var s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==e&&(s=s.redNeg()),this.point(s,t)},c.prototype.validate=function(t){if(t.isInfinity())return!0;t.normalize();var e=t.x.redSqr(),r=t.y.redSqr(),n=e.redMul(this.a).redAdd(r),i=this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(r)));return 0===n.cmp(i)},o(f,a.BasePoint),c.prototype.pointFromJSON=function(t){return f.fromJSON(this,t)},c.prototype.point=function(t,e,r,n){return new f(this,t,e,r,n)},f.fromJSON=function(t,e){return new f(t,e[0],e[1],e[2])},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},f.prototype._extDbl=function(){var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var n=this.curve._mulA(t),i=this.x.redAdd(this.y).redSqr().redISub(t).redISub(e),o=n.redAdd(e),a=o.redSub(r),s=n.redSub(e),c=i.redMul(a),f=o.redMul(s),u=i.redMul(s),d=a.redMul(o);return this.curve.point(c,f,d,u)},f.prototype._projDbl=function(){var t,e,r,n,i,o,a=this.x.redAdd(this.y).redSqr(),s=this.x.redSqr(),c=this.y.redSqr();if(this.curve.twisted){var f=(n=this.curve._mulA(s)).redAdd(c);this.zOne?(t=a.redSub(s).redSub(c).redMul(f.redSub(this.curve.two)),e=f.redMul(n.redSub(c)),r=f.redSqr().redSub(f).redSub(f)):(i=this.z.redSqr(),o=f.redSub(i).redISub(i),t=a.redSub(s).redISub(c).redMul(o),e=f.redMul(n.redSub(c)),r=f.redMul(o))}else n=s.redAdd(c),i=this.curve._mulC(this.z).redSqr(),o=n.redSub(i).redSub(i),t=this.curve._mulC(a.redISub(n)).redMul(o),e=this.curve._mulC(n).redMul(s.redISub(c)),r=n.redMul(o);return this.curve.point(t,e,r)},f.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},f.prototype._extAdd=function(t){var e=this.y.redSub(this.x).redMul(t.y.redSub(t.x)),r=this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)),n=this.t.redMul(this.curve.dd).redMul(t.t),i=this.z.redMul(t.z.redAdd(t.z)),o=r.redSub(e),a=i.redSub(n),s=i.redAdd(n),c=r.redAdd(e),f=o.redMul(a),u=s.redMul(c),d=o.redMul(c),h=a.redMul(s);return this.curve.point(f,u,h,d)},f.prototype._projAdd=function(t){var e,r,n=this.z.redMul(t.z),i=n.redSqr(),o=this.x.redMul(t.x),a=this.y.redMul(t.y),s=this.curve.d.redMul(o).redMul(a),c=i.redSub(s),f=i.redAdd(s),u=this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(o).redISub(a),d=n.redMul(c).redMul(u);return this.curve.twisted?(e=n.redMul(f).redMul(a.redSub(this.curve._mulA(o))),r=c.redMul(f)):(e=n.redMul(f).redMul(a.redSub(o)),r=this.curve._mulC(c).redMul(f)),this.curve.point(d,e,r)},f.prototype.add=function(t){return this.isInfinity()?t:t.isInfinity()?this:this.curve.extended?this._extAdd(t):this._projAdd(t)},f.prototype.mul=function(t){return this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve._wnafMul(this,t)},f.prototype.mulAdd=function(t,e,r){return this.curve._wnafMulAdd(1,[this,e],[t,r],2,!1)},f.prototype.jmulAdd=function(t,e,r){return this.curve._wnafMulAdd(1,[this,e],[t,r],2,!0)},f.prototype.normalize=function(){if(this.zOne)return this;var t=this.z.redInvm();return this.x=this.x.redMul(t),this.y=this.y.redMul(t),this.t&&(this.t=this.t.redMul(t)),this.z=this.curve.one,this.zOne=!0,this},f.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},f.prototype.getX=function(){return this.normalize(),this.x.fromRed()},f.prototype.getY=function(){return this.normalize(),this.y.fromRed()},f.prototype.eq=function(t){return this===t||0===this.getX().cmp(t.getX())&&0===this.getY().cmp(t.getY())},f.prototype.eqXToP=function(t){var e=t.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(e))return!0;for(var r=t.clone(),n=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(e.redIAdd(n),0===this.x.cmp(e))return!0}},f.prototype.toP=f.prototype.normalize,f.prototype.mixedAdd=f.prototype.add},894:(t,e,r)=>{"use strict";var n=e;n.base=r(6677),n.short=r(9188),n.mont=r(370),n.edwards=r(1298)},370:(t,e,r)=>{"use strict";var n=r(9404),i=r(6698),o=r(6677),a=r(7011);function s(t){o.call(this,"mont",t),this.a=new n(t.a,16).toRed(this.red),this.b=new n(t.b,16).toRed(this.red),this.i4=new n(4).toRed(this.red).redInvm(),this.two=new n(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function c(t,e,r){o.BasePoint.call(this,t,"projective"),null===e&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new n(e,16),this.z=new n(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}i(s,o),t.exports=s,s.prototype.validate=function(t){var e=t.normalize().x,r=e.redSqr(),n=r.redMul(e).redAdd(r.redMul(this.a)).redAdd(e);return 0===n.redSqrt().redSqr().cmp(n)},i(c,o.BasePoint),s.prototype.decodePoint=function(t,e){return this.point(a.toArray(t,e),1)},s.prototype.point=function(t,e){return new c(this,t,e)},s.prototype.pointFromJSON=function(t){return c.fromJSON(this,t)},c.prototype.precompute=function(){},c.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},c.fromJSON=function(t,e){return new c(t,e[0],e[1]||t.one)},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},c.prototype.dbl=function(){var t=this.x.redAdd(this.z).redSqr(),e=this.x.redSub(this.z).redSqr(),r=t.redSub(e),n=t.redMul(e),i=r.redMul(e.redAdd(this.curve.a24.redMul(r)));return this.curve.point(n,i)},c.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.diffAdd=function(t,e){var r=this.x.redAdd(this.z),n=this.x.redSub(this.z),i=t.x.redAdd(t.z),o=t.x.redSub(t.z).redMul(r),a=i.redMul(n),s=e.z.redMul(o.redAdd(a).redSqr()),c=e.x.redMul(o.redISub(a).redSqr());return this.curve.point(s,c)},c.prototype.mul=function(t){for(var e=t.clone(),r=this,n=this.curve.point(null,null),i=[];0!==e.cmpn(0);e.iushrn(1))i.push(e.andln(1));for(var o=i.length-1;o>=0;o--)0===i[o]?(r=r.diffAdd(n,this),n=n.dbl()):(n=r.diffAdd(n,this),r=r.dbl());return n},c.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.eq=function(t){return 0===this.getX().cmp(t.getX())},c.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},9188:(t,e,r)=>{"use strict";var n=r(7011),i=r(9404),o=r(6698),a=r(6677),s=n.assert;function c(t){a.call(this,"short",t),this.a=new i(t.a,16).toRed(this.red),this.b=new i(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function f(t,e,r,n){a.BasePoint.call(this,t,"affine"),null===e&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new i(e,16),this.y=new i(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function u(t,e,r,n){a.BasePoint.call(this,t,"jacobian"),null===e&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new i(0)):(this.x=new i(e,16),this.y=new i(r,16),this.z=new i(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}o(c,a),t.exports=c,c.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,r;if(t.beta)e=new i(t.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);e=(e=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(t.lambda)r=new i(t.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(e))?r=o[0]:(r=o[1],s(0===this.g.mul(r).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:r,basis:t.basis?t.basis.map((function(t){return{a:new i(t.a,16),b:new i(t.b,16)}})):this._getEndoBasis(r)}}},c.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:i.mont(t),r=new i(2).toRed(e).redInvm(),n=r.redNeg(),o=new i(3).toRed(e).redNeg().redSqrt().redMul(r);return[n.redAdd(o).fromRed(),n.redSub(o).fromRed()]},c.prototype._getEndoBasis=function(t){for(var e,r,n,o,a,s,c,f,u,d=this.n.ushrn(Math.floor(this.n.bitLength()/2)),h=t,l=this.n.clone(),p=new i(1),b=new i(0),v=new i(0),y=new i(1),m=0;0!==h.cmpn(0);){var g=l.div(h);f=l.sub(g.mul(h)),u=v.sub(g.mul(p));var w=y.sub(g.mul(b));if(!n&&f.cmp(d)<0)e=c.neg(),r=p,n=f.neg(),o=u;else if(n&&2==++m)break;c=f,l=h,h=f,v=p,p=u,y=b,b=w}a=f.neg(),s=u;var _=n.sqr().add(o.sqr());return a.sqr().add(s.sqr()).cmp(_)>=0&&(a=e,s=r),n.negative&&(n=n.neg(),o=o.neg()),a.negative&&(a=a.neg(),s=s.neg()),[{a:n,b:o},{a,b:s}]},c.prototype._endoSplit=function(t){var e=this.endo.basis,r=e[0],n=e[1],i=n.b.mul(t).divRound(this.n),o=r.b.neg().mul(t).divRound(this.n),a=i.mul(r.a),s=o.mul(n.a),c=i.mul(r.b),f=o.mul(n.b);return{k1:t.sub(a).sub(s),k2:c.add(f).neg()}},c.prototype.pointFromX=function(t,e){(t=new i(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var o=n.fromRed().isOdd();return(e&&!o||!e&&o)&&(n=n.redNeg()),this.point(t,n)},c.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,r=t.y,n=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},c.prototype._endoWnafMulAdd=function(t,e,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<t.length;o++){var a=this._endoSplit(e[o]),s=t[o],c=s._getBeta();a.k1.negative&&(a.k1.ineg(),s=s.neg(!0)),a.k2.negative&&(a.k2.ineg(),c=c.neg(!0)),n[2*o]=s,n[2*o+1]=c,i[2*o]=a.k1,i[2*o+1]=a.k2}for(var f=this._wnafMulAdd(1,n,i,2*o,r),u=0;u<2*o;u++)n[u]=null,i[u]=null;return f},o(f,a.BasePoint),c.prototype.point=function(t,e,r){return new f(this,t,e,r)},c.prototype.pointFromJSON=function(t,e){return f.fromJSON(this,t,e)},f.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var r=this.curve,n=function(t){return r.point(t.x.redMul(r.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(n)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(n)}}}return e}},f.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},f.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var n=t.point(e[0],e[1],r);if(!e[2])return n;function i(e){return t.point(e[0],e[1],r)}var o=e[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return this.inf},f.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var r=e.redSqr().redISub(this.x).redISub(t.x),n=e.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},f.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,r=this.x.redSqr(),n=t.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),a=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,a)},f.prototype.getX=function(){return this.x.fromRed()},f.prototype.getY=function(){return this.y.fromRed()},f.prototype.mul=function(t){return t=new i(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},f.prototype.mulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},f.prototype.jmulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},f.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},f.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var r=this.precomputed,n=function(t){return t.neg()};e.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return e},f.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(u,a.BasePoint),c.prototype.jpoint=function(t,e,r){return new u(this,t,e,r)},u.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),r=this.x.redMul(e),n=this.y.redMul(e).redMul(t);return this.curve.point(r,n)},u.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},u.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(e),i=t.x.redMul(r),o=this.y.redMul(e.redMul(t.z)),a=t.y.redMul(r.redMul(this.z)),s=n.redSub(i),c=o.redSub(a);if(0===s.cmpn(0))return 0!==c.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var f=s.redSqr(),u=f.redMul(s),d=n.redMul(f),h=c.redSqr().redIAdd(u).redISub(d).redISub(d),l=c.redMul(d.redISub(h)).redISub(o.redMul(u)),p=this.z.redMul(t.z).redMul(s);return this.curve.jpoint(h,l,p)},u.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),r=this.x,n=t.x.redMul(e),i=this.y,o=t.y.redMul(e).redMul(this.z),a=r.redSub(n),s=i.redSub(o);if(0===a.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=a.redSqr(),f=c.redMul(a),u=r.redMul(c),d=s.redSqr().redIAdd(f).redISub(u).redISub(u),h=s.redMul(u.redISub(d)).redISub(i.redMul(f)),l=this.z.redMul(a);return this.curve.jpoint(d,h,l)},u.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var r=this;for(e=0;e<t;e++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,a=this.y,s=this.z,c=s.redSqr().redSqr(),f=a.redAdd(a);for(e=0;e<t;e++){var u=o.redSqr(),d=f.redSqr(),h=d.redSqr(),l=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)),p=o.redMul(d),b=l.redSqr().redISub(p.redAdd(p)),v=p.redISub(b),y=l.redMul(v);y=y.redIAdd(y).redISub(h);var m=f.redMul(s);e+1<t&&(c=c.redMul(h)),o=b,s=m,f=y}return this.curve.jpoint(o,f.redMul(i),s)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},u.prototype._zeroDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n),c=s.redSqr().redISub(a).redISub(a),f=o.redIAdd(o);f=(f=f.redIAdd(f)).redIAdd(f),t=c,e=s.redMul(a.redISub(c)).redISub(f),r=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),d=this.y.redSqr(),h=d.redSqr(),l=this.x.redAdd(d).redSqr().redISub(u).redISub(h);l=l.redIAdd(l);var p=u.redAdd(u).redIAdd(u),b=p.redSqr(),v=h.redIAdd(h);v=(v=v.redIAdd(v)).redIAdd(v),t=b.redISub(l).redISub(l),e=p.redMul(l.redISub(t)).redISub(v),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(t,e,r)},u.prototype._threeDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),c=s.redSqr().redISub(a).redISub(a);t=c;var f=o.redIAdd(o);f=(f=f.redIAdd(f)).redIAdd(f),e=s.redMul(a.redISub(c)).redISub(f),r=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),d=this.y.redSqr(),h=this.x.redMul(d),l=this.x.redSub(u).redMul(this.x.redAdd(u));l=l.redAdd(l).redIAdd(l);var p=h.redIAdd(h),b=(p=p.redIAdd(p)).redAdd(p);t=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(d).redISub(u);var v=d.redSqr();v=(v=(v=v.redIAdd(v)).redIAdd(v)).redIAdd(v),e=l.redMul(p.redISub(t)).redISub(v)}return this.curve.jpoint(t,e,r)},u.prototype._dbl=function(){var t=this.curve.a,e=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=e.redSqr(),a=r.redSqr(),s=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)),c=e.redAdd(e),f=(c=c.redIAdd(c)).redMul(a),u=s.redSqr().redISub(f.redAdd(f)),d=f.redISub(u),h=a.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=s.redMul(d).redISub(h),p=r.redAdd(r).redMul(n);return this.curve.jpoint(u,l,p)},u.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr(),n=e.redSqr(),i=t.redAdd(t).redIAdd(t),o=i.redSqr(),a=this.x.redAdd(e).redSqr().redISub(t).redISub(n),s=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),c=n.redIAdd(n);c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var f=i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(c),u=e.redMul(f);u=(u=u.redIAdd(u)).redIAdd(u);var d=this.x.redMul(s).redISub(u);d=(d=d.redIAdd(d)).redIAdd(d);var h=this.y.redMul(f.redMul(c.redISub(f)).redISub(a.redMul(s)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=this.z.redAdd(a).redSqr().redISub(r).redISub(s);return this.curve.jpoint(d,h,l)},u.prototype.mul=function(t,e){return t=new i(t,e),this.curve._wnafMul(this,t)},u.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),r=t.z.redSqr();if(0!==this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0))return!1;var n=e.redMul(this.z),i=r.redMul(t.z);return 0===this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0)},u.prototype.eqXToP=function(t){var e=this.z.redSqr(),r=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(r))return!0;for(var n=t.clone(),i=this.curve.redN.redMul(e);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},u.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},480:(t,e,r)=>{"use strict";var n,i=e,o=r(7952),a=r(894),s=r(7011).assert;function c(t){"short"===t.type?this.curve=new a.short(t):"edwards"===t.type?this.curve=new a.edwards(t):this.curve=new a.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function f(t,e){Object.defineProperty(i,t,{configurable:!0,enumerable:!0,get:function(){var r=new c(e);return Object.defineProperty(i,t,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=c,f("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),f("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),f("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),f("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),f("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),f("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),f("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=r(4011)}catch(t){n=void 0}f("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},7447:(t,e,r)=>{"use strict";var n=r(9404),i=r(2723),o=r(7011),a=r(480),s=r(5037),c=o.assert,f=r(1200),u=r(8545);function d(t){if(!(this instanceof d))return new d(t);"string"==typeof t&&(c(Object.prototype.hasOwnProperty.call(a,t),"Unknown curve "+t),t=a[t]),t instanceof a.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}t.exports=d,d.prototype.keyPair=function(t){return new f(this,t)},d.prototype.keyFromPrivate=function(t,e){return f.fromPrivate(this,t,e)},d.prototype.keyFromPublic=function(t,e){return f.fromPublic(this,t,e)},d.prototype.genKeyPair=function(t){t||(t={});for(var e=new i({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||s(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),o=this.n.sub(new n(2));;){var a=new n(e.generate(r));if(!(a.cmp(o)>0))return a.iaddn(1),this.keyFromPrivate(a)}},d.prototype._truncateToN=function(t,e){var r=8*t.byteLength()-this.n.bitLength();return r>0&&(t=t.ushrn(r)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},d.prototype.sign=function(t,e,r,o){"object"==typeof r&&(o=r,r=null),o||(o={}),e=this.keyFromPrivate(e,r),t=this._truncateToN(new n(t,16));for(var a=this.n.byteLength(),s=e.getPrivate().toArray("be",a),c=t.toArray("be",a),f=new i({hash:this.hash,entropy:s,nonce:c,pers:o.pers,persEnc:o.persEnc||"utf8"}),d=this.n.sub(new n(1)),h=0;;h++){var l=o.k?o.k(h):new n(f.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(d)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),v=b.umod(this.n);if(0!==v.cmpn(0)){var y=l.invm(this.n).mul(v.mul(e.getPrivate()).iadd(t));if(0!==(y=y.umod(this.n)).cmpn(0)){var m=(p.getY().isOdd()?1:0)|(0!==b.cmp(v)?2:0);return o.canonical&&y.cmp(this.nh)>0&&(y=this.n.sub(y),m^=1),new u({r:v,s:y,recoveryParam:m})}}}}}},d.prototype.verify=function(t,e,r,i){t=this._truncateToN(new n(t,16)),r=this.keyFromPublic(r,i);var o=(e=new u(e,"hex")).r,a=e.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var s,c=a.invm(this.n),f=c.mul(t).umod(this.n),d=c.mul(o).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(f,r.getPublic(),d)).isInfinity()&&s.eqXToP(o):!(s=this.g.mulAdd(f,r.getPublic(),d)).isInfinity()&&0===s.getX().umod(this.n).cmp(o)},d.prototype.recoverPubKey=function(t,e,r,i){c((3&r)===r,"The recovery param is more than two bits"),e=new u(e,i);var o=this.n,a=new n(t),s=e.r,f=e.s,d=1&r,h=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");s=h?this.curve.pointFromX(s.add(this.curve.n),d):this.curve.pointFromX(s,d);var l=e.r.invm(o),p=o.sub(a).mul(l).umod(o),b=f.mul(l).umod(o);return this.g.mulAdd(p,s,b)},d.prototype.getKeyRecoveryParam=function(t,e,r,n){if(null!==(e=new u(e,n)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(t,e,i)}catch(t){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")}},1200:(t,e,r)=>{"use strict";var n=r(9404),i=r(7011).assert;function o(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}t.exports=o,o.fromPublic=function(t,e,r){return e instanceof o?e:new o(t,{pub:e,pubEnc:r})},o.fromPrivate=function(t,e,r){return e instanceof o?e:new o(t,{priv:e,privEnc:r})},o.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},o.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(t,e){this.priv=new n(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?i(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},o.prototype.derive=function(t){return t.validate()||i(t.validate(),"public point not validated"),t.mul(this.priv).getX()},o.prototype.sign=function(t,e,r){return this.ec.sign(t,this,e,r)},o.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},8545:(t,e,r)=>{"use strict";var n=r(9404),i=r(7011),o=i.assert;function a(t,e){if(t instanceof a)return t;this._importDER(t,e)||(o(t.r&&t.s,"Signature without r or s"),this.r=new n(t.r,16),this.s=new n(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}function s(){this.place=0}function c(t,e){var r=t[e.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,a=e.place;o<n;o++,a++)i<<=8,i|=t[a],i>>>=0;return!(i<=127)&&(e.place=a,i)}function f(t){for(var e=0,r=t.length-1;!t[e]&&!(128&t[e+1])&&e<r;)e++;return 0===e?t:t.slice(e)}function u(t,e){if(e<128)t.push(e);else{var r=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|r);--r;)t.push(e>>>(r<<3)&255);t.push(e)}}t.exports=a,a.prototype._importDER=function(t,e){t=i.toArray(t,e);var r=new s;if(48!==t[r.place++])return!1;var o=c(t,r);if(!1===o)return!1;if(o+r.place!==t.length)return!1;if(2!==t[r.place++])return!1;var a=c(t,r);if(!1===a)return!1;var f=t.slice(r.place,a+r.place);if(r.place+=a,2!==t[r.place++])return!1;var u=c(t,r);if(!1===u)return!1;if(t.length!==u+r.place)return!1;var d=t.slice(r.place,u+r.place);if(0===f[0]){if(!(128&f[1]))return!1;f=f.slice(1)}if(0===d[0]){if(!(128&d[1]))return!1;d=d.slice(1)}return this.r=new n(f),this.s=new n(d),this.recoveryParam=null,!0},a.prototype.toDER=function(t){var e=this.r.toArray(),r=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r)),e=f(e),r=f(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];u(n,e.length),(n=n.concat(e)).push(2),u(n,r.length);var o=n.concat(r),a=[48];return u(a,o.length),a=a.concat(o),i.encode(a,t)}},8650:(t,e,r)=>{"use strict";var n=r(7952),i=r(480),o=r(7011),a=o.assert,s=o.parseBytes,c=r(6661),f=r(220);function u(t){if(a("ed25519"===t,"only tested with ed25519 so far"),!(this instanceof u))return new u(t);t=i[t].curve,this.curve=t,this.g=t.g,this.g.precompute(t.n.bitLength()+1),this.pointClass=t.point().constructor,this.encodingLength=Math.ceil(t.n.bitLength()/8),this.hash=n.sha512}t.exports=u,u.prototype.sign=function(t,e){t=s(t);var r=this.keyFromSecret(e),n=this.hashInt(r.messagePrefix(),t),i=this.g.mul(n),o=this.encodePoint(i),a=this.hashInt(o,r.pubBytes(),t).mul(r.priv()),c=n.add(a).umod(this.curve.n);return this.makeSignature({R:i,S:c,Rencoded:o})},u.prototype.verify=function(t,e,r){t=s(t),e=this.makeSignature(e);var n=this.keyFromPublic(r),i=this.hashInt(e.Rencoded(),n.pubBytes(),t),o=this.g.mul(e.S());return e.R().add(n.pub().mul(i)).eq(o)},u.prototype.hashInt=function(){for(var t=this.hash(),e=0;e<arguments.length;e++)t.update(arguments[e]);return o.intFromLE(t.digest()).umod(this.curve.n)},u.prototype.keyFromPublic=function(t){return c.fromPublic(this,t)},u.prototype.keyFromSecret=function(t){return c.fromSecret(this,t)},u.prototype.makeSignature=function(t){return t instanceof f?t:new f(this,t)},u.prototype.encodePoint=function(t){var e=t.getY().toArray("le",this.encodingLength);return e[this.encodingLength-1]|=t.getX().isOdd()?128:0,e},u.prototype.decodePoint=function(t){var e=(t=o.parseBytes(t)).length-1,r=t.slice(0,e).concat(-129&t[e]),n=!!(128&t[e]),i=o.intFromLE(r);return this.curve.pointFromY(i,n)},u.prototype.encodeInt=function(t){return t.toArray("le",this.encodingLength)},u.prototype.decodeInt=function(t){return o.intFromLE(t)},u.prototype.isPoint=function(t){return t instanceof this.pointClass}},6661:(t,e,r)=>{"use strict";var n=r(7011),i=n.assert,o=n.parseBytes,a=n.cachedProperty;function s(t,e){this.eddsa=t,this._secret=o(e.secret),t.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=o(e.pub)}s.fromPublic=function(t,e){return e instanceof s?e:new s(t,{pub:e})},s.fromSecret=function(t,e){return e instanceof s?e:new s(t,{secret:e})},s.prototype.secret=function(){return this._secret},a(s,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),a(s,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),a(s,"privBytes",(function(){var t=this.eddsa,e=this.hash(),r=t.encodingLength-1,n=e.slice(0,t.encodingLength);return n[0]&=248,n[r]&=127,n[r]|=64,n})),a(s,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),a(s,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),a(s,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),s.prototype.sign=function(t){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(t,this)},s.prototype.verify=function(t,e){return this.eddsa.verify(t,e,this)},s.prototype.getSecret=function(t){return i(this._secret,"KeyPair is public only"),n.encode(this.secret(),t)},s.prototype.getPublic=function(t){return n.encode(this.pubBytes(),t)},t.exports=s},220:(t,e,r)=>{"use strict";var n=r(9404),i=r(7011),o=i.assert,a=i.cachedProperty,s=i.parseBytes;function c(t,e){this.eddsa=t,"object"!=typeof e&&(e=s(e)),Array.isArray(e)&&(e={R:e.slice(0,t.encodingLength),S:e.slice(t.encodingLength)}),o(e.R&&e.S,"Signature without R or S"),t.isPoint(e.R)&&(this._R=e.R),e.S instanceof n&&(this._S=e.S),this._Rencoded=Array.isArray(e.R)?e.R:e.Rencoded,this._Sencoded=Array.isArray(e.S)?e.S:e.Sencoded}a(c,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),a(c,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),a(c,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),a(c,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),c.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},c.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},t.exports=c},4011:t=>{t.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},7011:(t,e,r)=>{"use strict";var n=e,i=r(9404),o=r(3349),a=r(4367);n.assert=o,n.toArray=a.toArray,n.zero2=a.zero2,n.toHex=a.toHex,n.encode=a.encode,n.getNAF=function(t,e,r){var n,i=new Array(Math.max(t.bitLength(),r)+1);for(n=0;n<i.length;n+=1)i[n]=0;var o=1<<e+1,a=t.clone();for(n=0;n<i.length;n++){var s,c=a.andln(o-1);a.isOdd()?(s=c>(o>>1)-1?(o>>1)-c:c,a.isubn(s)):s=0,i[n]=s,a.iushrn(1)}return i},n.getJSF=function(t,e){var r=[[],[]];t=t.clone(),e=e.clone();for(var n,i=0,o=0;t.cmpn(-i)>0||e.cmpn(-o)>0;){var a,s,c=t.andln(3)+i&3,f=e.andln(3)+o&3;3===c&&(c=-1),3===f&&(f=-1),a=1&c?3!=(n=t.andln(7)+i&7)&&5!==n||2!==f?c:-c:0,r[0].push(a),s=1&f?3!=(n=e.andln(7)+o&7)&&5!==n||2!==c?f:-f:0,r[1].push(s),2*i===a+1&&(i=1-i),2*o===s+1&&(o=1-o),t.iushrn(1),e.iushrn(1)}return r},n.cachedProperty=function(t,e,r){var n="_"+e;t.prototype[e]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(t){return"string"==typeof t?n.toArray(t,"hex"):t},n.intFromLE=function(t){return new i(t,"hex","le")}},3605:(t,e)=>{"use strict";function r(t,e,n){return function(){var i=n.concat(Array.prototype.slice.call(arguments));return i.length>=e?t.apply(this,i):r(t,e,i)}}e.cF=function(t){return r(t,t.length,[])}},7952:(t,e,r)=>{var n=e;n.utils=r(7426),n.common=r(6166),n.sha=r(6229),n.ripemd=r(6784),n.hmac=r(8948),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},6166:(t,e,r)=>{"use strict";var n=r(7426),i=r(3349);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}e.BlockHash=o,o.prototype.update=function(t,e){if(t=n.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var r=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-r,t.length),0===this.pending.length&&(this.pending=null),t=n.join32(t,0,t.length-r,this.endian);for(var i=0;i<t.length;i+=this._delta32)this._update(t,i,i+this._delta32)}return this},o.prototype.digest=function(t){return this.update(this._pad()),i(null===this.pending),this._digest(t)},o.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,r=e-(t+this.padLength)%e,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(t<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=t>>>24&255,n[i++]=t>>>16&255,n[i++]=t>>>8&255,n[i++]=255&t}else for(n[i++]=255&t,n[i++]=t>>>8&255,n[i++]=t>>>16&255,n[i++]=t>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},8948:(t,e,r)=>{"use strict";var n=r(7426),i=r(3349);function o(t,e,r){if(!(this instanceof o))return new o(t,e,r);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(e,r))}t.exports=o,o.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),i(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},o.prototype.update=function(t,e){return this.inner.update(t,e),this},o.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},6784:(t,e,r)=>{"use strict";var n=r(7426),i=r(6166),o=n.rotl32,a=n.sum32,s=n.sum32_3,c=n.sum32_4,f=i.BlockHash;function u(){if(!(this instanceof u))return new u;f.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function d(t,e,r,n){return t<=15?e^r^n:t<=31?e&r|~e&n:t<=47?(e|~r)^n:t<=63?e&n|r&~n:e^(r|~n)}function h(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function l(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}n.inherits(u,f),e.ripemd160=u,u.blockSize=512,u.outSize=160,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(t,e){for(var r=this.h[0],n=this.h[1],i=this.h[2],f=this.h[3],u=this.h[4],m=r,g=n,w=i,_=f,A=u,M=0;M<80;M++){var S=a(o(c(r,d(M,n,i,f),t[p[M]+e],h(M)),v[M]),u);r=u,u=f,f=o(i,10),i=n,n=S,S=a(o(c(m,d(79-M,g,w,_),t[b[M]+e],l(M)),y[M]),A),m=A,A=_,_=o(w,10),w=g,g=S}S=s(this.h[1],i,_),this.h[1]=s(this.h[2],f,A),this.h[2]=s(this.h[3],u,m),this.h[3]=s(this.h[4],r,g),this.h[4]=s(this.h[0],n,w),this.h[0]=S},u.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],v=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],y=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},6229:(t,e,r)=>{"use strict";e.sha1=r(3917),e.sha224=r(7714),e.sha256=r(2287),e.sha384=r(1911),e.sha512=r(7766)},3917:(t,e,r)=>{"use strict";var n=r(7426),i=r(6166),o=r(6225),a=n.rotl32,s=n.sum32,c=n.sum32_5,f=o.ft_1,u=i.BlockHash,d=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(h,u),t.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=a(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],u=this.h[2],h=this.h[3],l=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),b=c(a(i,5),f(p,o,u,h),l,r[n],d[p]);l=h,h=u,u=a(o,30),o=i,i=b}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],u),this.h[3]=s(this.h[3],h),this.h[4]=s(this.h[4],l)},h.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},7714:(t,e,r)=>{"use strict";var n=r(7426),i=r(2287);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),t.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},2287:(t,e,r)=>{"use strict";var n=r(7426),i=r(6166),o=r(6225),a=r(3349),s=n.sum32,c=n.sum32_4,f=n.sum32_5,u=o.ch32,d=o.maj32,h=o.s0_256,l=o.s1_256,p=o.g0_256,b=o.g1_256,v=i.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function m(){if(!(this instanceof m))return new m;v.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}n.inherits(m,v),t.exports=m,m.blockSize=512,m.outSize=256,m.hmacStrength=192,m.padLength=64,m.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=c(b(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],v=this.h[2],y=this.h[3],m=this.h[4],g=this.h[5],w=this.h[6],_=this.h[7];for(a(this.k.length===r.length),n=0;n<r.length;n++){var A=f(_,l(m),u(m,g,w),this.k[n],r[n]),M=s(h(i),d(i,o,v));_=w,w=g,g=m,m=s(y,A),y=v,v=o,o=i,i=s(A,M)}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],v),this.h[3]=s(this.h[3],y),this.h[4]=s(this.h[4],m),this.h[5]=s(this.h[5],g),this.h[6]=s(this.h[6],w),this.h[7]=s(this.h[7],_)},m.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},1911:(t,e,r)=>{"use strict";var n=r(7426),i=r(7766);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),t.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},7766:(t,e,r)=>{"use strict";var n=r(7426),i=r(6166),o=r(3349),a=n.rotr64_hi,s=n.rotr64_lo,c=n.shr64_hi,f=n.shr64_lo,u=n.sum64,d=n.sum64_hi,h=n.sum64_lo,l=n.sum64_4_hi,p=n.sum64_4_lo,b=n.sum64_5_hi,v=n.sum64_5_lo,y=i.BlockHash,m=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=m,this.W=new Array(160)}function w(t,e,r,n,i){var o=t&r^~t&i;return o<0&&(o+=4294967296),o}function _(t,e,r,n,i,o){var a=e&n^~e&o;return a<0&&(a+=4294967296),a}function A(t,e,r,n,i){var o=t&r^t&i^r&i;return o<0&&(o+=4294967296),o}function M(t,e,r,n,i,o){var a=e&n^e&o^n&o;return a<0&&(a+=4294967296),a}function S(t,e){var r=a(t,e,28)^a(e,t,2)^a(e,t,7);return r<0&&(r+=4294967296),r}function x(t,e){var r=s(t,e,28)^s(e,t,2)^s(e,t,7);return r<0&&(r+=4294967296),r}function k(t,e){var r=s(t,e,14)^s(t,e,18)^s(e,t,9);return r<0&&(r+=4294967296),r}function E(t,e){var r=a(t,e,1)^a(t,e,8)^c(t,e,7);return r<0&&(r+=4294967296),r}function O(t,e){var r=s(t,e,1)^s(t,e,8)^f(t,e,7);return r<0&&(r+=4294967296),r}function R(t,e){var r=s(t,e,19)^s(e,t,29)^f(t,e,6);return r<0&&(r+=4294967296),r}n.inherits(g,y),t.exports=g,g.blockSize=1024,g.outSize=512,g.hmacStrength=192,g.padLength=128,g.prototype._prepareBlock=function(t,e){for(var r=this.W,n=0;n<32;n++)r[n]=t[e+n];for(;n<r.length;n+=2){var i=(v=r[n-4],y=r[n-3],m=void 0,(m=a(v,y,19)^a(y,v,29)^c(v,y,6))<0&&(m+=4294967296),m),o=R(r[n-4],r[n-3]),s=r[n-14],f=r[n-13],u=E(r[n-30],r[n-29]),d=O(r[n-30],r[n-29]),h=r[n-32],b=r[n-31];r[n]=l(i,o,s,f,u,d,h,b),r[n+1]=p(i,o,s,f,u,d,h,b)}var v,y,m},g.prototype._update=function(t,e){this._prepareBlock(t,e);var r,n,i,s=this.W,c=this.h[0],f=this.h[1],l=this.h[2],p=this.h[3],y=this.h[4],m=this.h[5],g=this.h[6],E=this.h[7],O=this.h[8],R=this.h[9],P=this.h[10],C=this.h[11],B=this.h[12],I=this.h[13],z=this.h[14],T=this.h[15];o(this.k.length===s.length);for(var N=0;N<s.length;N+=2){var j=z,L=T,q=(i=void 0,(i=a(r=O,n=R,14)^a(r,n,18)^a(n,r,9))<0&&(i+=4294967296),i),F=k(O,R),U=w(O,0,P,0,B),D=_(0,R,0,C,0,I),H=this.k[N],J=this.k[N+1],W=s[N],K=s[N+1],G=b(j,L,q,F,U,D,H,J,W,K),V=v(j,L,q,F,U,D,H,J,W,K);j=S(c,f),L=x(c,f),q=A(c,0,l,0,y),F=M(0,f,0,p,0,m);var X=d(j,L,q,F),Y=h(j,L,q,F);z=B,T=I,B=P,I=C,P=O,C=R,O=d(g,E,G,V),R=h(E,E,G,V),g=y,E=m,y=l,m=p,l=c,p=f,c=d(G,V,X,Y),f=h(G,V,X,Y)}u(this.h,0,c,f),u(this.h,2,l,p),u(this.h,4,y,m),u(this.h,6,g,E),u(this.h,8,O,R),u(this.h,10,P,C),u(this.h,12,B,I),u(this.h,14,z,T)},g.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},6225:(t,e,r)=>{"use strict";var n=r(7426).rotr32;function i(t,e,r){return t&e^~t&r}function o(t,e,r){return t&e^t&r^e&r}function a(t,e,r){return t^e^r}e.ft_1=function(t,e,r,n){return 0===t?i(e,r,n):1===t||3===t?a(e,r,n):2===t?o(e,r,n):void 0},e.ch32=i,e.maj32=o,e.p32=a,e.s0_256=function(t){return n(t,2)^n(t,13)^n(t,22)},e.s1_256=function(t){return n(t,6)^n(t,11)^n(t,25)},e.g0_256=function(t){return n(t,7)^n(t,18)^t>>>3},e.g1_256=function(t){return n(t,17)^n(t,19)^t>>>10}},7426:(t,e,r)=>{"use strict";var n=r(3349),i=r(6698);function o(t,e){return 55296==(64512&t.charCodeAt(e))&&!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1))}function a(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function s(t){return 1===t.length?"0"+t:t}function c(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}e.inherits=i,e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),i=0;i<t.length;i+=2)r.push(parseInt(t[i]+t[i+1],16))}else for(var n=0,i=0;i<t.length;i++){var a=t.charCodeAt(i);a<128?r[n++]=a:a<2048?(r[n++]=a>>6|192,r[n++]=63&a|128):o(t,i)?(a=65536+((1023&a)<<10)+(1023&t.charCodeAt(++i)),r[n++]=a>>18|240,r[n++]=a>>12&63|128,r[n++]=a>>6&63|128,r[n++]=63&a|128):(r[n++]=a>>12|224,r[n++]=a>>6&63|128,r[n++]=63&a|128)}else for(i=0;i<t.length;i++)r[i]=0|t[i];return r},e.toHex=function(t){for(var e="",r=0;r<t.length;r++)e+=s(t[r].toString(16));return e},e.htonl=a,e.toHex32=function(t,e){for(var r="",n=0;n<t.length;n++){var i=t[n];"little"===e&&(i=a(i)),r+=c(i.toString(16))}return r},e.zero2=s,e.zero8=c,e.join32=function(t,e,r,i){var o=r-e;n(o%4==0);for(var a=new Array(o/4),s=0,c=e;s<a.length;s++,c+=4){var f;f="big"===i?t[c]<<24|t[c+1]<<16|t[c+2]<<8|t[c+3]:t[c+3]<<24|t[c+2]<<16|t[c+1]<<8|t[c],a[s]=f>>>0}return a},e.split32=function(t,e){for(var r=new Array(4*t.length),n=0,i=0;n<t.length;n++,i+=4){var o=t[n];"big"===e?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},e.rotr32=function(t,e){return t>>>e|t<<32-e},e.rotl32=function(t,e){return t<<e|t>>>32-e},e.sum32=function(t,e){return t+e>>>0},e.sum32_3=function(t,e,r){return t+e+r>>>0},e.sum32_4=function(t,e,r,n){return t+e+r+n>>>0},e.sum32_5=function(t,e,r,n,i){return t+e+r+n+i>>>0},e.sum64=function(t,e,r,n){var i=t[e],o=n+t[e+1]>>>0,a=(o<n?1:0)+r+i;t[e]=a>>>0,t[e+1]=o},e.sum64_hi=function(t,e,r,n){return(e+n>>>0<e?1:0)+t+r>>>0},e.sum64_lo=function(t,e,r,n){return e+n>>>0},e.sum64_4_hi=function(t,e,r,n,i,o,a,s){var c=0,f=e;return c+=(f=f+n>>>0)<e?1:0,c+=(f=f+o>>>0)<o?1:0,t+r+i+a+(c+=(f=f+s>>>0)<s?1:0)>>>0},e.sum64_4_lo=function(t,e,r,n,i,o,a,s){return e+n+o+s>>>0},e.sum64_5_hi=function(t,e,r,n,i,o,a,s,c,f){var u=0,d=e;return u+=(d=d+n>>>0)<e?1:0,u+=(d=d+o>>>0)<o?1:0,u+=(d=d+s>>>0)<s?1:0,t+r+i+a+c+(u+=(d=d+f>>>0)<f?1:0)>>>0},e.sum64_5_lo=function(t,e,r,n,i,o,a,s,c,f){return e+n+o+s+f>>>0},e.rotr64_hi=function(t,e,r){return(e<<32-r|t>>>r)>>>0},e.rotr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0},e.shr64_hi=function(t,e,r){return t>>>r},e.shr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0}},2723:(t,e,r)=>{"use strict";var n=r(7952),i=r(4367),o=r(3349);function a(t){if(!(this instanceof a))return new a(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=i.toArray(t.entropy,t.entropyEnc||"hex"),r=i.toArray(t.nonce,t.nonceEnc||"hex"),n=i.toArray(t.pers,t.persEnc||"hex");o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,r,n)}t.exports=a,a.prototype._init=function(t,e,r){var n=t.concat(e).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},a.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},a.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},a.prototype.reseed=function(t,e,r,n){"string"!=typeof e&&(n=r,r=e,e=null),t=i.toArray(t,e),r=i.toArray(r,n),o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(r||[])),this._reseed=1},a.prototype.generate=function(t,e,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(n=r,r=e,e=null),r&&(r=i.toArray(r,n||"hex"),this._update(r));for(var o=[];o.length<t;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var a=o.slice(0,t);return this._update(r),this._reseed++,i.encode(a,e)}},6698:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},1176:(t,e,r)=>{var n;!function(){"use strict";var i="input is invalid type",o="object"==typeof window,a=o?window:{};a.JS_SHA3_NO_WINDOW&&(o=!1);var s=!o&&"object"==typeof self;!a.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?a=r.g:s&&(a=self);for(var c=!a.JS_SHA3_NO_COMMON_JS&&t.exports,f=r.amdO,u=!a.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,d="0123456789abcdef".split(""),h=[4,1024,262144,67108864],l=[0,8,16,24],p=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],b=[224,256,384,512],v=[128,256],y=["hex","buffer","arrayBuffer","array","digest"],m={128:168,256:136},g=a.JS_SHA3_NO_NODE_JS||!Array.isArray?function(t){return"[object Array]"===Object.prototype.toString.call(t)}:Array.isArray,w=!u||!a.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView?ArrayBuffer.isView:function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer},_=function(t){var e=typeof t;if("string"===e)return[t,!0];if("object"!==e||null===t)throw new Error(i);if(u&&t.constructor===ArrayBuffer)return[new Uint8Array(t),!1];if(!g(t)&&!w(t))throw new Error(i);return[t,!1]},A=function(t){return 0===_(t)[0].length},M=function(t){for(var e=[],r=0;r<t.length;++r)e[r]=t[r];return e},S=function(t,e,r){return function(n){return new q(t,e,t).update(n)[r]()}},x=function(t,e,r){return function(n,i){return new q(t,e,i).update(n)[r]()}},k=function(t,e,r){return function(e,n,i,o){return C["cshake"+t].update(e,n,i,o)[r]()}},E=function(t,e,r){return function(e,n,i,o){return C["kmac"+t].update(e,n,i,o)[r]()}},O=function(t,e,r,n){for(var i=0;i<y.length;++i){var o=y[i];t[o]=e(r,n,o)}return t},R=function(t,e){var r=S(t,e,"hex");return r.create=function(){return new q(t,e,t)},r.update=function(t){return r.create().update(t)},O(r,S,t,e)},P=[{name:"keccak",padding:[1,256,65536,16777216],bits:b,createMethod:R},{name:"sha3",padding:[6,1536,393216,100663296],bits:b,createMethod:R},{name:"shake",padding:[31,7936,2031616,520093696],bits:v,createMethod:function(t,e){var r=x(t,e,"hex");return r.create=function(r){return new q(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},O(r,x,t,e)}},{name:"cshake",padding:h,bits:v,createMethod:function(t,e){var r=m[t],n=k(t,0,"hex");return n.create=function(n,i,o){return A(i)&&A(o)?C["shake"+t].create(n):new q(t,e,n).bytepad([i,o],r)},n.update=function(t,e,r,i){return n.create(e,r,i).update(t)},O(n,k,t,e)}},{name:"kmac",padding:h,bits:v,createMethod:function(t,e){var r=m[t],n=E(t,0,"hex");return n.create=function(n,i,o){return new F(t,e,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(t,e,r,i){return n.create(t,r,i).update(e)},O(n,E,t,e)}}],C={},B=[],I=0;I<P.length;++I)for(var z=P[I],T=z.bits,N=0;N<T.length;++N){var j=z.name+"_"+T[N];if(B.push(j),C[j]=z.createMethod(T[N],z.padding),"sha3"!==z.name){var L=z.name+T[N];B.push(L),C[L]=C[j]}}function q(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function F(t,e,r){q.call(this,t,e,r)}q.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var e=_(t);t=e[0];for(var r,n,i=e[1],o=this.blocks,a=this.byteCount,s=t.length,c=this.blockCount,f=0,u=this.s;f<s;){if(this.reset)for(this.reset=!1,o[0]=this.block,r=1;r<c+1;++r)o[r]=0;if(i)for(r=this.start;f<s&&r<a;++f)(n=t.charCodeAt(f))<128?o[r>>2]|=n<<l[3&r++]:n<2048?(o[r>>2]|=(192|n>>6)<<l[3&r++],o[r>>2]|=(128|63&n)<<l[3&r++]):n<55296||n>=57344?(o[r>>2]|=(224|n>>12)<<l[3&r++],o[r>>2]|=(128|n>>6&63)<<l[3&r++],o[r>>2]|=(128|63&n)<<l[3&r++]):(n=65536+((1023&n)<<10|1023&t.charCodeAt(++f)),o[r>>2]|=(240|n>>18)<<l[3&r++],o[r>>2]|=(128|n>>12&63)<<l[3&r++],o[r>>2]|=(128|n>>6&63)<<l[3&r++],o[r>>2]|=(128|63&n)<<l[3&r++]);else for(r=this.start;f<s&&r<a;++f)o[r>>2]|=t[f]<<l[3&r++];if(this.lastByteIndex=r,r>=a){for(this.start=r-a,this.block=o[c],r=0;r<c;++r)u[r]^=o[r];U(u),this.reset=!0}else this.start=r}return this},q.prototype.encode=function(t,e){var r=255&t,n=1,i=[r];for(r=255&(t>>=8);r>0;)i.unshift(r),r=255&(t>>=8),++n;return e?i.push(n):i.unshift(n),this.update(i),i.length},q.prototype.encodeString=function(t){var e=_(t);t=e[0];var r=e[1],n=0,i=t.length;if(r)for(var o=0;o<t.length;++o){var a=t.charCodeAt(o);a<128?n+=1:a<2048?n+=2:a<55296||a>=57344?n+=3:(a=65536+((1023&a)<<10|1023&t.charCodeAt(++o)),n+=4)}else n=i;return n+=this.encode(8*n),this.update(t),n},q.prototype.bytepad=function(t,e){for(var r=this.encode(e),n=0;n<t.length;++n)r+=this.encodeString(t[n]);var i=(e-r%e)%e,o=[];return o.length=i,this.update(o),this},q.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,n=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)n[e]^=t[e];U(n)}},q.prototype.toString=q.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,a=0,s="";a<n;){for(o=0;o<e&&a<n;++o,++a)t=r[o],s+=d[t>>4&15]+d[15&t]+d[t>>12&15]+d[t>>8&15]+d[t>>20&15]+d[t>>16&15]+d[t>>28&15]+d[t>>24&15];a%e==0&&(r=M(r),U(r),o=0)}return i&&(t=r[o],s+=d[t>>4&15]+d[15&t],i>1&&(s+=d[t>>12&15]+d[t>>8&15]),i>2&&(s+=d[t>>20&15]+d[t>>16&15])),s},q.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,a=0,s=this.outputBits>>3;t=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(s);for(var c=new Uint32Array(t);a<n;){for(o=0;o<e&&a<n;++o,++a)c[a]=r[o];a%e==0&&(r=M(r),U(r))}return i&&(c[a]=r[o],t=t.slice(0,s)),t},q.prototype.buffer=q.prototype.arrayBuffer,q.prototype.digest=q.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,a=0,s=0,c=[];s<i;){for(a=0;a<r&&s<i;++a,++s)t=s<<2,e=n[a],c[t]=255&e,c[t+1]=e>>8&255,c[t+2]=e>>16&255,c[t+3]=e>>24&255;s%r==0&&(n=M(n),U(n))}return o&&(t=s<<2,e=n[a],c[t]=255&e,o>1&&(c[t+1]=e>>8&255),o>2&&(c[t+2]=e>>16&255)),c},F.prototype=new q,F.prototype.finalize=function(){return this.encode(this.outputBits,!0),q.prototype.finalize.call(this)};var U=function(t){var e,r,n,i,o,a,s,c,f,u,d,h,l,b,v,y,m,g,w,_,A,M,S,x,k,E,O,R,P,C,B,I,z,T,N,j,L,q,F,U,D,H,J,W,K,G,V,X,Y,Z,$,Q,tt,et,rt,nt,it,ot,at,st,ct,ft,ut;for(n=0;n<48;n+=2)i=t[0]^t[10]^t[20]^t[30]^t[40],o=t[1]^t[11]^t[21]^t[31]^t[41],a=t[2]^t[12]^t[22]^t[32]^t[42],s=t[3]^t[13]^t[23]^t[33]^t[43],c=t[4]^t[14]^t[24]^t[34]^t[44],f=t[5]^t[15]^t[25]^t[35]^t[45],u=t[6]^t[16]^t[26]^t[36]^t[46],d=t[7]^t[17]^t[27]^t[37]^t[47],e=(h=t[8]^t[18]^t[28]^t[38]^t[48])^(a<<1|s>>>31),r=(l=t[9]^t[19]^t[29]^t[39]^t[49])^(s<<1|a>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=i^(c<<1|f>>>31),r=o^(f<<1|c>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=a^(u<<1|d>>>31),r=s^(d<<1|u>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=c^(h<<1|l>>>31),r=f^(l<<1|h>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=u^(i<<1|o>>>31),r=d^(o<<1|i>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,b=t[0],v=t[1],G=t[11]<<4|t[10]>>>28,V=t[10]<<4|t[11]>>>28,R=t[20]<<3|t[21]>>>29,P=t[21]<<3|t[20]>>>29,st=t[31]<<9|t[30]>>>23,ct=t[30]<<9|t[31]>>>23,H=t[40]<<18|t[41]>>>14,J=t[41]<<18|t[40]>>>14,T=t[2]<<1|t[3]>>>31,N=t[3]<<1|t[2]>>>31,y=t[13]<<12|t[12]>>>20,m=t[12]<<12|t[13]>>>20,X=t[22]<<10|t[23]>>>22,Y=t[23]<<10|t[22]>>>22,C=t[33]<<13|t[32]>>>19,B=t[32]<<13|t[33]>>>19,ft=t[42]<<2|t[43]>>>30,ut=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,j=t[14]<<6|t[15]>>>26,L=t[15]<<6|t[14]>>>26,g=t[25]<<11|t[24]>>>21,w=t[24]<<11|t[25]>>>21,Z=t[34]<<15|t[35]>>>17,$=t[35]<<15|t[34]>>>17,I=t[45]<<29|t[44]>>>3,z=t[44]<<29|t[45]>>>3,x=t[6]<<28|t[7]>>>4,k=t[7]<<28|t[6]>>>4,nt=t[17]<<23|t[16]>>>9,it=t[16]<<23|t[17]>>>9,q=t[26]<<25|t[27]>>>7,F=t[27]<<25|t[26]>>>7,_=t[36]<<21|t[37]>>>11,A=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,W=t[8]<<27|t[9]>>>5,K=t[9]<<27|t[8]>>>5,E=t[18]<<20|t[19]>>>12,O=t[19]<<20|t[18]>>>12,ot=t[29]<<7|t[28]>>>25,at=t[28]<<7|t[29]>>>25,U=t[38]<<8|t[39]>>>24,D=t[39]<<8|t[38]>>>24,M=t[48]<<14|t[49]>>>18,S=t[49]<<14|t[48]>>>18,t[0]=b^~y&g,t[1]=v^~m&w,t[10]=x^~E&R,t[11]=k^~O&P,t[20]=T^~j&q,t[21]=N^~L&F,t[30]=W^~G&X,t[31]=K^~V&Y,t[40]=et^~nt&ot,t[41]=rt^~it&at,t[2]=y^~g&_,t[3]=m^~w&A,t[12]=E^~R&C,t[13]=O^~P&B,t[22]=j^~q&U,t[23]=L^~F&D,t[32]=G^~X&Z,t[33]=V^~Y&$,t[42]=nt^~ot&st,t[43]=it^~at&ct,t[4]=g^~_&M,t[5]=w^~A&S,t[14]=R^~C&I,t[15]=P^~B&z,t[24]=q^~U&H,t[25]=F^~D&J,t[34]=X^~Z&Q,t[35]=Y^~$&tt,t[44]=ot^~st&ft,t[45]=at^~ct&ut,t[6]=_^~M&b,t[7]=A^~S&v,t[16]=C^~I&x,t[17]=B^~z&k,t[26]=U^~H&T,t[27]=D^~J&N,t[36]=Z^~Q&W,t[37]=$^~tt&K,t[46]=st^~ft&et,t[47]=ct^~ut&rt,t[8]=M^~b&y,t[9]=S^~v&m,t[18]=I^~x&E,t[19]=z^~k&O,t[28]=H^~T&j,t[29]=J^~N&L,t[38]=Q^~W&G,t[39]=tt^~K&V,t[48]=ft^~et&nt,t[49]=ut^~rt&it,t[0]^=p[n],t[1]^=p[n+1]};if(c)t.exports=C;else{for(I=0;I<B.length;++I)a[B[I]]=C[B[I]];f&&(void 0===(n=function(){return C}.call(e,r,e,t))||(t.exports=n))}}()},7094:function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{c(n.next(t))}catch(t){o(t)}}function s(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.JSONRPCClient=void 0;var o=r(1287),a=r(2616),s=function(){function t(t,e){this._send=t,this.createID=e,this.idToResolveMap=new Map,this.id=0}return t.prototype._createID=function(){return this.createID?this.createID():++this.id},t.prototype.timeout=function(t,e){var r=this;void 0===e&&(e=function(t){return(0,o.createJSONRPCErrorResponse)(t,a.DefaultErrorCode,"Request timeout")});var n=function(n,i){var o=setTimeout((function(){n.forEach((function(t){var n=r.idToResolveMap.get(t);n&&(r.idToResolveMap.delete(t),n(e(t)))}))}),t);return i().then((function(t){return clearTimeout(o),t}),(function(t){return clearTimeout(o),Promise.reject(t)}))};return{request:function(t,e,i){var o=r._createID();return n([o],(function(){return r.requestWithID(t,e,i,o)}))},requestAdvanced:function(t,e){return function(t,e){var i=(Array.isArray(t)?t:[t]).map((function(t){return t.id})).filter(c);return n(i,(function(){return r.requestAdvanced(t,e)}))}(t,e)}}},t.prototype.request=function(t,e,r){return this.requestWithID(t,e,r,this._createID())},t.prototype.requestWithID=function(t,e,r,a){return n(this,void 0,void 0,(function(){var n,s;return i(this,(function(i){switch(i.label){case 0:return n=(0,o.createJSONRPCRequest)(a,t,e),[4,this.requestAdvanced(n,r)];case 1:return void 0===(s=i.sent()).result||s.error?void 0===s.result&&s.error?[2,Promise.reject(new o.JSONRPCErrorException(s.error.message,s.error.code,s.error.data))]:[2,Promise.reject(new Error("An unexpected error occurred"))]:[2,s.result]}}))}))},t.prototype.requestAdvanced=function(t,e){var r=this,n=Array.isArray(t);Array.isArray(t)||(t=[t]);var i=t.filter((function(t){return c(t.id)})),s=i.map((function(t){return new Promise((function(e){return r.idToResolveMap.set(t.id,e)}))})),f=Promise.all(s).then((function(t){return n||!t.length?t:t[0]}));return this.send(n?t:t[0],e).then((function(){return f}),(function(t){return i.forEach((function(e){r.receive((0,o.createJSONRPCErrorResponse)(e.id,a.DefaultErrorCode,t&&t.message||"Failed to send a request"))})),f}))},t.prototype.notify=function(t,e,r){var n=(0,o.createJSONRPCNotification)(t,e);this.send(n,r).then(void 0,(function(){}))},t.prototype.send=function(t,e){return n(this,void 0,void 0,(function(){return i(this,(function(r){return[2,this._send(t,e)]}))}))},t.prototype.rejectAllPendingRequests=function(t){this.idToResolveMap.forEach((function(e,r){return e((0,o.createJSONRPCErrorResponse)(r,a.DefaultErrorCode,t))})),this.idToResolveMap.clear()},t.prototype.receive=function(t){var e=this;Array.isArray(t)||(t=[t]),t.forEach((function(t){var r=e.idToResolveMap.get(t.id);r&&(e.idToResolveMap.delete(t.id),r(t))}))},t}();e.JSONRPCClient=s;var c=function(t){return null!=t}},3773:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(7094),e),i(r(1989),e),i(r(1287),e),i(r(3490),e),i(r(5556),e)},1989:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},2616:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultErrorCode=void 0,e.DefaultErrorCode=0},1287:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.createJSONRPCNotification=e.createJSONRPCRequest=e.createJSONRPCSuccessResponse=e.createJSONRPCErrorResponse=e.JSONRPCErrorCode=e.JSONRPCErrorException=e.isJSONRPCResponses=e.isJSONRPCResponse=e.isJSONRPCRequests=e.isJSONRPCRequest=e.isJSONRPCID=e.JSONRPC=void 0,e.JSONRPC="2.0",e.isJSONRPCID=function(t){return"string"==typeof t||"number"==typeof t||null===t},e.isJSONRPCRequest=function(t){return t.jsonrpc===e.JSONRPC&&void 0!==t.method&&void 0===t.result&&void 0===t.error},e.isJSONRPCRequests=function(t){return Array.isArray(t)&&t.every(e.isJSONRPCRequest)},e.isJSONRPCResponse=function(t){return t.jsonrpc===e.JSONRPC&&void 0!==t.id&&(void 0!==t.result||void 0!==t.error)},e.isJSONRPCResponses=function(t){return Array.isArray(t)&&t.every(e.isJSONRPCResponse)};var i,o=function(t,e,r){var n={code:t,message:e};return null!=r&&(n.data=r),n},a=function(t){function e(r,n,i){var o=t.call(this,r)||this;return Object.setPrototypeOf(o,e.prototype),o.code=n,o.data=i,o}return n(e,t),e.prototype.toObject=function(){return o(this.code,this.message,this.data)},e}(Error);e.JSONRPCErrorException=a,(i=e.JSONRPCErrorCode||(e.JSONRPCErrorCode={}))[i.ParseError=-32700]="ParseError",i[i.InvalidRequest=-32600]="InvalidRequest",i[i.MethodNotFound=-32601]="MethodNotFound",i[i.InvalidParams=-32602]="InvalidParams",i[i.InternalError=-32603]="InternalError",e.createJSONRPCErrorResponse=function(t,r,n,i){return{jsonrpc:e.JSONRPC,id:t,error:o(r,n,i)}},e.createJSONRPCSuccessResponse=function(t,r){return{jsonrpc:e.JSONRPC,id:t,result:null!=r?r:null}},e.createJSONRPCRequest=function(t,r,n){return{jsonrpc:e.JSONRPC,id:t,method:r,params:n}},e.createJSONRPCNotification=function(t,r){return{jsonrpc:e.JSONRPC,method:t,params:r}}},5556:function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{c(n.next(t))}catch(t){o(t)}}function s(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.JSONRPCServerAndClient=void 0;var o=r(1287),a=function(){function t(t,e,r){var n;void 0===r&&(r={}),this.server=t,this.client=e,this.errorListener=null!==(n=r.errorListener)&&void 0!==n?n:console.warn}return t.prototype.applyServerMiddleware=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];(t=this.server).applyMiddleware.apply(t,e)},t.prototype.hasMethod=function(t){return this.server.hasMethod(t)},t.prototype.addMethod=function(t,e){this.server.addMethod(t,e)},t.prototype.addMethodAdvanced=function(t,e){this.server.addMethodAdvanced(t,e)},t.prototype.removeMethod=function(t){this.server.removeMethod(t)},t.prototype.timeout=function(t){return this.client.timeout(t)},t.prototype.request=function(t,e,r){return this.client.request(t,e,r)},t.prototype.requestAdvanced=function(t,e){return this.client.requestAdvanced(t,e)},t.prototype.notify=function(t,e,r){this.client.notify(t,e,r)},t.prototype.rejectAllPendingRequests=function(t){this.client.rejectAllPendingRequests(t)},t.prototype.receiveAndSend=function(t,e,r){return n(this,void 0,void 0,(function(){var n,a;return i(this,(function(i){switch(i.label){case 0:return(0,o.isJSONRPCResponse)(t)||(0,o.isJSONRPCResponses)(t)?(this.client.receive(t),[3,4]):[3,1];case 1:return(0,o.isJSONRPCRequest)(t)||(0,o.isJSONRPCRequests)(t)?[4,this.server.receive(t,e)]:[3,3];case 2:return(n=i.sent())?[2,this.client.send(n,r)]:[3,4];case 3:return a="Received an invalid JSON-RPC message",this.errorListener(a,t),[2,Promise.reject(new Error(a))];case 4:return[2]}}))}))},t}();e.JSONRPCServerAndClient=a},3490:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{c(n.next(t))}catch(t){o(t)}}function s(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},a=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.JSONRPCServer=void 0;var s=r(1287),c=r(2616),f=function(t){return(0,s.createJSONRPCErrorResponse)((0,s.isJSONRPCID)(t.id)?t.id:null,s.JSONRPCErrorCode.InvalidRequest,"Invalid Request")},u=function(){function t(t){var e;void 0===t&&(t={}),this.mapErrorToJSONRPCErrorResponse=p,this.nameToMethodDictionary={},this.middleware=null,this.errorListener=null!==(e=t.errorListener)&&void 0!==e?e:console.warn}return t.prototype.hasMethod=function(t){return!!this.nameToMethodDictionary[t]},t.prototype.addMethod=function(t,e){this.addMethodAdvanced(t,this.toJSONRPCMethod(e))},t.prototype.removeMethod=function(t){delete this.nameToMethodDictionary[t]},t.prototype.toJSONRPCMethod=function(t){return function(e,r){var n=t(e.params,r);return Promise.resolve(n).then((function(t){return l(e.id,t)}))}},t.prototype.addMethodAdvanced=function(t,e){var r;this.nameToMethodDictionary=n(n({},this.nameToMethodDictionary),((r={})[t]=e,r))},t.prototype.receiveJSON=function(t,e){var r=this.tryParseRequestJSON(t);return r?this.receive(r,e):Promise.resolve((0,s.createJSONRPCErrorResponse)(null,s.JSONRPCErrorCode.ParseError,"Parse error"))},t.prototype.tryParseRequestJSON=function(t){try{return JSON.parse(t)}catch(t){return null}},t.prototype.receive=function(t,e){return Array.isArray(t)?this.receiveMultiple(t,e):this.receiveSingle(t,e)},t.prototype.receiveMultiple=function(t,e){return i(this,void 0,void 0,(function(){var r,n=this;return o(this,(function(i){switch(i.label){case 0:return[4,Promise.all(t.map((function(t){return n.receiveSingle(t,e)})))];case 1:return 1===(r=i.sent().filter(d)).length?[2,r[0]]:r.length?[2,r]:[2,null]}}))}))},t.prototype.receiveSingle=function(t,e){return i(this,void 0,void 0,(function(){var r,n;return o(this,(function(i){switch(i.label){case 0:return r=this.nameToMethodDictionary[t.method],(0,s.isJSONRPCRequest)(t)?[3,1]:[2,f(t)];case 1:return[4,this.callMethod(r,t,e)];case 2:return n=i.sent(),[2,b(t,n)]}}))}))},t.prototype.applyMiddleware=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.middleware?this.middleware=this.combineMiddlewares(a([this.middleware],t,!0)):this.middleware=this.combineMiddlewares(t)},t.prototype.combineMiddlewares=function(t){return t.length?t.reduce(this.middlewareReducer):null},t.prototype.middlewareReducer=function(t,e){return function(r,n,i){return t((function(t,n){return e(r,t,n)}),n,i)}},t.prototype.callMethod=function(t,e,r){var n=this,i=function(t){return n.errorListener('An unexpected error occurred while executing "'.concat(e.method,'" JSON-RPC method:'),t),Promise.resolve(n.mapErrorToJSONRPCErrorResponseIfNecessary(e.id,t))};try{return(this.middleware||h)((function(e,r){return t?t(e,r):void 0!==e.id?Promise.resolve((n=e.id,(0,s.createJSONRPCErrorResponse)(n,s.JSONRPCErrorCode.MethodNotFound,"Method not found"))):Promise.resolve(null);var n}),e,r).then(void 0,i)}catch(t){return i(t)}},t.prototype.mapErrorToJSONRPCErrorResponseIfNecessary=function(t,e){return void 0!==t?this.mapErrorToJSONRPCErrorResponse(t,e):null},t}();e.JSONRPCServer=u;var d=function(t){return null!==t},h=function(t,e,r){return t(e,r)},l=function(t,e){return void 0!==t?(0,s.createJSONRPCSuccessResponse)(t,e):null},p=function(t,e){var r,n,i=null!==(r=null==e?void 0:e.message)&&void 0!==r?r:"An unexpected error occurred",o=c.DefaultErrorCode;return e instanceof s.JSONRPCErrorException&&(o=e.code,n=e.data),(0,s.createJSONRPCErrorResponse)(t,o,i,n)},b=function(t,e){return e||(void 0!==t.id?(0,s.createJSONRPCErrorResponse)(t.id,s.JSONRPCErrorCode.InternalError,"Internal error"):null)}},3349:t=>{function e(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=e,e.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)}},4367:(t,e)=>{"use strict";var r=e;function n(t){return 1===t.length?"0"+t:t}function i(t){for(var e="",r=0;r<t.length;r++)e+=n(t[r].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"!=typeof t){for(var n=0;n<t.length;n++)r[n]=0|t[n];return r}if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16));else for(n=0;n<t.length;n++){var i=t.charCodeAt(n),o=i>>8,a=255&i;o?r.push(o,a):r.push(a)}return r},r.zero2=n,r.toHex=i,r.encode=function(t,e){return"hex"===e?i(t):t}},4545:(t,e,r)=>{"use strict";var n,i={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(t){this.toString=function(){return"CORRUPT: "+this.message},this.message=t},invalid:function(t){this.toString=function(){return"INVALID: "+this.message},this.message=t},bug:function(t){this.toString=function(){return"BUG: "+this.message},this.message=t},notReady:function(t){this.toString=function(){return"NOT READY: "+this.message},this.message=t}}};function o(t,e,r){if(4!==e.length)throw new i.exception.invalid("invalid aes block size");var n=t.b[r],o=e[0]^n[0],a=e[r?3:1]^n[1],s=e[2]^n[2];e=e[r?1:3]^n[3];var c,f,u,d,h=n.length/4-2,l=4,p=[0,0,0,0];t=(c=t.s[r])[0];var b=c[1],v=c[2],y=c[3],m=c[4];for(d=0;d<h;d++)c=t[o>>>24]^b[a>>16&255]^v[s>>8&255]^y[255&e]^n[l],f=t[a>>>24]^b[s>>16&255]^v[e>>8&255]^y[255&o]^n[l+1],u=t[s>>>24]^b[e>>16&255]^v[o>>8&255]^y[255&a]^n[l+2],e=t[e>>>24]^b[o>>16&255]^v[a>>8&255]^y[255&s]^n[l+3],l+=4,o=c,a=f,s=u;for(d=0;4>d;d++)p[r?3&-d:d]=m[o>>>24]<<24^m[a>>16&255]<<16^m[s>>8&255]<<8^m[255&e]^n[l++],c=o,o=a,a=s,s=e,e=c;return p}function a(t,e){var r,n,i,o=t.F,a=t.b,s=o[0],c=o[1],f=o[2],u=o[3],d=o[4],h=o[5],l=o[6],p=o[7];for(r=0;64>r;r++)16>r?n=e[r]:(n=e[r+1&15],i=e[r+14&15],n=e[15&r]=(n>>>7^n>>>18^n>>>3^n<<25^n<<14)+(i>>>17^i>>>19^i>>>10^i<<15^i<<13)+e[15&r]+e[r+9&15]|0),n=n+p+(d>>>6^d>>>11^d>>>25^d<<26^d<<21^d<<7)+(l^d&(h^l))+a[r],p=l,l=h,h=d,d=u+n|0,u=f,f=c,s=n+((c=s)&f^u&(c^f))+(c>>>2^c>>>13^c>>>22^c<<30^c<<19^c<<10)|0;o[0]=o[0]+s|0,o[1]=o[1]+c|0,o[2]=o[2]+f|0,o[3]=o[3]+u|0,o[4]=o[4]+d|0,o[5]=o[5]+h|0,o[6]=o[6]+l|0,o[7]=o[7]+p|0}function s(t,e){var r,n=i.random.K[t],o=[];for(r in n)n.hasOwnProperty(r)&&o.push(n[r]);for(r=0;r<o.length;r++)o[r](e)}function c(t,e){"undefined"!=typeof window&&window.performance&&"function"==typeof window.performance.now?t.addEntropy(window.performance.now(),e,"loadtime"):t.addEntropy((new Date).valueOf(),e,"loadtime")}function f(t){t.b=u(t).concat(u(t)),t.L=new i.cipher.aes(t.b)}function u(t){for(var e=0;4>e&&(t.h[e]=t.h[e]+1|0,!t.h[e]);e++);return t.L.encrypt(t.h)}function d(t,e){return function(){e.apply(t,arguments)}}i.cipher.aes=function(t){this.s[0][0][0]||this.O();var e,r,n,o,a=this.s[0][4],s=this.s[1],c=1;if(4!==(e=t.length)&&6!==e&&8!==e)throw new i.exception.invalid("invalid aes key size");for(this.b=[n=t.slice(0),o=[]],t=e;t<4*e+28;t++)r=n[t-1],(0==t%e||8===e&&4==t%e)&&(r=a[r>>>24]<<24^a[r>>16&255]<<16^a[r>>8&255]<<8^a[255&r],0==t%e&&(r=r<<8^r>>>24^c<<24,c=c<<1^283*(c>>7))),n[t]=n[t-e]^r;for(e=0;t;e++,t--)r=n[3&e?t:t-4],o[e]=4>=t||4>e?r:s[0][a[r>>>24]]^s[1][a[r>>16&255]]^s[2][a[r>>8&255]]^s[3][a[255&r]]},i.cipher.aes.prototype={encrypt:function(t){return o(this,t,0)},decrypt:function(t){return o(this,t,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var t,e,r,n,i,o,a,s=this.s[0],c=this.s[1],f=s[4],u=c[4],d=[],h=[];for(t=0;256>t;t++)h[(d[t]=t<<1^283*(t>>7))^t]=t;for(e=r=0;!f[e];e^=n||1,r=h[r]||1)for(o=(o=r^r<<1^r<<2^r<<3^r<<4)>>8^255&o^99,f[e]=o,u[o]=e,a=16843009*(i=d[t=d[n=d[e]]])^65537*t^257*n^16843008*e,i=257*d[o]^16843008*o,t=0;4>t;t++)s[t][e]=i=i<<24^i>>>8,c[t][o]=a=a<<24^a>>>8;for(t=0;5>t;t++)s[t]=s[t].slice(0),c[t]=c[t].slice(0)}},i.bitArray={bitSlice:function(t,e,r){return t=i.bitArray.$(t.slice(e/32),32-(31&e)).slice(1),void 0===r?t:i.bitArray.clamp(t,r-e)},extract:function(t,e,r){var n=Math.floor(-e-r&31);return(-32&(e+r-1^e)?t[e/32|0]<<32-n^t[e/32+1|0]>>>n:t[e/32|0]>>>n)&(1<<r)-1},concat:function(t,e){if(0===t.length||0===e.length)return t.concat(e);var r=t[t.length-1],n=i.bitArray.getPartial(r);return 32===n?t.concat(e):i.bitArray.$(e,n,0|r,t.slice(0,t.length-1))},bitLength:function(t){var e=t.length;return 0===e?0:32*(e-1)+i.bitArray.getPartial(t[e-1])},clamp:function(t,e){if(32*t.length<e)return t;var r=(t=t.slice(0,Math.ceil(e/32))).length;return e&=31,0<r&&e&&(t[r-1]=i.bitArray.partial(e,t[r-1]&2147483648>>e-1,1)),t},partial:function(t,e,r){return 32===t?e:(r?0|e:e<<32-t)+1099511627776*t},getPartial:function(t){return Math.round(t/1099511627776)||32},equal:function(t,e){if(i.bitArray.bitLength(t)!==i.bitArray.bitLength(e))return!1;var r,n=0;for(r=0;r<t.length;r++)n|=t[r]^e[r];return 0===n},$:function(t,e,r,n){var o;for(o=0,void 0===n&&(n=[]);32<=e;e-=32)n.push(r),r=0;if(0===e)return n.concat(t);for(o=0;o<t.length;o++)n.push(r|t[o]>>>e),r=t[o]<<32-e;return o=t.length?t[t.length-1]:0,t=i.bitArray.getPartial(o),n.push(i.bitArray.partial(e+t&31,32<e+t?r:n.pop(),1)),n},i:function(t,e){return[t[0]^e[0],t[1]^e[1],t[2]^e[2],t[3]^e[3]]},byteswapM:function(t){var e,r;for(e=0;e<t.length;++e)r=t[e],t[e]=r>>>24|r>>>8&65280|(65280&r)<<8|r<<24;return t}},i.codec.utf8String={fromBits:function(t){var e,r,n="",o=i.bitArray.bitLength(t);for(e=0;e<o/8;e++)!(3&e)&&(r=t[e/4]),n+=String.fromCharCode(r>>>8>>>8>>>8),r<<=8;return decodeURIComponent(escape(n))},toBits:function(t){t=unescape(encodeURIComponent(t));var e,r=[],n=0;for(e=0;e<t.length;e++)n=n<<8|t.charCodeAt(e),!(3&~e)&&(r.push(n),n=0);return 3&e&&r.push(i.bitArray.partial(8*(3&e),n)),r}},i.codec.hex={fromBits:function(t){var e,r="";for(e=0;e<t.length;e++)r+=(0xf00000000000+(0|t[e])).toString(16).substr(4);return r.substr(0,i.bitArray.bitLength(t)/4)},toBits:function(t){var e,r,n=[];for(r=(t=t.replace(/\s|0x/g,"")).length,t+="00000000",e=0;e<t.length;e+=8)n.push(0^parseInt(t.substr(e,8),16));return i.bitArray.clamp(n,4*r)}},i.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(t,e,r){var n=i.codec.base32.BASE,o=i.codec.base32.REMAINING,a="",s=0,c=i.codec.base32.B,f=0,u=i.bitArray.bitLength(t);for(r&&(c=i.codec.base32.X),r=0;a.length*n<u;)a+=c.charAt((f^t[r]>>>s)>>>o),s<n?(f=t[r]<<n-s,s+=o,r++):(f<<=n,s-=n);for(;7&a.length&&!e;)a+="=";return a},toBits:function(t,e){t=t.replace(/\s|=/g,"").toUpperCase();var r,n,o=i.codec.base32.BITS,a=i.codec.base32.BASE,s=i.codec.base32.REMAINING,c=[],f=0,u=i.codec.base32.B,d=0,h="base32";for(e&&(u=i.codec.base32.X,h="base32hex"),r=0;r<t.length;r++){if(0>(n=u.indexOf(t.charAt(r)))){if(!e)try{return i.codec.base32hex.toBits(t)}catch(t){}throw new i.exception.invalid("this isn't "+h+"!")}f>s?(f-=s,c.push(d^n>>>f),d=n<<o-f):d^=n<<o-(f+=a)}return 56&f&&c.push(i.bitArray.partial(56&f,d,1)),c}},i.codec.base32hex={fromBits:function(t,e){return i.codec.base32.fromBits(t,e,1)},toBits:function(t){return i.codec.base32.toBits(t,1)}},i.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(t,e,r){var n="",o=0,a=i.codec.base64.B,s=0,c=i.bitArray.bitLength(t);for(r&&(a=a.substr(0,62)+"-_"),r=0;6*n.length<c;)n+=a.charAt((s^t[r]>>>o)>>>26),6>o?(s=t[r]<<6-o,o+=26,r++):(s<<=6,o-=6);for(;3&n.length&&!e;)n+="=";return n},toBits:function(t,e){t=t.replace(/\s|=/g,"");var r,n,o=[],a=0,s=i.codec.base64.B,c=0;for(e&&(s=s.substr(0,62)+"-_"),r=0;r<t.length;r++){if(0>(n=s.indexOf(t.charAt(r))))throw new i.exception.invalid("this isn't base64!");26<a?(a-=26,o.push(c^n>>>a),c=n<<32-a):c^=n<<32-(a+=6)}return 56&a&&o.push(i.bitArray.partial(56&a,c,1)),o}},i.codec.base64url={fromBits:function(t){return i.codec.base64.fromBits(t,1,1)},toBits:function(t){return i.codec.base64.toBits(t,1)}},i.hash.sha256=function(t){this.b[0]||this.O(),t?(this.F=t.F.slice(0),this.A=t.A.slice(0),this.l=t.l):this.reset()},i.hash.sha256.hash=function(t){return(new i.hash.sha256).update(t).finalize()},i.hash.sha256.prototype={blockSize:512,reset:function(){return this.F=this.Y.slice(0),this.A=[],this.l=0,this},update:function(t){"string"==typeof t&&(t=i.codec.utf8String.toBits(t));var e,r=this.A=i.bitArray.concat(this.A,t);if(e=this.l,9007199254740991<(t=this.l=e+i.bitArray.bitLength(t)))throw new i.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!=typeof Uint32Array){var n=new Uint32Array(r),o=0;for(e=512+e-(512+e&511);e<=t;e+=512)a(this,n.subarray(16*o,16*(o+1))),o+=1;r.splice(0,16*o)}else for(e=512+e-(512+e&511);e<=t;e+=512)a(this,r.splice(0,16));return this},finalize:function(){var t,e=this.A,r=this.F;for(t=(e=i.bitArray.concat(e,[i.bitArray.partial(1,1)])).length+2;15&t;t++)e.push(0);for(e.push(Math.floor(this.l/4294967296)),e.push(0|this.l);e.length;)a(this,e.splice(0,16));return this.reset(),r},Y:[],b:[],O:function(){function t(t){return 4294967296*(t-Math.floor(t))|0}for(var e,r,n=0,i=2;64>n;i++){for(r=!0,e=2;e*e<=i;e++)if(0==i%e){r=!1;break}r&&(8>n&&(this.Y[n]=t(Math.pow(i,.5))),this.b[n]=t(Math.pow(i,1/3)),n++)}}},i.mode.ccm={name:"ccm",G:[],listenProgress:function(t){i.mode.ccm.G.push(t)},unListenProgress:function(t){-1<(t=i.mode.ccm.G.indexOf(t))&&i.mode.ccm.G.splice(t,1)},fa:function(t){var e,r=i.mode.ccm.G.slice();for(e=0;e<r.length;e+=1)r[e](t)},encrypt:function(t,e,r,n,o){var a,s=e.slice(0),c=i.bitArray,f=c.bitLength(r)/8,u=c.bitLength(s)/8;if(o=o||64,n=n||[],7>f)throw new i.exception.invalid("ccm: iv must be at least 7 bytes");for(a=2;4>a&&u>>>8*a;a++);return a<15-f&&(a=15-f),r=c.clamp(r,8*(15-a)),e=i.mode.ccm.V(t,e,r,n,o,a),s=i.mode.ccm.C(t,s,r,e,o,a),c.concat(s.data,s.tag)},decrypt:function(t,e,r,n,o){o=o||64,n=n||[];var a=i.bitArray,s=a.bitLength(r)/8,c=a.bitLength(e),f=a.clamp(e,c-o),u=a.bitSlice(e,c-o);if(c=(c-o)/8,7>s)throw new i.exception.invalid("ccm: iv must be at least 7 bytes");for(e=2;4>e&&c>>>8*e;e++);if(e<15-s&&(e=15-s),r=a.clamp(r,8*(15-e)),f=i.mode.ccm.C(t,f,r,u,o,e),t=i.mode.ccm.V(t,f.data,r,n,o,e),!a.equal(f.tag,t))throw new i.exception.corrupt("ccm: tag doesn't match");return f.data},na:function(t,e,r,n,o,a){var s=[],c=i.bitArray,f=c.i;if(n=[c.partial(8,(e.length?64:0)|n-2<<2|a-1)],(n=c.concat(n,r))[3]|=o,n=t.encrypt(n),e.length)for(65279>=(r=c.bitLength(e)/8)?s=[c.partial(16,r)]:4294967295>=r&&(s=c.concat([c.partial(16,65534)],[r])),s=c.concat(s,e),e=0;e<s.length;e+=4)n=t.encrypt(f(n,s.slice(e,e+4).concat([0,0,0])));return n},V:function(t,e,r,n,o,a){var s=i.bitArray,c=s.i;if((o/=8)%2||4>o||16<o)throw new i.exception.invalid("ccm: invalid tag length");if(4294967295<n.length||4294967295<e.length)throw new i.exception.bug("ccm: can't deal with 4GiB or more data");for(r=i.mode.ccm.na(t,n,r,o,s.bitLength(e)/8,a),n=0;n<e.length;n+=4)r=t.encrypt(c(r,e.slice(n,n+4).concat([0,0,0])));return s.clamp(r,8*o)},C:function(t,e,r,n,o,a){var s,c=i.bitArray;s=c.i;var f=e.length,u=c.bitLength(e),d=f/50,h=d;if(r=c.concat([c.partial(8,a-1)],r).concat([0,0,0]).slice(0,4),n=c.bitSlice(s(n,t.encrypt(r)),0,o),!f)return{tag:n,data:[]};for(s=0;s<f;s+=4)s>d&&(i.mode.ccm.fa(s/f),d+=h),r[3]++,o=t.encrypt(r),e[s]^=o[0],e[s+1]^=o[1],e[s+2]^=o[2],e[s+3]^=o[3];return{tag:n,data:c.clamp(e,u)}}},i.mode.ocb2={name:"ocb2",encrypt:function(t,e,r,n,o,a){if(128!==i.bitArray.bitLength(r))throw new i.exception.invalid("ocb iv must be 128 bits");var s,c=i.mode.ocb2.S,f=i.bitArray,u=f.i,d=[0,0,0,0];r=c(t.encrypt(r));var h,l=[];for(n=n||[],o=o||64,s=0;s+4<e.length;s+=4)d=u(d,h=e.slice(s,s+4)),l=l.concat(u(r,t.encrypt(u(r,h)))),r=c(r);return h=e.slice(s),e=f.bitLength(h),s=t.encrypt(u(r,[0,0,0,e])),h=f.clamp(u(h.concat([0,0,0]),s),e),d=u(d,u(h.concat([0,0,0]),s)),d=t.encrypt(u(d,u(r,c(r)))),n.length&&(d=u(d,a?n:i.mode.ocb2.pmac(t,n))),l.concat(f.concat(h,f.clamp(d,o)))},decrypt:function(t,e,r,n,o,a){if(128!==i.bitArray.bitLength(r))throw new i.exception.invalid("ocb iv must be 128 bits");o=o||64;var s,c,f=i.mode.ocb2.S,u=i.bitArray,d=u.i,h=[0,0,0,0],l=f(t.encrypt(r)),p=i.bitArray.bitLength(e)-o,b=[];for(n=n||[],r=0;r+4<p/32;r+=4)s=d(l,t.decrypt(d(l,e.slice(r,r+4)))),h=d(h,s),b=b.concat(s),l=f(l);if(c=p-32*r,s=t.encrypt(d(l,[0,0,0,c])),s=d(s,u.clamp(e.slice(r),c).concat([0,0,0])),h=d(h,s),h=t.encrypt(d(h,d(l,f(l)))),n.length&&(h=d(h,a?n:i.mode.ocb2.pmac(t,n))),!u.equal(u.clamp(h,o),u.bitSlice(e,p)))throw new i.exception.corrupt("ocb: tag doesn't match");return b.concat(u.clamp(s,c))},pmac:function(t,e){var r,n=i.mode.ocb2.S,o=i.bitArray,a=o.i,s=[0,0,0,0],c=a(c=t.encrypt([0,0,0,0]),n(n(c)));for(r=0;r+4<e.length;r+=4)c=n(c),s=a(s,t.encrypt(a(c,e.slice(r,r+4))));return r=e.slice(r),128>o.bitLength(r)&&(c=a(c,n(c)),r=o.concat(r,[-2147483648,0,0,0])),s=a(s,r),t.encrypt(a(n(a(c,n(c))),s))},S:function(t){return[t[0]<<1^t[1]>>>31,t[1]<<1^t[2]>>>31,t[2]<<1^t[3]>>>31,t[3]<<1^135*(t[0]>>>31)]}},i.mode.gcm={name:"gcm",encrypt:function(t,e,r,n,o){var a=e.slice(0);return e=i.bitArray,n=n||[],t=i.mode.gcm.C(!0,t,a,n,r,o||128),e.concat(t.data,t.tag)},decrypt:function(t,e,r,n,o){var a=e.slice(0),s=i.bitArray,c=s.bitLength(a);if(n=n||[],(o=o||128)<=c?(e=s.bitSlice(a,c-o),a=s.bitSlice(a,0,c-o)):(e=a,a=[]),t=i.mode.gcm.C(!1,t,a,n,r,o),!s.equal(t.tag,e))throw new i.exception.corrupt("gcm: tag doesn't match");return t.data},ka:function(t,e){var r,n,o,a,s,c=i.bitArray.i;for(o=[0,0,0,0],a=e.slice(0),r=0;128>r;r++){for((n=!!(t[Math.floor(r/32)]&1<<31-r%32))&&(o=c(o,a)),s=!!(1&a[3]),n=3;0<n;n--)a[n]=a[n]>>>1|(1&a[n-1])<<31;a[0]>>>=1,s&&(a[0]^=-520093696)}return o},j:function(t,e,r){var n,o=r.length;for(e=e.slice(0),n=0;n<o;n+=4)e[0]^=4294967295&r[n],e[1]^=4294967295&r[n+1],e[2]^=4294967295&r[n+2],e[3]^=4294967295&r[n+3],e=i.mode.gcm.ka(e,t);return e},C:function(t,e,r,n,o,a){var s,c,f,u,d,h,l,p,b=i.bitArray;for(h=r.length,l=b.bitLength(r),p=b.bitLength(n),c=b.bitLength(o),s=e.encrypt([0,0,0,0]),96===c?(o=o.slice(0),o=b.concat(o,[1])):(o=i.mode.gcm.j(s,[0,0,0,0],o),o=i.mode.gcm.j(s,o,[0,0,Math.floor(c/4294967296),4294967295&c])),c=i.mode.gcm.j(s,[0,0,0,0],n),d=o.slice(0),n=c.slice(0),t||(n=i.mode.gcm.j(s,c,r)),u=0;u<h;u+=4)d[3]++,f=e.encrypt(d),r[u]^=f[0],r[u+1]^=f[1],r[u+2]^=f[2],r[u+3]^=f[3];return r=b.clamp(r,l),t&&(n=i.mode.gcm.j(s,c,r)),t=[Math.floor(p/4294967296),4294967295&p,Math.floor(l/4294967296),4294967295&l],n=i.mode.gcm.j(s,n,t),f=e.encrypt(o),n[0]^=f[0],n[1]^=f[1],n[2]^=f[2],n[3]^=f[3],{tag:b.bitSlice(n,0,a),data:r}}},i.misc.hmac=function(t,e){this.W=e=e||i.hash.sha256;var r,n=[[],[]],o=e.prototype.blockSize/32;for(this.w=[new e,new e],t.length>o&&(t=e.hash(t)),r=0;r<o;r++)n[0][r]=909522486^t[r],n[1][r]=1549556828^t[r];this.w[0].update(n[0]),this.w[1].update(n[1]),this.R=new e(this.w[0])},i.misc.hmac.prototype.encrypt=i.misc.hmac.prototype.mac=function(t){if(this.aa)throw new i.exception.invalid("encrypt on already updated hmac called!");return this.update(t),this.digest(t)},i.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]),this.aa=!1},i.misc.hmac.prototype.update=function(t){this.aa=!0,this.R.update(t)},i.misc.hmac.prototype.digest=function(){var t=this.R.finalize();return t=new this.W(this.w[1]).update(t).finalize(),this.reset(),t},i.misc.pbkdf2=function(t,e,r,n,o){if(r=r||1e4,0>n||0>r)throw new i.exception.invalid("invalid params to pbkdf2");"string"==typeof t&&(t=i.codec.utf8String.toBits(t)),"string"==typeof e&&(e=i.codec.utf8String.toBits(e)),t=new(o=o||i.misc.hmac)(t);var a,s,c,f,u=[],d=i.bitArray;for(f=1;32*u.length<(n||1);f++){for(o=a=t.encrypt(d.concat(e,[f])),s=1;s<r;s++)for(a=t.encrypt(a),c=0;c<a.length;c++)o[c]^=a[c];u=u.concat(o)}return n&&(u=d.clamp(u,n)),u},i.prng=function(t){this.c=[new i.hash.sha256],this.m=[0],this.P=0,this.H={},this.N=0,this.U={},this.Z=this.f=this.o=this.ha=0,this.b=[0,0,0,0,0,0,0,0],this.h=[0,0,0,0],this.L=void 0,this.M=t,this.D=!1,this.K={progress:{},seeded:{}},this.u=this.ga=0,this.I=1,this.J=2,this.ca=65536,this.T=[0,48,64,96,128,192,256,384,512,768,1024],this.da=3e4,this.ba=80},i.prng.prototype={randomWords:function(t,e){var r,n,o=[];if((r=this.isReady(e))===this.u)throw new i.exception.notReady("generator isn't seeded");if(r&this.J){r=!(r&this.I),n=[];var a,s=0;for(this.Z=n[0]=(new Date).valueOf()+this.da,a=0;16>a;a++)n.push(4294967296*Math.random()|0);for(a=0;a<this.c.length&&(n=n.concat(this.c[a].finalize()),s+=this.m[a],this.m[a]=0,r||!(this.P&1<<a));a++);for(this.P>=1<<this.c.length&&(this.c.push(new i.hash.sha256),this.m.push(0)),this.f-=s,s>this.o&&(this.o=s),this.P++,this.b=i.hash.sha256.hash(this.b.concat(n)),this.L=new i.cipher.aes(this.b),r=0;4>r&&(this.h[r]=this.h[r]+1|0,!this.h[r]);r++);}for(r=0;r<t;r+=4)0==(r+1)%this.ca&&f(this),n=u(this),o.push(n[0],n[1],n[2],n[3]);return f(this),o.slice(0,t)},setDefaultParanoia:function(t,e){if(0===t&&"Setting paranoia=0 will ruin your security; use it only for testing"!==e)throw new i.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=t},addEntropy:function(t,e,r){r=r||"user";var n,o,a=(new Date).valueOf(),c=this.H[r],f=this.isReady(),u=0;switch(void 0===(n=this.U[r])&&(n=this.U[r]=this.ha++),void 0===c&&(c=this.H[r]=0),this.H[r]=(this.H[r]+1)%this.c.length,typeof t){case"number":void 0===e&&(e=1),this.c[c].update([n,this.N++,1,e,a,1,0|t]);break;case"object":if("[object Uint32Array]"===(r=Object.prototype.toString.call(t))){for(o=[],r=0;r<t.length;r++)o.push(t[r]);t=o}else for("[object Array]"!==r&&(u=1),r=0;r<t.length&&!u;r++)"number"!=typeof t[r]&&(u=1);if(!u){if(void 0===e)for(r=e=0;r<t.length;r++)for(o=t[r];0<o;)e++,o>>>=1;this.c[c].update([n,this.N++,2,e,a,t.length].concat(t))}break;case"string":void 0===e&&(e=t.length),this.c[c].update([n,this.N++,3,e,a,t.length]),this.c[c].update(t);break;default:u=1}if(u)throw new i.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[c]+=e,this.f+=e,f===this.u&&(this.isReady()!==this.u&&s("seeded",Math.max(this.o,this.f)),s("progress",this.getProgress()))},isReady:function(t){return t=this.T[void 0!==t?t:this.M],this.o&&this.o>=t?this.m[0]>this.ba&&(new Date).valueOf()>this.Z?this.J|this.I:this.I:this.f>=t?this.J|this.u:this.u},getProgress:function(t){return t=this.T[t||this.M],this.o>=t||this.f>t?1:this.f/t},startCollectors:function(){if(!this.D){if(this.a={loadTimeCollector:d(this,this.ma),mouseCollector:d(this,this.oa),keyboardCollector:d(this,this.la),accelerometerCollector:d(this,this.ea),touchCollector:d(this,this.qa)},window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,!1),window.addEventListener("mousemove",this.a.mouseCollector,!1),window.addEventListener("keypress",this.a.keyboardCollector,!1),window.addEventListener("devicemotion",this.a.accelerometerCollector,!1),window.addEventListener("touchmove",this.a.touchCollector,!1);else{if(!document.attachEvent)throw new i.exception.bug("can't attach event");document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector)}this.D=!0}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,!1),window.removeEventListener("mousemove",this.a.mouseCollector,!1),window.removeEventListener("keypress",this.a.keyboardCollector,!1),window.removeEventListener("devicemotion",this.a.accelerometerCollector,!1),window.removeEventListener("touchmove",this.a.touchCollector,!1)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=!1)},addEventListener:function(t,e){this.K[t][this.ga++]=e},removeEventListener:function(t,e){var r,n,i=this.K[t],o=[];for(n in i)i.hasOwnProperty(n)&&i[n]===e&&o.push(n);for(r=0;r<o.length;r++)delete i[n=o[r]]},la:function(){c(this,1)},oa:function(t){var e,r;try{e=t.x||t.clientX||t.offsetX||0,r=t.y||t.clientY||t.offsetY||0}catch(t){r=e=0}0!=e&&0!=r&&this.addEntropy([e,r],2,"mouse"),c(this,0)},qa:function(t){t=t.touches[0]||t.changedTouches[0],this.addEntropy([t.pageX||t.clientX,t.pageY||t.clientY],1,"touch"),c(this,0)},ma:function(){c(this,2)},ea:function(t){if(t=t.accelerationIncludingGravity.x||t.accelerationIncludingGravity.y||t.accelerationIncludingGravity.z,window.orientation){var e=window.orientation;"number"==typeof e&&this.addEntropy(e,1,"accelerometer")}t&&this.addEntropy(t,2,"accelerometer"),c(this,0)}},i.random=new i.prng(6);t:try{var h,l,p,b;if(b=t.exports){var v;try{v=r(Object(function(){var t=new Error("Cannot find module 'crypto'");throw t.code="MODULE_NOT_FOUND",t}()))}catch(t){v=null}b=l=v}if(b&&l.randomBytes)h=l.randomBytes(128),h=new Uint32Array(new Uint8Array(h).buffer),i.random.addEntropy(h,1024,"crypto['randomBytes']");else if("undefined"!=typeof window&&"undefined"!=typeof Uint32Array){if(p=new Uint32Array(32),window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(p);else{if(!window.msCrypto||!window.msCrypto.getRandomValues)break t;window.msCrypto.getRandomValues(p)}i.random.addEntropy(p,1024,"crypto['getRandomValues']")}}catch(t){"undefined"!=typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(t))}i.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(t,e,r,n){r=r||{},n=n||{};var o,a=i.json,s=a.g({iv:i.random.randomWords(4,0)},a.defaults);if(a.g(s,r),r=s.adata,"string"==typeof s.salt&&(s.salt=i.codec.base64.toBits(s.salt)),"string"==typeof s.iv&&(s.iv=i.codec.base64.toBits(s.iv)),!i.mode[s.mode]||!i.cipher[s.cipher]||"string"==typeof t&&100>=s.iter||64!==s.ts&&96!==s.ts&&128!==s.ts||128!==s.ks&&192!==s.ks&&256!==s.ks||2>s.iv.length||4<s.iv.length)throw new i.exception.invalid("json encrypt: invalid parameters");return"string"==typeof t?(t=(o=i.misc.cachedPbkdf2(t,s)).key.slice(0,s.ks/32),s.salt=o.salt):i.ecc&&t instanceof i.ecc.elGamal.publicKey&&(o=t.kem(),s.kemtag=o.tag,t=o.key.slice(0,s.ks/32)),"string"==typeof e&&(e=i.codec.utf8String.toBits(e)),"string"==typeof r&&(s.adata=r=i.codec.utf8String.toBits(r)),o=new i.cipher[s.cipher](t),a.g(n,s),n.key=t,s.ct="ccm"===s.mode&&i.arrayBuffer&&i.arrayBuffer.ccm&&e instanceof ArrayBuffer?i.arrayBuffer.ccm.encrypt(o,e,s.iv,r,s.ts):i.mode[s.mode].encrypt(o,e,s.iv,r,s.ts),s},encrypt:function(t,e,r,n){var o=i.json,a=o.ja.apply(o,arguments);return o.encode(a)},ia:function(t,e,r,n){r=r||{},n=n||{};var o,a,s=i.json;if(o=(e=s.g(s.g(s.g({},s.defaults),e),r,!0)).adata,"string"==typeof e.salt&&(e.salt=i.codec.base64.toBits(e.salt)),"string"==typeof e.iv&&(e.iv=i.codec.base64.toBits(e.iv)),!i.mode[e.mode]||!i.cipher[e.cipher]||"string"==typeof t&&100>=e.iter||64!==e.ts&&96!==e.ts&&128!==e.ts||128!==e.ks&&192!==e.ks&&256!==e.ks||!e.iv||2>e.iv.length||4<e.iv.length)throw new i.exception.invalid("json decrypt: invalid parameters");return"string"==typeof t?(t=(a=i.misc.cachedPbkdf2(t,e)).key.slice(0,e.ks/32),e.salt=a.salt):i.ecc&&t instanceof i.ecc.elGamal.secretKey&&(t=t.unkem(i.codec.base64.toBits(e.kemtag)).slice(0,e.ks/32)),"string"==typeof o&&(o=i.codec.utf8String.toBits(o)),a=new i.cipher[e.cipher](t),o="ccm"===e.mode&&i.arrayBuffer&&i.arrayBuffer.ccm&&e.ct instanceof ArrayBuffer?i.arrayBuffer.ccm.decrypt(a,e.ct,e.iv,e.tag,o,e.ts):i.mode[e.mode].decrypt(a,e.ct,e.iv,o,e.ts),s.g(n,e),n.key=t,1===r.raw?o:i.codec.utf8String.fromBits(o)},decrypt:function(t,e,r,n){var o=i.json;return o.ia(t,o.decode(e),r,n)},encode:function(t){var e,r="{",n="";for(e in t)if(t.hasOwnProperty(e)){if(!e.match(/^[a-z0-9]+$/i))throw new i.exception.invalid("json encode: invalid property name");switch(r+=n+'"'+e+'":',n=",",typeof t[e]){case"number":case"boolean":r+=t[e];break;case"string":r+='"'+escape(t[e])+'"';break;case"object":r+='"'+i.codec.base64.fromBits(t[e],0)+'"';break;default:throw new i.exception.bug("json encode: unsupported type")}}return r+"}"},decode:function(t){if(!(t=t.replace(/\s/g,"")).match(/^\{.*\}$/))throw new i.exception.invalid("json decode: this isn't json!");t=t.replace(/^\{|\}$/g,"").split(/,/);var e,r,n={};for(e=0;e<t.length;e++){if(!(r=t[e].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i)))throw new i.exception.invalid("json decode: this isn't json!");null!=r[3]?n[r[2]]=parseInt(r[3],10):null!=r[4]?n[r[2]]=r[2].match(/^(ct|adata|salt|iv)$/)?i.codec.base64.toBits(r[4]):unescape(r[4]):null!=r[5]&&(n[r[2]]="true"===r[5])}return n},g:function(t,e,r){if(void 0===t&&(t={}),void 0===e)return t;for(var n in e)if(e.hasOwnProperty(n)){if(r&&void 0!==t[n]&&t[n]!==e[n])throw new i.exception.invalid("required parameter overridden");t[n]=e[n]}return t},sa:function(t,e){var r,n={};for(r in t)t.hasOwnProperty(r)&&t[r]!==e[r]&&(n[r]=t[r]);return n},ra:function(t,e){var r,n={};for(r=0;r<e.length;r++)void 0!==t[e[r]]&&(n[e[r]]=t[e[r]]);return n}},i.encrypt=i.json.encrypt,i.decrypt=i.json.decrypt,i.misc.pa={},i.misc.cachedPbkdf2=function(t,e){var r,n=i.misc.pa;return r=(e=e||{}).iter||1e3,(r=(n=n[t]=n[t]||{})[r]=n[r]||{firstSalt:e.salt&&e.salt.length?e.salt.slice(0):i.random.randomWords(2,0)})[n=void 0===e.salt?r.firstSalt:e.salt]=r[n]||i.misc.pbkdf2(t,n,e.iter),{key:r[n].slice(0),salt:n.slice(0)}},t.exports&&(t.exports=i),void 0===(n=function(){return i}.apply(e,[]))||(t.exports=n)},8947:(t,e,r)=>{!function(t){"use strict";var e=function(t){var e,r=new Float64Array(16);if(t)for(e=0;e<t.length;e++)r[e]=t[e];return r},n=function(){throw new Error("no PRNG")},i=new Uint8Array(16),o=new Uint8Array(32);o[0]=9;var a=e(),s=e([1]),c=e([56129,1]),f=e([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=e([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),d=e([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),h=e([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),l=e([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function p(t,e,r,n){t[e]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=255&r,t[e+4]=n>>24&255,t[e+5]=n>>16&255,t[e+6]=n>>8&255,t[e+7]=255&n}function b(t,e,r,n,i){var o,a=0;for(o=0;o<i;o++)a|=t[e+o]^r[n+o];return(1&a-1>>>8)-1}function v(t,e,r,n){return b(t,e,r,n,16)}function y(t,e,r,n){return b(t,e,r,n,32)}function m(t,e,r,n){!function(t,e,r,n){for(var i,o=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,a=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,f=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&e[0]|(255&e[1])<<8|(255&e[2])<<16|(255&e[3])<<24,h=255&e[4]|(255&e[5])<<8|(255&e[6])<<16|(255&e[7])<<24,l=255&e[8]|(255&e[9])<<8|(255&e[10])<<16|(255&e[11])<<24,p=255&e[12]|(255&e[13])<<8|(255&e[14])<<16|(255&e[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,v=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,y=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,m=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,g=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,w=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,_=o,A=a,M=s,S=c,x=f,k=u,E=d,O=h,R=l,P=p,C=b,B=v,I=y,z=m,T=g,N=w,j=0;j<20;j+=2)_^=(i=(I^=(i=(R^=(i=(x^=(i=_+I|0)<<7|i>>>25)+_|0)<<9|i>>>23)+x|0)<<13|i>>>19)+R|0)<<18|i>>>14,k^=(i=(A^=(i=(z^=(i=(P^=(i=k+A|0)<<7|i>>>25)+k|0)<<9|i>>>23)+P|0)<<13|i>>>19)+z|0)<<18|i>>>14,C^=(i=(E^=(i=(M^=(i=(T^=(i=C+E|0)<<7|i>>>25)+C|0)<<9|i>>>23)+T|0)<<13|i>>>19)+M|0)<<18|i>>>14,N^=(i=(B^=(i=(O^=(i=(S^=(i=N+B|0)<<7|i>>>25)+N|0)<<9|i>>>23)+S|0)<<13|i>>>19)+O|0)<<18|i>>>14,_^=(i=(S^=(i=(M^=(i=(A^=(i=_+S|0)<<7|i>>>25)+_|0)<<9|i>>>23)+A|0)<<13|i>>>19)+M|0)<<18|i>>>14,k^=(i=(x^=(i=(O^=(i=(E^=(i=k+x|0)<<7|i>>>25)+k|0)<<9|i>>>23)+E|0)<<13|i>>>19)+O|0)<<18|i>>>14,C^=(i=(P^=(i=(R^=(i=(B^=(i=C+P|0)<<7|i>>>25)+C|0)<<9|i>>>23)+B|0)<<13|i>>>19)+R|0)<<18|i>>>14,N^=(i=(T^=(i=(z^=(i=(I^=(i=N+T|0)<<7|i>>>25)+N|0)<<9|i>>>23)+I|0)<<13|i>>>19)+z|0)<<18|i>>>14;_=_+o|0,A=A+a|0,M=M+s|0,S=S+c|0,x=x+f|0,k=k+u|0,E=E+d|0,O=O+h|0,R=R+l|0,P=P+p|0,C=C+b|0,B=B+v|0,I=I+y|0,z=z+m|0,T=T+g|0,N=N+w|0,t[0]=_>>>0&255,t[1]=_>>>8&255,t[2]=_>>>16&255,t[3]=_>>>24&255,t[4]=A>>>0&255,t[5]=A>>>8&255,t[6]=A>>>16&255,t[7]=A>>>24&255,t[8]=M>>>0&255,t[9]=M>>>8&255,t[10]=M>>>16&255,t[11]=M>>>24&255,t[12]=S>>>0&255,t[13]=S>>>8&255,t[14]=S>>>16&255,t[15]=S>>>24&255,t[16]=x>>>0&255,t[17]=x>>>8&255,t[18]=x>>>16&255,t[19]=x>>>24&255,t[20]=k>>>0&255,t[21]=k>>>8&255,t[22]=k>>>16&255,t[23]=k>>>24&255,t[24]=E>>>0&255,t[25]=E>>>8&255,t[26]=E>>>16&255,t[27]=E>>>24&255,t[28]=O>>>0&255,t[29]=O>>>8&255,t[30]=O>>>16&255,t[31]=O>>>24&255,t[32]=R>>>0&255,t[33]=R>>>8&255,t[34]=R>>>16&255,t[35]=R>>>24&255,t[36]=P>>>0&255,t[37]=P>>>8&255,t[38]=P>>>16&255,t[39]=P>>>24&255,t[40]=C>>>0&255,t[41]=C>>>8&255,t[42]=C>>>16&255,t[43]=C>>>24&255,t[44]=B>>>0&255,t[45]=B>>>8&255,t[46]=B>>>16&255,t[47]=B>>>24&255,t[48]=I>>>0&255,t[49]=I>>>8&255,t[50]=I>>>16&255,t[51]=I>>>24&255,t[52]=z>>>0&255,t[53]=z>>>8&255,t[54]=z>>>16&255,t[55]=z>>>24&255,t[56]=T>>>0&255,t[57]=T>>>8&255,t[58]=T>>>16&255,t[59]=T>>>24&255,t[60]=N>>>0&255,t[61]=N>>>8&255,t[62]=N>>>16&255,t[63]=N>>>24&255}(t,e,r,n)}function g(t,e,r,n){!function(t,e,r,n){for(var i,o=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,a=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,f=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&e[0]|(255&e[1])<<8|(255&e[2])<<16|(255&e[3])<<24,h=255&e[4]|(255&e[5])<<8|(255&e[6])<<16|(255&e[7])<<24,l=255&e[8]|(255&e[9])<<8|(255&e[10])<<16|(255&e[11])<<24,p=255&e[12]|(255&e[13])<<8|(255&e[14])<<16|(255&e[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,v=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,y=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,m=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,g=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,w=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,_=0;_<20;_+=2)o^=(i=(y^=(i=(l^=(i=(f^=(i=o+y|0)<<7|i>>>25)+o|0)<<9|i>>>23)+f|0)<<13|i>>>19)+l|0)<<18|i>>>14,u^=(i=(a^=(i=(m^=(i=(p^=(i=u+a|0)<<7|i>>>25)+u|0)<<9|i>>>23)+p|0)<<13|i>>>19)+m|0)<<18|i>>>14,b^=(i=(d^=(i=(s^=(i=(g^=(i=b+d|0)<<7|i>>>25)+b|0)<<9|i>>>23)+g|0)<<13|i>>>19)+s|0)<<18|i>>>14,w^=(i=(v^=(i=(h^=(i=(c^=(i=w+v|0)<<7|i>>>25)+w|0)<<9|i>>>23)+c|0)<<13|i>>>19)+h|0)<<18|i>>>14,o^=(i=(c^=(i=(s^=(i=(a^=(i=o+c|0)<<7|i>>>25)+o|0)<<9|i>>>23)+a|0)<<13|i>>>19)+s|0)<<18|i>>>14,u^=(i=(f^=(i=(h^=(i=(d^=(i=u+f|0)<<7|i>>>25)+u|0)<<9|i>>>23)+d|0)<<13|i>>>19)+h|0)<<18|i>>>14,b^=(i=(p^=(i=(l^=(i=(v^=(i=b+p|0)<<7|i>>>25)+b|0)<<9|i>>>23)+v|0)<<13|i>>>19)+l|0)<<18|i>>>14,w^=(i=(g^=(i=(m^=(i=(y^=(i=w+g|0)<<7|i>>>25)+w|0)<<9|i>>>23)+y|0)<<13|i>>>19)+m|0)<<18|i>>>14;t[0]=o>>>0&255,t[1]=o>>>8&255,t[2]=o>>>16&255,t[3]=o>>>24&255,t[4]=u>>>0&255,t[5]=u>>>8&255,t[6]=u>>>16&255,t[7]=u>>>24&255,t[8]=b>>>0&255,t[9]=b>>>8&255,t[10]=b>>>16&255,t[11]=b>>>24&255,t[12]=w>>>0&255,t[13]=w>>>8&255,t[14]=w>>>16&255,t[15]=w>>>24&255,t[16]=d>>>0&255,t[17]=d>>>8&255,t[18]=d>>>16&255,t[19]=d>>>24&255,t[20]=h>>>0&255,t[21]=h>>>8&255,t[22]=h>>>16&255,t[23]=h>>>24&255,t[24]=l>>>0&255,t[25]=l>>>8&255,t[26]=l>>>16&255,t[27]=l>>>24&255,t[28]=p>>>0&255,t[29]=p>>>8&255,t[30]=p>>>16&255,t[31]=p>>>24&255}(t,e,r,n)}var w=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function _(t,e,r,n,i,o,a){var s,c,f=new Uint8Array(16),u=new Uint8Array(64);for(c=0;c<16;c++)f[c]=0;for(c=0;c<8;c++)f[c]=o[c];for(;i>=64;){for(m(u,f,a,w),c=0;c<64;c++)t[e+c]=r[n+c]^u[c];for(s=1,c=8;c<16;c++)s=s+(255&f[c])|0,f[c]=255&s,s>>>=8;i-=64,e+=64,n+=64}if(i>0)for(m(u,f,a,w),c=0;c<i;c++)t[e+c]=r[n+c]^u[c];return 0}function A(t,e,r,n,i){var o,a,s=new Uint8Array(16),c=new Uint8Array(64);for(a=0;a<16;a++)s[a]=0;for(a=0;a<8;a++)s[a]=n[a];for(;r>=64;){for(m(c,s,i,w),a=0;a<64;a++)t[e+a]=c[a];for(o=1,a=8;a<16;a++)o=o+(255&s[a])|0,s[a]=255&o,o>>>=8;r-=64,e+=64}if(r>0)for(m(c,s,i,w),a=0;a<r;a++)t[e+a]=c[a];return 0}function M(t,e,r,n,i){var o=new Uint8Array(32);g(o,n,i,w);for(var a=new Uint8Array(8),s=0;s<8;s++)a[s]=n[s+16];return A(t,e,r,a,o)}function S(t,e,r,n,i,o,a){var s=new Uint8Array(32);g(s,o,a,w);for(var c=new Uint8Array(8),f=0;f<8;f++)c[f]=o[f+16];return _(t,e,r,n,i,c,s)}var x=function(t){var e,r,n,i,o,a,s,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,e=255&t[0]|(255&t[1])<<8,this.r[0]=8191&e,r=255&t[2]|(255&t[3])<<8,this.r[1]=8191&(e>>>13|r<<3),n=255&t[4]|(255&t[5])<<8,this.r[2]=7939&(r>>>10|n<<6),i=255&t[6]|(255&t[7])<<8,this.r[3]=8191&(n>>>7|i<<9),o=255&t[8]|(255&t[9])<<8,this.r[4]=255&(i>>>4|o<<12),this.r[5]=o>>>1&8190,a=255&t[10]|(255&t[11])<<8,this.r[6]=8191&(o>>>14|a<<2),s=255&t[12]|(255&t[13])<<8,this.r[7]=8065&(a>>>11|s<<5),c=255&t[14]|(255&t[15])<<8,this.r[8]=8191&(s>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&t[16]|(255&t[17])<<8,this.pad[1]=255&t[18]|(255&t[19])<<8,this.pad[2]=255&t[20]|(255&t[21])<<8,this.pad[3]=255&t[22]|(255&t[23])<<8,this.pad[4]=255&t[24]|(255&t[25])<<8,this.pad[5]=255&t[26]|(255&t[27])<<8,this.pad[6]=255&t[28]|(255&t[29])<<8,this.pad[7]=255&t[30]|(255&t[31])<<8};function k(t,e,r,n,i,o){var a=new x(o);return a.update(r,n,i),a.finish(t,e),0}function E(t,e,r,n,i,o){var a=new Uint8Array(16);return k(a,0,r,n,i,o),v(t,e,a,0)}function O(t,e,r,n,i){var o;if(r<32)return-1;for(S(t,0,e,0,r,n,i),k(t,16,t,32,r-32,t),o=0;o<16;o++)t[o]=0;return 0}function R(t,e,r,n,i){var o,a=new Uint8Array(32);if(r<32)return-1;if(M(a,0,32,n,i),0!==E(e,16,e,32,r-32,a))return-1;for(S(t,0,e,0,r,n,i),o=0;o<32;o++)t[o]=0;return 0}function P(t,e){var r;for(r=0;r<16;r++)t[r]=0|e[r]}function C(t){var e,r,n=1;for(e=0;e<16;e++)r=t[e]+n+65535,n=Math.floor(r/65536),t[e]=r-65536*n;t[0]+=n-1+37*(n-1)}function B(t,e,r){for(var n,i=~(r-1),o=0;o<16;o++)n=i&(t[o]^e[o]),t[o]^=n,e[o]^=n}function I(t,r){var n,i,o,a=e(),s=e();for(n=0;n<16;n++)s[n]=r[n];for(C(s),C(s),C(s),i=0;i<2;i++){for(a[0]=s[0]-65517,n=1;n<15;n++)a[n]=s[n]-65535-(a[n-1]>>16&1),a[n-1]&=65535;a[15]=s[15]-32767-(a[14]>>16&1),o=a[15]>>16&1,a[14]&=65535,B(s,a,1-o)}for(n=0;n<16;n++)t[2*n]=255&s[n],t[2*n+1]=s[n]>>8}function z(t,e){var r=new Uint8Array(32),n=new Uint8Array(32);return I(r,t),I(n,e),y(r,0,n,0)}function T(t){var e=new Uint8Array(32);return I(e,t),1&e[0]}function N(t,e){var r;for(r=0;r<16;r++)t[r]=e[2*r]+(e[2*r+1]<<8);t[15]&=32767}function j(t,e,r){for(var n=0;n<16;n++)t[n]=e[n]+r[n]}function L(t,e,r){for(var n=0;n<16;n++)t[n]=e[n]-r[n]}function q(t,e,r){var n,i,o=0,a=0,s=0,c=0,f=0,u=0,d=0,h=0,l=0,p=0,b=0,v=0,y=0,m=0,g=0,w=0,_=0,A=0,M=0,S=0,x=0,k=0,E=0,O=0,R=0,P=0,C=0,B=0,I=0,z=0,T=0,N=r[0],j=r[1],L=r[2],q=r[3],F=r[4],U=r[5],D=r[6],H=r[7],J=r[8],W=r[9],K=r[10],G=r[11],V=r[12],X=r[13],Y=r[14],Z=r[15];o+=(n=e[0])*N,a+=n*j,s+=n*L,c+=n*q,f+=n*F,u+=n*U,d+=n*D,h+=n*H,l+=n*J,p+=n*W,b+=n*K,v+=n*G,y+=n*V,m+=n*X,g+=n*Y,w+=n*Z,a+=(n=e[1])*N,s+=n*j,c+=n*L,f+=n*q,u+=n*F,d+=n*U,h+=n*D,l+=n*H,p+=n*J,b+=n*W,v+=n*K,y+=n*G,m+=n*V,g+=n*X,w+=n*Y,_+=n*Z,s+=(n=e[2])*N,c+=n*j,f+=n*L,u+=n*q,d+=n*F,h+=n*U,l+=n*D,p+=n*H,b+=n*J,v+=n*W,y+=n*K,m+=n*G,g+=n*V,w+=n*X,_+=n*Y,A+=n*Z,c+=(n=e[3])*N,f+=n*j,u+=n*L,d+=n*q,h+=n*F,l+=n*U,p+=n*D,b+=n*H,v+=n*J,y+=n*W,m+=n*K,g+=n*G,w+=n*V,_+=n*X,A+=n*Y,M+=n*Z,f+=(n=e[4])*N,u+=n*j,d+=n*L,h+=n*q,l+=n*F,p+=n*U,b+=n*D,v+=n*H,y+=n*J,m+=n*W,g+=n*K,w+=n*G,_+=n*V,A+=n*X,M+=n*Y,S+=n*Z,u+=(n=e[5])*N,d+=n*j,h+=n*L,l+=n*q,p+=n*F,b+=n*U,v+=n*D,y+=n*H,m+=n*J,g+=n*W,w+=n*K,_+=n*G,A+=n*V,M+=n*X,S+=n*Y,x+=n*Z,d+=(n=e[6])*N,h+=n*j,l+=n*L,p+=n*q,b+=n*F,v+=n*U,y+=n*D,m+=n*H,g+=n*J,w+=n*W,_+=n*K,A+=n*G,M+=n*V,S+=n*X,x+=n*Y,k+=n*Z,h+=(n=e[7])*N,l+=n*j,p+=n*L,b+=n*q,v+=n*F,y+=n*U,m+=n*D,g+=n*H,w+=n*J,_+=n*W,A+=n*K,M+=n*G,S+=n*V,x+=n*X,k+=n*Y,E+=n*Z,l+=(n=e[8])*N,p+=n*j,b+=n*L,v+=n*q,y+=n*F,m+=n*U,g+=n*D,w+=n*H,_+=n*J,A+=n*W,M+=n*K,S+=n*G,x+=n*V,k+=n*X,E+=n*Y,O+=n*Z,p+=(n=e[9])*N,b+=n*j,v+=n*L,y+=n*q,m+=n*F,g+=n*U,w+=n*D,_+=n*H,A+=n*J,M+=n*W,S+=n*K,x+=n*G,k+=n*V,E+=n*X,O+=n*Y,R+=n*Z,b+=(n=e[10])*N,v+=n*j,y+=n*L,m+=n*q,g+=n*F,w+=n*U,_+=n*D,A+=n*H,M+=n*J,S+=n*W,x+=n*K,k+=n*G,E+=n*V,O+=n*X,R+=n*Y,P+=n*Z,v+=(n=e[11])*N,y+=n*j,m+=n*L,g+=n*q,w+=n*F,_+=n*U,A+=n*D,M+=n*H,S+=n*J,x+=n*W,k+=n*K,E+=n*G,O+=n*V,R+=n*X,P+=n*Y,C+=n*Z,y+=(n=e[12])*N,m+=n*j,g+=n*L,w+=n*q,_+=n*F,A+=n*U,M+=n*D,S+=n*H,x+=n*J,k+=n*W,E+=n*K,O+=n*G,R+=n*V,P+=n*X,C+=n*Y,B+=n*Z,m+=(n=e[13])*N,g+=n*j,w+=n*L,_+=n*q,A+=n*F,M+=n*U,S+=n*D,x+=n*H,k+=n*J,E+=n*W,O+=n*K,R+=n*G,P+=n*V,C+=n*X,B+=n*Y,I+=n*Z,g+=(n=e[14])*N,w+=n*j,_+=n*L,A+=n*q,M+=n*F,S+=n*U,x+=n*D,k+=n*H,E+=n*J,O+=n*W,R+=n*K,P+=n*G,C+=n*V,B+=n*X,I+=n*Y,z+=n*Z,w+=(n=e[15])*N,a+=38*(A+=n*L),s+=38*(M+=n*q),c+=38*(S+=n*F),f+=38*(x+=n*U),u+=38*(k+=n*D),d+=38*(E+=n*H),h+=38*(O+=n*J),l+=38*(R+=n*W),p+=38*(P+=n*K),b+=38*(C+=n*G),v+=38*(B+=n*V),y+=38*(I+=n*X),m+=38*(z+=n*Y),g+=38*(T+=n*Z),o=(n=(o+=38*(_+=n*j))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),a=(n=a+i+65535)-65536*(i=Math.floor(n/65536)),s=(n=s+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),w=(n=w+i+65535)-65536*(i=Math.floor(n/65536)),o=(n=(o+=i-1+37*(i-1))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),a=(n=a+i+65535)-65536*(i=Math.floor(n/65536)),s=(n=s+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),w=(n=w+i+65535)-65536*(i=Math.floor(n/65536)),o+=i-1+37*(i-1),t[0]=o,t[1]=a,t[2]=s,t[3]=c,t[4]=f,t[5]=u,t[6]=d,t[7]=h,t[8]=l,t[9]=p,t[10]=b,t[11]=v,t[12]=y,t[13]=m,t[14]=g,t[15]=w}function F(t,e){q(t,e,e)}function U(t,r){var n,i=e();for(n=0;n<16;n++)i[n]=r[n];for(n=253;n>=0;n--)F(i,i),2!==n&&4!==n&&q(i,i,r);for(n=0;n<16;n++)t[n]=i[n]}function D(t,r){var n,i=e();for(n=0;n<16;n++)i[n]=r[n];for(n=250;n>=0;n--)F(i,i),1!==n&&q(i,i,r);for(n=0;n<16;n++)t[n]=i[n]}function H(t,r,n){var i,o,a=new Uint8Array(32),s=new Float64Array(80),f=e(),u=e(),d=e(),h=e(),l=e(),p=e();for(o=0;o<31;o++)a[o]=r[o];for(a[31]=127&r[31]|64,a[0]&=248,N(s,n),o=0;o<16;o++)u[o]=s[o],h[o]=f[o]=d[o]=0;for(f[0]=h[0]=1,o=254;o>=0;--o)B(f,u,i=a[o>>>3]>>>(7&o)&1),B(d,h,i),j(l,f,d),L(f,f,d),j(d,u,h),L(u,u,h),F(h,l),F(p,f),q(f,d,f),q(d,u,l),j(l,f,d),L(f,f,d),F(u,f),L(d,h,p),q(f,d,c),j(f,f,h),q(d,d,f),q(f,h,p),q(h,u,s),F(u,l),B(f,u,i),B(d,h,i);for(o=0;o<16;o++)s[o+16]=f[o],s[o+32]=d[o],s[o+48]=u[o],s[o+64]=h[o];var b=s.subarray(32),v=s.subarray(16);return U(b,b),q(v,v,b),I(t,v),0}function J(t,e){return H(t,e,o)}function W(t,e){return n(e,32),J(t,e)}function K(t,e,r){var n=new Uint8Array(32);return H(n,r,e),g(t,i,n,w)}x.prototype.blocks=function(t,e,r){for(var n,i,o,a,s,c,f,u,d,h,l,p,b,v,y,m,g,w,_,A=this.fin?0:2048,M=this.h[0],S=this.h[1],x=this.h[2],k=this.h[3],E=this.h[4],O=this.h[5],R=this.h[6],P=this.h[7],C=this.h[8],B=this.h[9],I=this.r[0],z=this.r[1],T=this.r[2],N=this.r[3],j=this.r[4],L=this.r[5],q=this.r[6],F=this.r[7],U=this.r[8],D=this.r[9];r>=16;)h=d=0,h+=(M+=8191&(n=255&t[e+0]|(255&t[e+1])<<8))*I,h+=(S+=8191&(n>>>13|(i=255&t[e+2]|(255&t[e+3])<<8)<<3))*(5*D),h+=(x+=8191&(i>>>10|(o=255&t[e+4]|(255&t[e+5])<<8)<<6))*(5*U),h+=(k+=8191&(o>>>7|(a=255&t[e+6]|(255&t[e+7])<<8)<<9))*(5*F),d=(h+=(E+=8191&(a>>>4|(s=255&t[e+8]|(255&t[e+9])<<8)<<12))*(5*q))>>>13,h&=8191,h+=(O+=s>>>1&8191)*(5*L),h+=(R+=8191&(s>>>14|(c=255&t[e+10]|(255&t[e+11])<<8)<<2))*(5*j),h+=(P+=8191&(c>>>11|(f=255&t[e+12]|(255&t[e+13])<<8)<<5))*(5*N),h+=(C+=8191&(f>>>8|(u=255&t[e+14]|(255&t[e+15])<<8)<<8))*(5*T),l=d+=(h+=(B+=u>>>5|A)*(5*z))>>>13,l+=M*z,l+=S*I,l+=x*(5*D),l+=k*(5*U),d=(l+=E*(5*F))>>>13,l&=8191,l+=O*(5*q),l+=R*(5*L),l+=P*(5*j),l+=C*(5*N),d+=(l+=B*(5*T))>>>13,l&=8191,p=d,p+=M*T,p+=S*z,p+=x*I,p+=k*(5*D),d=(p+=E*(5*U))>>>13,p&=8191,p+=O*(5*F),p+=R*(5*q),p+=P*(5*L),p+=C*(5*j),b=d+=(p+=B*(5*N))>>>13,b+=M*N,b+=S*T,b+=x*z,b+=k*I,d=(b+=E*(5*D))>>>13,b&=8191,b+=O*(5*U),b+=R*(5*F),b+=P*(5*q),b+=C*(5*L),v=d+=(b+=B*(5*j))>>>13,v+=M*j,v+=S*N,v+=x*T,v+=k*z,d=(v+=E*I)>>>13,v&=8191,v+=O*(5*D),v+=R*(5*U),v+=P*(5*F),v+=C*(5*q),y=d+=(v+=B*(5*L))>>>13,y+=M*L,y+=S*j,y+=x*N,y+=k*T,d=(y+=E*z)>>>13,y&=8191,y+=O*I,y+=R*(5*D),y+=P*(5*U),y+=C*(5*F),m=d+=(y+=B*(5*q))>>>13,m+=M*q,m+=S*L,m+=x*j,m+=k*N,d=(m+=E*T)>>>13,m&=8191,m+=O*z,m+=R*I,m+=P*(5*D),m+=C*(5*U),g=d+=(m+=B*(5*F))>>>13,g+=M*F,g+=S*q,g+=x*L,g+=k*j,d=(g+=E*N)>>>13,g&=8191,g+=O*T,g+=R*z,g+=P*I,g+=C*(5*D),w=d+=(g+=B*(5*U))>>>13,w+=M*U,w+=S*F,w+=x*q,w+=k*L,d=(w+=E*j)>>>13,w&=8191,w+=O*N,w+=R*T,w+=P*z,w+=C*I,_=d+=(w+=B*(5*D))>>>13,_+=M*D,_+=S*U,_+=x*F,_+=k*q,d=(_+=E*L)>>>13,_&=8191,_+=O*j,_+=R*N,_+=P*T,_+=C*z,M=h=8191&(d=(d=((d+=(_+=B*I)>>>13)<<2)+d|0)+(h&=8191)|0),S=l+=d>>>=13,x=p&=8191,k=b&=8191,E=v&=8191,O=y&=8191,R=m&=8191,P=g&=8191,C=w&=8191,B=_&=8191,e+=16,r-=16;this.h[0]=M,this.h[1]=S,this.h[2]=x,this.h[3]=k,this.h[4]=E,this.h[5]=O,this.h[6]=R,this.h[7]=P,this.h[8]=C,this.h[9]=B},x.prototype.finish=function(t,e){var r,n,i,o,a=new Uint16Array(10);if(this.leftover){for(o=this.leftover,this.buffer[o++]=1;o<16;o++)this.buffer[o]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,o=2;o<10;o++)this.h[o]+=r,r=this.h[o]>>>13,this.h[o]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,a[0]=this.h[0]+5,r=a[0]>>>13,a[0]&=8191,o=1;o<10;o++)a[o]=this.h[o]+r,r=a[o]>>>13,a[o]&=8191;for(a[9]-=8192,n=(1^r)-1,o=0;o<10;o++)a[o]&=n;for(n=~n,o=0;o<10;o++)this.h[o]=this.h[o]&n|a[o];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),i=this.h[0]+this.pad[0],this.h[0]=65535&i,o=1;o<8;o++)i=(this.h[o]+this.pad[o]|0)+(i>>>16)|0,this.h[o]=65535&i;t[e+0]=this.h[0]>>>0&255,t[e+1]=this.h[0]>>>8&255,t[e+2]=this.h[1]>>>0&255,t[e+3]=this.h[1]>>>8&255,t[e+4]=this.h[2]>>>0&255,t[e+5]=this.h[2]>>>8&255,t[e+6]=this.h[3]>>>0&255,t[e+7]=this.h[3]>>>8&255,t[e+8]=this.h[4]>>>0&255,t[e+9]=this.h[4]>>>8&255,t[e+10]=this.h[5]>>>0&255,t[e+11]=this.h[5]>>>8&255,t[e+12]=this.h[6]>>>0&255,t[e+13]=this.h[6]>>>8&255,t[e+14]=this.h[7]>>>0&255,t[e+15]=this.h[7]>>>8&255},x.prototype.update=function(t,e,r){var n,i;if(this.leftover){for((i=16-this.leftover)>r&&(i=r),n=0;n<i;n++)this.buffer[this.leftover+n]=t[e+n];if(r-=i,e+=i,this.leftover+=i,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(i=r-r%16,this.blocks(t,e,i),e+=i,r-=i),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=t[e+n];this.leftover+=r}};var G=O,V=R,X=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function Y(t,e,r,n){for(var i,o,a,s,c,f,u,d,h,l,p,b,v,y,m,g,w,_,A,M,S,x,k,E,O,R,P=new Int32Array(16),C=new Int32Array(16),B=t[0],I=t[1],z=t[2],T=t[3],N=t[4],j=t[5],L=t[6],q=t[7],F=e[0],U=e[1],D=e[2],H=e[3],J=e[4],W=e[5],K=e[6],G=e[7],V=0;n>=128;){for(A=0;A<16;A++)M=8*A+V,P[A]=r[M+0]<<24|r[M+1]<<16|r[M+2]<<8|r[M+3],C[A]=r[M+4]<<24|r[M+5]<<16|r[M+6]<<8|r[M+7];for(A=0;A<80;A++)if(i=B,o=I,a=z,s=T,c=N,f=j,u=L,h=F,l=U,p=D,b=H,v=J,y=W,m=K,k=65535&(x=G),E=x>>>16,O=65535&(S=q),R=S>>>16,k+=65535&(x=(J>>>14|N<<18)^(J>>>18|N<<14)^(N>>>9|J<<23)),E+=x>>>16,O+=65535&(S=(N>>>14|J<<18)^(N>>>18|J<<14)^(J>>>9|N<<23)),R+=S>>>16,k+=65535&(x=J&W^~J&K),E+=x>>>16,O+=65535&(S=N&j^~N&L),R+=S>>>16,S=X[2*A],k+=65535&(x=X[2*A+1]),E+=x>>>16,O+=65535&S,R+=S>>>16,S=P[A%16],E+=(x=C[A%16])>>>16,O+=65535&S,R+=S>>>16,O+=(E+=(k+=65535&x)>>>16)>>>16,k=65535&(x=_=65535&k|E<<16),E=x>>>16,O=65535&(S=w=65535&O|(R+=O>>>16)<<16),R=S>>>16,k+=65535&(x=(F>>>28|B<<4)^(B>>>2|F<<30)^(B>>>7|F<<25)),E+=x>>>16,O+=65535&(S=(B>>>28|F<<4)^(F>>>2|B<<30)^(F>>>7|B<<25)),R+=S>>>16,E+=(x=F&U^F&D^U&D)>>>16,O+=65535&(S=B&I^B&z^I&z),R+=S>>>16,d=65535&(O+=(E+=(k+=65535&x)>>>16)>>>16)|(R+=O>>>16)<<16,g=65535&k|E<<16,k=65535&(x=b),E=x>>>16,O=65535&(S=s),R=S>>>16,E+=(x=_)>>>16,O+=65535&(S=w),R+=S>>>16,I=i,z=o,T=a,N=s=65535&(O+=(E+=(k+=65535&x)>>>16)>>>16)|(R+=O>>>16)<<16,j=c,L=f,q=u,B=d,U=h,D=l,H=p,J=b=65535&k|E<<16,W=v,K=y,G=m,F=g,A%16==15)for(M=0;M<16;M++)S=P[M],k=65535&(x=C[M]),E=x>>>16,O=65535&S,R=S>>>16,S=P[(M+9)%16],k+=65535&(x=C[(M+9)%16]),E+=x>>>16,O+=65535&S,R+=S>>>16,w=P[(M+1)%16],k+=65535&(x=((_=C[(M+1)%16])>>>1|w<<31)^(_>>>8|w<<24)^(_>>>7|w<<25)),E+=x>>>16,O+=65535&(S=(w>>>1|_<<31)^(w>>>8|_<<24)^w>>>7),R+=S>>>16,w=P[(M+14)%16],E+=(x=((_=C[(M+14)%16])>>>19|w<<13)^(w>>>29|_<<3)^(_>>>6|w<<26))>>>16,O+=65535&(S=(w>>>19|_<<13)^(_>>>29|w<<3)^w>>>6),R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,P[M]=65535&O|R<<16,C[M]=65535&k|E<<16;k=65535&(x=F),E=x>>>16,O=65535&(S=B),R=S>>>16,S=t[0],E+=(x=e[0])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[0]=B=65535&O|R<<16,e[0]=F=65535&k|E<<16,k=65535&(x=U),E=x>>>16,O=65535&(S=I),R=S>>>16,S=t[1],E+=(x=e[1])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[1]=I=65535&O|R<<16,e[1]=U=65535&k|E<<16,k=65535&(x=D),E=x>>>16,O=65535&(S=z),R=S>>>16,S=t[2],E+=(x=e[2])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[2]=z=65535&O|R<<16,e[2]=D=65535&k|E<<16,k=65535&(x=H),E=x>>>16,O=65535&(S=T),R=S>>>16,S=t[3],E+=(x=e[3])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[3]=T=65535&O|R<<16,e[3]=H=65535&k|E<<16,k=65535&(x=J),E=x>>>16,O=65535&(S=N),R=S>>>16,S=t[4],E+=(x=e[4])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[4]=N=65535&O|R<<16,e[4]=J=65535&k|E<<16,k=65535&(x=W),E=x>>>16,O=65535&(S=j),R=S>>>16,S=t[5],E+=(x=e[5])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[5]=j=65535&O|R<<16,e[5]=W=65535&k|E<<16,k=65535&(x=K),E=x>>>16,O=65535&(S=L),R=S>>>16,S=t[6],E+=(x=e[6])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[6]=L=65535&O|R<<16,e[6]=K=65535&k|E<<16,k=65535&(x=G),E=x>>>16,O=65535&(S=q),R=S>>>16,S=t[7],E+=(x=e[7])>>>16,O+=65535&S,R+=S>>>16,R+=(O+=(E+=(k+=65535&x)>>>16)>>>16)>>>16,t[7]=q=65535&O|R<<16,e[7]=G=65535&k|E<<16,V+=128,n-=128}return n}function Z(t,e,r){var n,i=new Int32Array(8),o=new Int32Array(8),a=new Uint8Array(256),s=r;for(i[0]=1779033703,i[1]=3144134277,i[2]=1013904242,i[3]=2773480762,i[4]=1359893119,i[5]=2600822924,i[6]=528734635,i[7]=1541459225,o[0]=4089235720,o[1]=2227873595,o[2]=4271175723,o[3]=1595750129,o[4]=2917565137,o[5]=725511199,o[6]=4215389547,o[7]=327033209,Y(i,o,e,r),r%=128,n=0;n<r;n++)a[n]=e[s-r+n];for(a[r]=128,a[(r=256-128*(r<112?1:0))-9]=0,p(a,r-8,s/536870912|0,s<<3),Y(i,o,a,r),n=0;n<8;n++)p(t,8*n,i[n],o[n]);return 0}function $(t,r){var n=e(),i=e(),o=e(),a=e(),s=e(),c=e(),f=e(),d=e(),h=e();L(n,t[1],t[0]),L(h,r[1],r[0]),q(n,n,h),j(i,t[0],t[1]),j(h,r[0],r[1]),q(i,i,h),q(o,t[3],r[3]),q(o,o,u),q(a,t[2],r[2]),j(a,a,a),L(s,i,n),L(c,a,o),j(f,a,o),j(d,i,n),q(t[0],s,c),q(t[1],d,f),q(t[2],f,c),q(t[3],s,d)}function Q(t,e,r){var n;for(n=0;n<4;n++)B(t[n],e[n],r)}function tt(t,r){var n=e(),i=e(),o=e();U(o,r[2]),q(n,r[0],o),q(i,r[1],o),I(t,i),t[31]^=T(n)<<7}function et(t,e,r){var n,i;for(P(t[0],a),P(t[1],s),P(t[2],s),P(t[3],a),i=255;i>=0;--i)Q(t,e,n=r[i/8|0]>>(7&i)&1),$(e,t),$(t,t),Q(t,e,n)}function rt(t,r){var n=[e(),e(),e(),e()];P(n[0],d),P(n[1],h),P(n[2],s),q(n[3],d,h),et(t,n,r)}function nt(t,r,i){var o,a=new Uint8Array(64),s=[e(),e(),e(),e()];for(i||n(r,32),Z(a,r,32),a[0]&=248,a[31]&=127,a[31]|=64,rt(s,a),tt(t,s),o=0;o<32;o++)r[o+32]=t[o];return 0}var it=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ot(t,e){var r,n,i,o;for(n=63;n>=32;--n){for(r=0,i=n-32,o=n-12;i<o;++i)e[i]+=r-16*e[n]*it[i-(n-32)],r=Math.floor((e[i]+128)/256),e[i]-=256*r;e[i]+=r,e[n]=0}for(r=0,i=0;i<32;i++)e[i]+=r-(e[31]>>4)*it[i],r=e[i]>>8,e[i]&=255;for(i=0;i<32;i++)e[i]-=r*it[i];for(n=0;n<32;n++)e[n+1]+=e[n]>>8,t[n]=255&e[n]}function at(t){var e,r=new Float64Array(64);for(e=0;e<64;e++)r[e]=t[e];for(e=0;e<64;e++)t[e]=0;ot(t,r)}function st(t,r,n,i){var o,a,s=new Uint8Array(64),c=new Uint8Array(64),f=new Uint8Array(64),u=new Float64Array(64),d=[e(),e(),e(),e()];Z(s,i,32),s[0]&=248,s[31]&=127,s[31]|=64;var h=n+64;for(o=0;o<n;o++)t[64+o]=r[o];for(o=0;o<32;o++)t[32+o]=s[32+o];for(Z(f,t.subarray(32),n+32),at(f),rt(d,f),tt(t,d),o=32;o<64;o++)t[o]=i[o];for(Z(c,t,n+64),at(c),o=0;o<64;o++)u[o]=0;for(o=0;o<32;o++)u[o]=f[o];for(o=0;o<32;o++)for(a=0;a<32;a++)u[o+a]+=c[o]*s[a];return ot(t.subarray(32),u),h}function ct(t,r,n,i){var o,c=new Uint8Array(32),u=new Uint8Array(64),d=[e(),e(),e(),e()],h=[e(),e(),e(),e()];if(n<64)return-1;if(function(t,r){var n=e(),i=e(),o=e(),c=e(),u=e(),d=e(),h=e();return P(t[2],s),N(t[1],r),F(o,t[1]),q(c,o,f),L(o,o,t[2]),j(c,t[2],c),F(u,c),F(d,u),q(h,d,u),q(n,h,o),q(n,n,c),D(n,n),q(n,n,o),q(n,n,c),q(n,n,c),q(t[0],n,c),F(i,t[0]),q(i,i,c),z(i,o)&&q(t[0],t[0],l),F(i,t[0]),q(i,i,c),z(i,o)?-1:(T(t[0])===r[31]>>7&&L(t[0],a,t[0]),q(t[3],t[0],t[1]),0)}(h,i))return-1;for(o=0;o<n;o++)t[o]=r[o];for(o=0;o<32;o++)t[o+32]=i[o];if(Z(u,t,n),at(u),et(d,h,u),rt(h,r.subarray(32)),$(d,h),tt(c,d),n-=64,y(r,0,c,0)){for(o=0;o<n;o++)t[o]=0;return-1}for(o=0;o<n;o++)t[o]=r[o+64];return n}var ft,ut=64,dt=32,ht=64;function lt(t,e){if(32!==t.length)throw new Error("bad key size");if(24!==e.length)throw new Error("bad nonce size")}function pt(){for(var t=0;t<arguments.length;t++)if(!(arguments[t]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function bt(t){for(var e=0;e<t.length;e++)t[e]=0}t.lowlevel={crypto_core_hsalsa20:g,crypto_stream_xor:S,crypto_stream:M,crypto_stream_salsa20_xor:_,crypto_stream_salsa20:A,crypto_onetimeauth:k,crypto_onetimeauth_verify:E,crypto_verify_16:v,crypto_verify_32:y,crypto_secretbox:O,crypto_secretbox_open:R,crypto_scalarmult:H,crypto_scalarmult_base:J,crypto_box_beforenm:K,crypto_box_afternm:G,crypto_box:function(t,e,r,n,i,o){var a=new Uint8Array(32);return K(a,i,o),G(t,e,r,n,a)},crypto_box_open:function(t,e,r,n,i,o){var a=new Uint8Array(32);return K(a,i,o),V(t,e,r,n,a)},crypto_box_keypair:W,crypto_hash:Z,crypto_sign:st,crypto_sign_keypair:nt,crypto_sign_open:ct,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:ut,crypto_sign_PUBLICKEYBYTES:dt,crypto_sign_SECRETKEYBYTES:ht,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:e,D:f,L:it,pack25519:I,unpack25519:N,M:q,A:j,S:F,Z:L,pow2523:D,add:$,set25519:P,modL:ot,scalarmult:et,scalarbase:rt},t.randomBytes=function(t){var e=new Uint8Array(t);return n(e,t),e},t.secretbox=function(t,e,r){pt(t,e,r),lt(r,e);for(var n=new Uint8Array(32+t.length),i=new Uint8Array(n.length),o=0;o<t.length;o++)n[o+32]=t[o];return O(i,n,n.length,e,r),i.subarray(16)},t.secretbox.open=function(t,e,r){pt(t,e,r),lt(r,e);for(var n=new Uint8Array(16+t.length),i=new Uint8Array(n.length),o=0;o<t.length;o++)n[o+16]=t[o];return n.length<32||0!==R(i,n,n.length,e,r)?null:i.subarray(32)},t.secretbox.keyLength=32,t.secretbox.nonceLength=24,t.secretbox.overheadLength=16,t.scalarMult=function(t,e){if(pt(t,e),32!==t.length)throw new Error("bad n size");if(32!==e.length)throw new Error("bad p size");var r=new Uint8Array(32);return H(r,t,e),r},t.scalarMult.base=function(t){if(pt(t),32!==t.length)throw new Error("bad n size");var e=new Uint8Array(32);return J(e,t),e},t.scalarMult.scalarLength=32,t.scalarMult.groupElementLength=32,t.box=function(e,r,n,i){var o=t.box.before(n,i);return t.secretbox(e,r,o)},t.box.before=function(t,e){pt(t,e),function(t,e){if(32!==t.length)throw new Error("bad public key size");if(32!==e.length)throw new Error("bad secret key size")}(t,e);var r=new Uint8Array(32);return K(r,t,e),r},t.box.after=t.secretbox,t.box.open=function(e,r,n,i){var o=t.box.before(n,i);return t.secretbox.open(e,r,o)},t.box.open.after=t.secretbox.open,t.box.keyPair=function(){var t=new Uint8Array(32),e=new Uint8Array(32);return W(t,e),{publicKey:t,secretKey:e}},t.box.keyPair.fromSecretKey=function(t){if(pt(t),32!==t.length)throw new Error("bad secret key size");var e=new Uint8Array(32);return J(e,t),{publicKey:e,secretKey:new Uint8Array(t)}},t.box.publicKeyLength=32,t.box.secretKeyLength=32,t.box.sharedKeyLength=32,t.box.nonceLength=24,t.box.overheadLength=t.secretbox.overheadLength,t.sign=function(t,e){if(pt(t,e),e.length!==ht)throw new Error("bad secret key size");var r=new Uint8Array(ut+t.length);return st(r,t,t.length,e),r},t.sign.open=function(t,e){if(pt(t,e),e.length!==dt)throw new Error("bad public key size");var r=new Uint8Array(t.length),n=ct(r,t,t.length,e);if(n<0)return null;for(var i=new Uint8Array(n),o=0;o<i.length;o++)i[o]=r[o];return i},t.sign.detached=function(e,r){for(var n=t.sign(e,r),i=new Uint8Array(ut),o=0;o<i.length;o++)i[o]=n[o];return i},t.sign.detached.verify=function(t,e,r){if(pt(t,e,r),e.length!==ut)throw new Error("bad signature size");if(r.length!==dt)throw new Error("bad public key size");var n,i=new Uint8Array(ut+t.length),o=new Uint8Array(ut+t.length);for(n=0;n<ut;n++)i[n]=e[n];for(n=0;n<t.length;n++)i[n+ut]=t[n];return ct(o,i,i.length,r)>=0},t.sign.keyPair=function(){var t=new Uint8Array(dt),e=new Uint8Array(ht);return nt(t,e),{publicKey:t,secretKey:e}},t.sign.keyPair.fromSecretKey=function(t){if(pt(t),t.length!==ht)throw new Error("bad secret key size");for(var e=new Uint8Array(dt),r=0;r<e.length;r++)e[r]=t[32+r];return{publicKey:e,secretKey:new Uint8Array(t)}},t.sign.keyPair.fromSeed=function(t){if(pt(t),32!==t.length)throw new Error("bad seed size");for(var e=new Uint8Array(dt),r=new Uint8Array(ht),n=0;n<32;n++)r[n]=t[n];return nt(e,r,!0),{publicKey:e,secretKey:r}},t.sign.publicKeyLength=dt,t.sign.secretKeyLength=ht,t.sign.seedLength=32,t.sign.signatureLength=ut,t.hash=function(t){pt(t);var e=new Uint8Array(64);return Z(e,t,t.length),e},t.hash.hashLength=64,t.verify=function(t,e){return pt(t,e),0!==t.length&&0!==e.length&&t.length===e.length&&0===b(t,0,e,0,t.length)},t.setPRNG=function(t){n=t},(ft="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&ft.getRandomValues?t.setPRNG((function(t,e){var r,n=new Uint8Array(e);for(r=0;r<e;r+=65536)ft.getRandomValues(n.subarray(r,r+Math.min(e-r,65536)));for(r=0;r<e;r++)t[r]=n[r];bt(n)})):(ft=r(1281))&&ft.randomBytes&&t.setPRNG((function(t,e){var r,n=ft.randomBytes(e);for(r=0;r<e;r++)t[r]=n[r];bt(n)}))}(t.exports?t.exports:self.nacl=self.nacl||{})},6064:(t,e,r)=>{t.exports=r(3619).Observable},3619:(t,e)=>{"use strict";var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){return"function"==typeof Symbol},o=function(t){return i()&&Boolean(Symbol[t])},a=function(t){return o(t)?Symbol[t]:"@@"+t};i()&&!o("observable")&&(Symbol.observable=Symbol("observable"));var s=a("iterator"),c=a("observable"),f=a("species");function u(t,e){var r=t[e];if(null!=r){if("function"!=typeof r)throw new TypeError(r+" is not a function");return r}}function d(t){var e=t.constructor;return void 0!==e&&null===(e=e[f])&&(e=void 0),void 0!==e?e:_}function h(t){return t instanceof _}function l(t){l.log?l.log(t):setTimeout((function(){throw t}))}function p(t){Promise.resolve().then((function(){try{t()}catch(t){l(t)}}))}function b(t){var e=t._cleanup;if(void 0!==e&&(t._cleanup=void 0,e))try{if("function"==typeof e)e();else{var r=u(e,"unsubscribe");r&&r.call(e)}}catch(t){l(t)}}function v(t){t._observer=void 0,t._queue=void 0,t._state="closed"}function y(t,e,r){t._state="running";var n=t._observer;try{var i=u(n,e);switch(e){case"next":i&&i.call(n,r);break;case"error":if(v(t),!i)throw r;i.call(n,r);break;case"complete":v(t),i&&i.call(n)}}catch(t){l(t)}"closed"===t._state?b(t):"running"===t._state&&(t._state="ready")}function m(t,e,r){if("closed"!==t._state){if("buffering"!==t._state)return"ready"!==t._state?(t._state="buffering",t._queue=[{type:e,value:r}],void p((function(){return function(t){var e=t._queue;if(e){t._queue=void 0,t._state="ready";for(var r=0;r<e.length&&(y(t,e[r].type,e[r].value),"closed"!==t._state);++r);}}(t)}))):void y(t,e,r);t._queue.push({type:e,value:r})}}var g=function(){function t(e,r){n(this,t),this._cleanup=void 0,this._observer=e,this._queue=void 0,this._state="initializing";var i=new w(this);try{this._cleanup=r.call(void 0,i)}catch(t){i.error(t)}"initializing"===this._state&&(this._state="ready")}return r(t,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(v(this),b(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),t}(),w=function(){function t(e){n(this,t),this._subscription=e}return r(t,[{key:"next",value:function(t){m(this._subscription,"next",t)}},{key:"error",value:function(t){m(this._subscription,"error",t)}},{key:"complete",value:function(){m(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),t}(),_=e.Observable=function(){function t(e){if(n(this,t),!(this instanceof t))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof e)throw new TypeError("Observable initializer must be a function");this._subscriber=e}return r(t,[{key:"subscribe",value:function(t){return"object"==typeof t&&null!==t||(t={next:t,error:arguments[1],complete:arguments[2]}),new g(t,this._subscriber)}},{key:"forEach",value:function(t){var e=this;return new Promise((function(r,n){if("function"==typeof t)var i=e.subscribe({next:function(e){try{t(e,o)}catch(t){n(t),i.unsubscribe()}},error:n,complete:r});else n(new TypeError(t+" is not a function"));function o(){i.unsubscribe(),r()}}))}},{key:"map",value:function(t){var e=this;if("function"!=typeof t)throw new TypeError(t+" is not a function");return new(d(this))((function(r){return e.subscribe({next:function(e){try{e=t(e)}catch(t){return r.error(t)}r.next(e)},error:function(t){r.error(t)},complete:function(){r.complete()}})}))}},{key:"filter",value:function(t){var e=this;if("function"!=typeof t)throw new TypeError(t+" is not a function");return new(d(this))((function(r){return e.subscribe({next:function(e){try{if(!t(e))return}catch(t){return r.error(t)}r.next(e)},error:function(t){r.error(t)},complete:function(){r.complete()}})}))}},{key:"reduce",value:function(t){var e=this;if("function"!=typeof t)throw new TypeError(t+" is not a function");var r=d(this),n=arguments.length>1,i=!1,o=arguments[1];return new r((function(r){return e.subscribe({next:function(e){var a=!i;if(i=!0,!a||n)try{o=t(o,e)}catch(t){return r.error(t)}else o=e},error:function(t){r.error(t)},complete:function(){if(!i&&!n)return r.error(new TypeError("Cannot reduce an empty sequence"));r.next(o),r.complete()}})}))}},{key:"concat",value:function(){for(var t=this,e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var i=d(this);return new i((function(e){var n=void 0,o=0;return function t(a){n=a.subscribe({next:function(t){e.next(t)},error:function(t){e.error(t)},complete:function(){o===r.length?(n=void 0,e.complete()):t(i.from(r[o++]))}})}(t),function(){n&&(n.unsubscribe(),n=void 0)}}))}},{key:"flatMap",value:function(t){var e=this;if("function"!=typeof t)throw new TypeError(t+" is not a function");var r=d(this);return new r((function(n){var i=[],o=e.subscribe({next:function(e){if(t)try{e=t(e)}catch(t){return n.error(t)}var o=r.from(e).subscribe({next:function(t){n.next(t)},error:function(t){n.error(t)},complete:function(){var t=i.indexOf(o);t>=0&&i.splice(t,1),a()}});i.push(o)},error:function(t){n.error(t)},complete:function(){a()}});function a(){o.closed&&0===i.length&&n.complete()}return function(){i.forEach((function(t){return t.unsubscribe()})),o.unsubscribe()}}))}},{key:c,value:function(){return this}}],[{key:"from",value:function(e){var r="function"==typeof this?this:t;if(null==e)throw new TypeError(e+" is not an object");var n=u(e,c);if(n){var i=n.call(e);if(Object(i)!==i)throw new TypeError(i+" is not an object");return h(i)&&i.constructor===r?i:new r((function(t){return i.subscribe(t)}))}if(o("iterator")&&(n=u(e,s)))return new r((function(t){p((function(){if(!t.closed){var r=!0,i=!1,o=void 0;try{for(var a,s=n.call(e)[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value;if(t.next(c),t.closed)return}}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}t.complete()}}))}));if(Array.isArray(e))return new r((function(t){p((function(){if(!t.closed){for(var r=0;r<e.length;++r)if(t.next(e[r]),t.closed)return;t.complete()}}))}));throw new TypeError(e+" is not observable")}},{key:"of",value:function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];return new("function"==typeof this?this:t)((function(t){p((function(){if(!t.closed){for(var e=0;e<r.length;++e)if(t.next(r[e]),t.closed)return;t.complete()}}))}))}},{key:f,get:function(){return this}}]),t}();i()&&Object.defineProperty(_,Symbol("extensions"),{value:{symbol:c,hostReportError:l},configurable:!0})},7790:()=>{},3776:()=>{},477:()=>{},1281:()=>{},1636:t=>{"use strict";t.exports={rE:"6.5.5"}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.amdO={},r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var n={};(()=>{"use strict";var t,e,i,o,a,s;r.r(n),r.d(n,{awc:()=>qn,streamChannel:()=>Ln}),BigInt.prototype.toJSON=function(){return parseInt(this.toString())},(s=t||(t={})).ed25519="ed25519",s.P256="P256",s.secp256k1="secp256k1",(a=e||(e={})).sha256="sha256",a.sha512="sha512",a.sha3_256="sha3-256",a.sha3_512="sha3-512",a.blake2b="blake2b",function(t){t.keychain="keychain",t.keychain_access="keychain_access",t.transfer="transfer",t.hosting="hosting",t.token="token",t.data="data",t.contract="contract",t.code_proposal="code_proposal",t.code_approval="code_approval"}(i||(i={})),function(t){t.node="node",t.node_shared_secrets="node_shared_secrets",t.origin_shared_secrets="origin_shared_secrets",t.beacon="beacon",t.beacon_summary="beacon_summary",t.oracle="oracle",t.oracle_summary="oracle_summary",t.code_proposal="code_proposal",t.code_approval="code_approval",t.node_rewards="node_rewards"}(o||(o={})),r(7078),r(1396),r(2493),r(8947);var c=r(6729),f=r(1176);r(8385),r(4545);const{sha3_512:u,sha3_256:d}=f;new c.ec("p256"),new c.ec("secp256k1"),e.sha256,e.sha512,e.sha3_256,e.sha3_512,e.blake2b,r(4945),"undefined"!=typeof self&&self,"undefined"!=typeof window&&window,"undefined"!=typeof WebSocket?WebSocket:"undefined"!=typeof MozWebSocket?MozWebSocket:void 0!==r.g?r.g.WebSocket||r.g.MozWebSocket:"undefined"!=typeof window?window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(self.WebSocket||self.MozWebSocket),r(5369),r(5144),r(489);var h=r(8941),l=r(6271),p=r(7479),b=r(2779),v=r(3605),y=r(5505),m=r(9780),g=r.n(m),w=r(508),_=r.n(w),A=r(7405),M=r.n(A),S=r(5748),x=function(t,e){return(0,h.A)(this,void 0),[].concat((0,b.A)(e),(0,b.A)(t))}.bind(void 0),k=(0,v.cF)(x),E=(function(t){return(0,h.A)(this,void 0),Array.isArray(t)?t:[t]}.bind(void 0),function(t,e){return(0,h.A)(this,void 0),e===t.length-1}.bind(void 0)),O=(0,v.cF)(E),R=function(t,e){return(0,h.A)(this,void 0),O(t,e)?0:e+1}.bind(void 0),P=void(0,v.cF)(R),C=function(t){return(0,h.A)(this,P),Math.max.apply(Math,(0,b.A)(_()(t)))+1}.bind(void 0),B=(function(t){return(0,h.A)(this,P),g()("length"in t?t:(0,y.A)({},t,{length:C(t)}))}.bind(void 0),function(t,e,r){return(0,h.A)(this,void 0),[].concat((0,b.A)(r.slice(0,t)),(0,b.A)(e),(0,b.A)(r.slice(t+1)))}.bind(void 0)),I=void(0,v.cF)(B),z=function(t,e){return(0,h.A)(this,I),M()(t)&&t>=e}.bind(void 0),T=function(t){return(0,h.A)(this,I),z(Number(t),0)}.bind(void 0),N=(function(t){t.length;var e=(0,S.A)(t,["length"]);return(0,h.A)(this,void 0),_()(e).every(T)}.bind(void 0),function(t,e){return(0,h.A)(this,void 0),[].concat((0,b.A)(t),(0,b.A)(e))}.bind(void 0)),j=void(0,v.cF)(N),L=function(t,e,r,n){return(0,h.A)(this,j),n.reduce(function(r,n,i){return(0,h.A)(this,j),t(n,i,r)?e(r,n,i):r}.bind(this),r)}.bind(void 0),q=void(0,v.cF)(L),F=function(t,e,r,n){(0,h.A)(this,q);var i=r;return n.every(function(r,n){(0,h.A)(this,q);var o=t(r,n,i);return o&&(i=e(i,r,n)),o}.bind(this)),i}.bind(void 0),U=((0,v.cF)(F),function(t,e,r){return(0,h.A)(this,void 0),[].concat((0,b.A)(r.slice(0,t)),(0,b.A)(r.slice(t+e)))}.bind(void 0)),D=(0,v.cF)(U),H=void 0,J=function(t,e){return(0,h.A)(this,H),[].concat((0,b.A)(Array(t))).map(function(){return(0,h.A)(this,H),e}.bind(this))}.bind(void 0),W=((0,v.cF)(J),function(t,e,r){return(0,h.A)(this,void 0),[].concat((0,b.A)(r.slice(0,t)),(0,b.A)(e),(0,b.A)(r.slice(t+e.length)))}.bind(void 0)),K=(0,v.cF)(W),G=function(t,e){return(0,h.A)(this,void 0),e<0?t.length-e:e}.bind(void 0),V=((0,v.cF)(G),r(1203)),X=r.n(V),Y=r(4508),Z=r(2040),$=r(534),Q=r.n($),tt=r(5522),et=r.n(tt),rt=function(t,e){return(0,h.A)(this,void 0),e[t]}.bind(void 0),nt=(0,l.cF)(rt),it=void 0,ot=function(t){return(0,h.A)(this,it),null!==t&&"object"===(void 0===t?"undefined":(0,p.A)(t))}.bind(void 0),at=function(t){return(0,h.A)(this,it),Array.isArray(t)||ot(t)}.bind(void 0),st=void 0,ct=function(t,e,r){return(0,h.A)(this,st),O(e,t)?r:dt(t+1,e,r)}.bind(void 0),ft=function(t,e,r){return(0,h.A)(this,st),"Expected to find a composite at ["+String(e.join(", "))+"]["+String(t)+"], but instead got: "+(void 0===r?"undefined":(0,p.A)(r))}.bind(void 0),ut=function(t,e,r){if((0,h.A)(this,st),at(r))return r;throw new Error(ft(t,e,r))}.bind(void 0),dt=function(t,e,r){return(0,h.A)(this,st),void 0===r?void 0:ct(t,e,nt(e[t],ut(t,e,r)))}.bind(void 0),ht=function(t,e){return(0,h.A)(this,st),0===t.length?void 0:dt(0,t,e)}.bind(void 0),lt=(0,l.cF)(ht),pt=function(t){return(0,h.A)(this,void 0),Array.isArray(t)?[].concat((0,b.A)(t.keys())):_()(t)}.bind(void 0),bt=function(t,e,r){return(0,h.A)(this,void 0),X()(lt(t,r),e)}.bind(void 0),vt=(0,l.cF)(bt),yt=function(t,e){return(0,h.A)(this,void 0),Object.prototype.hasOwnProperty.call(e,t)}.bind(void 0),mt=(0,l.cF)(yt),gt=void 0,wt=function(t,e){(0,h.A)(this,gt);var r=pt(t);return r.length===pt(e).length&&r.every(function(r){return(0,h.A)(this,gt),mt(r,e)&&nt(r,t)===nt(r,e)}.bind(this))}.bind(void 0),_t=(0,l.cF)(wt),At=function(t){return(0,h.A)(this,void 0),0===pt(t).length}.bind(void 0),Mt=void 0,St=function(t,e){return(0,h.A)(this,Mt),Q()(e).reduce(function(r,n){var i=(0,Z.A)(n,2),o=i[0],a=i[1];return(0,h.A)(this,Mt),(0,y.A)({},r,(0,Y.A)({},o,t(a,o,e)))}.bind(this),{})}.bind(void 0),xt=function(t,e){return(0,h.A)(this,Mt),Array.isArray(e)?e.map(t):St(t,e)}.bind(void 0),kt=(0,l.cF)(xt),Et=void 0,Ot=function(t,e){e[t];var r=(0,S.A)(e,[t]);return(0,h.A)(this,Et),r}.bind(void 0),Rt=function(t,e){return(0,h.A)(this,Et),Array.isArray(e)?D(t,1,e):Ot(t,e)}.bind(void 0),Pt=(0,l.cF)(Rt),Ct=function(t){return(0,h.A)(this,void 0),Array.isArray(t)?[].concat((0,b.A)(t)):(0,y.A)({},t)}.bind(void 0),Bt=void 0,It=function(t){(0,h.A)(this,Bt);var e=Ct(t);return{origin:e,current:e,previous:void 0}}.bind(void 0),zt=function(t,e,r){return(0,h.A)(this,Bt),r[t]=e,nt(t,r)}.bind(void 0),Tt=function(t,e,r,n){return(0,h.A)(this,Bt),(0,y.A)({},n,{current:zt(t[e],r,n.current),previous:n.current})}.bind(void 0),Nt=function(t,e,r){(0,h.A)(this,Bt);var n=Pt(t[e],r.current);return 0===e?(0,y.A)({},r,{current:n,origin:n}):(0,y.A)({},r,{previous:zt(t[e-1],n,r.previous)})}.bind(void 0),jt=et()("composite.updateIn.removeAction"),Lt=function(t,e,r,n){return(0,h.A)(this,Bt),r===jt?Nt(t,e,n):Tt(t,e,r,n)}.bind(void 0),qt=function(t){return(0,h.A)(this,Bt),"number"==typeof t?[]:{}}.bind(void 0),Ft=function(t,e,r){return(0,h.A)(this,Bt),mt(t,r)?Ct(nt(t,r)):qt(e)}.bind(void 0),Ut=function(t,e,r,n){return(0,h.A)(this,Bt),O(t,r)?e(nt(t[r],n)):Ft(t[r],t[r+1],n)}.bind(void 0),Dt=function(t,e){return(0,h.A)(this,Bt),function(r,n,i){return(0,h.A)(this,Bt),Lt(t,i,Ut(t,e,i,r.current),r)}.bind(this)}.bind(void 0),Ht=function(t,e,r){return(0,h.A)(this,Bt),0===t.length?r:t.reduce(Dt(t,e),It(r)).origin}.bind(void 0),Jt=(0,l.cF)(Ht);Jt.remove=jt;var Wt=void 0,Kt=function(){return(0,h.A)(this,Wt),Jt.remove}.bind(void 0),Gt=function(t,e){return(0,h.A)(this,Wt),Jt(t,Kt,e)}.bind(void 0),Vt=((0,l.cF)(Gt),function(t,e,r){(0,h.A)(this,void 0);var n=Ct(r);return n[t]=e,n}.bind(void 0)),Xt=void(0,l.cF)(Vt),Yt=function(t,e,r){return(0,h.A)(this,Xt),Jt(t,function(){return(0,h.A)(this,Xt),e}.bind(this),r)}.bind(void 0),Zt=void(0,l.cF)(Yt),$t=function(t,e){return(0,h.A)(this,Zt),Boolean(Number(t)^Number(e))}.bind(void 0),Qt=function(t,e){return(0,h.A)(this,Zt),t===e||!$t(Array.isArray(t),Array.isArray(e))&&_t(t,e)}.bind(void 0),te=((0,l.cF)(Qt),function(t){return(0,h.A)(this,void 0),At(t)?void 0:t}.bind(void 0),r(5890),r(3504),r(1259)),ee=r.n(te),re=(r(4913),r(4040),r(6511),r(5049),r(6381)),ne=r.n(re),ie=void 0,oe=function(t){var e=this;return ne()(this,ie),t.map(function(t){var r=t.column,n=t.line;return ne()(this,e),"".concat(n,":").concat(r)}.bind(this)).join("; ")}.bind(void 0),ae=function(t){var e=t.message,r=t.locations;return ne()(this,ie),e+(r?" (".concat(oe(r),")"):"")}.bind(void 0),se=function(t){return ne()(this,ie),t.map(ae).join("\n")}.bind(void 0),ce=void 0,fe=/^\s*(query|mutation|subscription|\{)/,ue=function(t){return ne()(this,ce),"{"===t?"query":t}.bind(void 0),de=function(t){ne()(this,ce);var e=t.match(fe);if(!e)throw new TypeError("Invalid operation:\n".concat(t));return ue(e[1])}.bind(void 0),he=void 0,le=function(t){return ne()(this,he),"OperationDefinition"===t.kind&&"subscription"===t.operation}.bind(void 0),pe=(function(t){return ne()(this,he),t.definitions.some(le)}.bind(void 0),function(t){var e=t.query,r=t.variables;return ne()(this,void 0),r?{operation:e,variables:r}:{operation:e}}.bind(void 0),function(t){var e=t.operation,r=t.variables;return ne()(this,void 0),r?{query:e,variables:r}:{query:e}}.bind(void 0)),be=r(6064),ve=r.n(be),ye=(r(9087),r(8872),r(4778)),me=r.n(ye),ge=r(9892),we=r.n(ge),_e=(r(4609),function(t){var e=t.activeObservers,r=t.canceledObservers,n=we()(t,["activeObservers","canceledObservers"]);return ne()(this,void 0),me()({},n,{isActive:!1,activeObservers:[],canceledObservers:ee()(e).concat(ee()(r))})}.bind(void 0)),Ae=void 0,Me=function(t,e){var r=this;return ne()(this,Ae),function(n){return ne()(this,r),n[t]&&n[t](e)}.bind(this)}.bind(void 0),Se=function(t){var e=t.name;return ne()(this,Ae),"on".concat(e)}.bind(void 0),xe=function(t,e){return ne()(this,Ae),t.forEach(Me(Se(e),e.payload))}.bind(void 0),ke=function(t,e){return ne()(this,void 0),xe(t.canceledObservers,e),t}.bind(void 0),Ee=void 0,Oe=function(t){return ne()(this,Ee),{payload:t,name:"Start"}}.bind(void 0),Re=function(t){return ne()(this,Ee),{payload:t,name:"Result"}}.bind(void 0),Pe=function(t){return ne()(this,Ee),{payload:t,name:"Error"}}.bind(void 0),Ce=function(){return ne()(this,Ee),{name:"Cancel",payload:void 0}}.bind(void 0),Be=function(t){return ne()(this,Ee),{payload:t,name:"Abort"}}.bind(void 0),Ie=void 0,ze=function(t){return ne()(this,Ie),me()({},t,{canceledObservers:[]})}.bind(void 0),Te=function(t){return ne()(this,Ie),t.canceledObservers.length>0?ze(ke(t,Ce())):t}.bind(void 0),Ne=function(t,e,r){return ne()(this,void 0),t.findIndex(vt([e],r))}.bind(void 0),je=function(t){var e=this;return ne()(this,void 0),function(r){return ne()(this,e),K(Ne(r,"request",t.request),[t],r)}.bind(this)}.bind(void 0),Le=function(t){var e=this;return ne()(this,void 0),function(r){return ne()(this,e),D(Ne(r,"request",t.request),1,r)}.bind(this)}.bind(void 0),qe=function(t,e){return ne()(this,void 0),t.notifiers=e(t.notifiers),t}.bind(void 0),Fe=function(t,e){return ne()(this,void 0),qe(t,je(e)),e}.bind(void 0),Ue="pending",De="sent",He="sending",Je=void 0,We=function(t){var e=t.activeObservers,r=t.canceledObservers;return ne()(this,Je),ee()(e).concat(ee()(r))}.bind(void 0),Ke=function(t,e){return ne()(this,Je),xe(We(t),e),t}.bind(void 0),Ge=function(t,e,r){return ne()(this,void 0),qe(t,Le(Ke(e,Be(r))))}.bind(void 0),Ve=function(t,e,r){return ne()(this,void 0),t.find(vt([e],r))}.bind(void 0),Xe=function(t,e){return ne()(this,void 0),xe(t.activeObservers,e),t}.bind(void 0),Ye=function(t,e){return ne()(this,void 0),Xe(t,Re(e))}.bind(void 0),Ze=function(t){return ne()(this,void 0),Xe(t,Oe(t))}.bind(void 0),$e=function(t){return ne()(this,void 0),Te(me()({},t,{isActive:!0,requestStatus:Ue,subscriptionId:void 0}))}.bind(void 0),Qe=function(t,e){return ne()(this,void 0),t.receive("ok",e.onSucceed).receive("error",e.onError).receive("timeout",e.onTimeout)}.bind(void 0),tr=void 0,er=function(t,e){var r=this;return ne()(this,tr),function(n){var i=this;return ne()(this,r),function(){ne()(this,i);var r=Ve(t.notifiers,"request",e);if(r){for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];n.apply(void 0,[t,r].concat(a))}}.bind(this)}.bind(this)}.bind(void 0),rr=function(t,e,r){return ne()(this,tr),kt(er(t,e),r)}.bind(void 0),nr=function(t,e,r,n){return ne()(this,tr),Qe(t.channel.push(n.name,n.payload),rr(t,e,r)),t}.bind(void 0),ir=void 0,or=function(t){return ne()(this,ir),{payload:t,name:"unsubscribe"}}.bind(void 0),ar=function(t){return ne()(this,ir),{payload:t,name:"doc"}}.bind(void 0),sr=void 0,cr=function(t,e,r){var n=e.request;return ne()(this,sr),nr(t,n,r,ar(pe(n)))}.bind(void 0),fr=function(t,e){return ne()(this,sr),Fe(t,me()({},e,{requestStatus:He}))}.bind(void 0),ur=function(t){return ne()(this,sr),new Error("request: ".concat(t))}.bind(void 0),dr=function(t,e){return ne()(this,sr),Xe(e,Pe(ur("timeout")))}.bind(void 0),hr=function(t,e,r){return ne()(this,sr),Ge(t,e,ur(r))}.bind(void 0),lr=function(t){return ne()(this,sr),{onError:hr,onSucceed:t,onTimeout:dr}}.bind(void 0),pr=function(t,e,r){return ne()(this,sr),cr(t,fr(t,e),lr(r))}.bind(void 0),br=void 0,vr=function(t,e){return ne()(this,br),qe(t,Le(Te(e)))}.bind(void 0),yr=function(t,e){return ne()(this,br),Sr(t,Fe(t,$e(e)))}.bind(void 0),mr=function(t){return ne()(this,br),new Error("unsubscribe: ".concat(t))}.bind(void 0),gr={onError:function(t,e,r){return ne()(this,br),Ge(t,e,mr(r))}.bind(void 0),onTimeout:function(t,e){return ne()(this,br),ke(e,Pe(mr("timeout")))}.bind(void 0),onSucceed:function(t,e){ne()(this,br),e.isActive?yr(t,e):vr(t,e)}.bind(void 0)},wr=function(t,e){var r=e.request,n=e.subscriptionId;return ne()(this,br),nr(t,r,gr,or({subscriptionId:n}))}.bind(void 0),_r=function(t,e){return ne()(this,br),wr(t,Fe(t,me()({},e,{requestStatus:"canceling"})))}.bind(void 0),Ar=function(t,e,r){var n=r.subscriptionId;ne()(this,br);var i=Fe(t,me()({},e,{subscriptionId:n,requestStatus:De}));i.isActive?Ze(i):_r(t,i)}.bind(void 0),Mr=function(t,e,r){ne()(this,br),r.errors?hr(t,e,se(r.errors)):Ar(t,e,r)}.bind(void 0),Sr=function(t,e){return ne()(this,br),pr(t,e,Mr)}.bind(void 0),xr=function(t,e){var r=e.payload;ne()(this,br);var n=Ve(t.notifiers,"subscriptionId",r.subscriptionId);n&&Ye(n,r.result)}.bind(void 0),kr=function(t){return ne()(this,br),"subscription:data"===t.event}.bind(void 0),Er=void 0,Or=function(t,e){return ne()(this,Er),qe(t,je(Te(_e(e))))}.bind(void 0),Rr=function(t,e){return ne()(this,Er),e.requestStatus===He?Or(t,e):t}.bind(void 0),Pr=function(t,e){return ne()(this,Er),qe(t,Le(Te(_e(e))))}.bind(void 0),Cr=function(t,e){return ne()(this,Er),e.requestStatus===Ue?Pr(t,e):Rr(t,e)}.bind(void 0),Br=function(t,e){return ne()(this,Er),e.requestStatus===De?_r(t,e):t}.bind(void 0),Ir=function(t,e){return ne()(this,Er),Br(t,Fe(t,_e(e)))}.bind(void 0),zr=function(t,e){return ne()(this,Er),e.requestStatus===Ue?Pr(t,e):Ir(t,e)}.bind(void 0),Tr=function(t,e){return ne()(this,Er),"subscription"===e.operationType?zr(t,e):Cr(t,e)}.bind(void 0),Nr=function(t,e){return ne()(this,Er),e.isActive?Tr(t,e):t}.bind(void 0),jr=void 0,Lr=function(t,e){return ne()(this,jr),Fe(t,me()({},e,{requestStatus:De}))}.bind(void 0),qr=function(t,e,r){return ne()(this,jr),qe(t,Le(Ye(Lr(t,e),r)))}.bind(void 0),Fr=function(t,e){return ne()(this,jr),pr(t,Ze(e),qr)}.bind(void 0),Ur=function(t,e){ne()(this,jr),"subscription"===e.operationType?Sr(t,e):Fr(t,e)}.bind(void 0),Dr=void 0,Hr=function(t){return ne()(this,Dr),new Error("channel join: ".concat(t))}.bind(void 0),Jr=function(t,e){var r=this;return ne()(this,Dr),t.notifiers.forEach(function(t){return ne()(this,r),Xe(t,Pe(Hr(e)))}.bind(this))}.bind(void 0),Wr=function(t){var e=this;return ne()(this,Dr),{onError:function(r){return ne()(this,e),Jr(t,r)}.bind(this),onSucceed:function(){var r=this;return ne()(this,e),t.notifiers.forEach(function(e){return ne()(this,r),Ur(t,e)}.bind(this))}.bind(this),onTimeout:function(){return ne()(this,e),Jr(t,"timeout")}.bind(this)}}.bind(void 0),Kr=function(t){return ne()(this,Dr),Qe(t.channel.join(),Wr(t)),t.channelJoinCreated=!0,t}.bind(void 0),Gr=void 0,Vr=function(t){var e=this;return ne()(this,Gr),function(r){ne()(this,e),kr(r)&&xr(t,r)}.bind(this)}.bind(void 0),Xr=function(){return ne()(this,Gr),new Error("connection: close")}.bind(void 0),Yr=function(t){return ne()(this,Gr),Ke(t,Pe(Xr()))}.bind(void 0),Zr=function(t,e){return ne()(this,Gr),qe(t,Le(Yr(e)))}.bind(void 0),$r=function(t,e){ne()(this,Gr),"mutation"===e.operationType?Ge(t,e,Xr()):Fe(t,$e(Yr(e)))}.bind(void 0),Qr=function(t){var e=this;return ne()(this,Gr),function(r){ne()(this,e),r.isActive?$r(t,r):Zr(t,r)}.bind(this)}.bind(void 0),tn=function(t){var e=this;return ne()(this,Gr),function(){return ne()(this,e),t.notifiers.forEach(Qr(t))}.bind(this)}.bind(void 0),en=function(t){return ne()(this,Gr),!t.channelJoinCreated&&t.notifiers.length>0}.bind(void 0),rn=function(t){var e=this;return ne()(this,Gr),function(){ne()(this,e),en(t)&&Kr(t)}.bind(this)}.bind(void 0),nn=(function(t){ne()(this,Gr);var e={phoenixSocket:t,channel:t.channel("__absinthe__:control"),channelJoinCreated:!1,notifiers:[]};return t.onOpen(rn(e)),t.onClose(tn(e)),t.onMessage(Vr(e)),e}.bind(void 0),function(t,e){var r=t.activeObservers,n=we()(t,["activeObservers"]);return ne()(this,void 0),me()({},n,{activeObservers:ee()(r).concat([e]),isActive:!0})}.bind(void 0)),on=function(t,e,r){return ne()(this,void 0),Fe(t,nn(e,r))}.bind(void 0),an=void 0,sn=function(t,e){return ne()(this,an),{operationType:e,request:t,activeObservers:[],canceledObservers:[],isActive:!0,requestStatus:Ue,subscriptionId:void 0}}.bind(void 0),cn=function(t){return ne()(this,an),sn(t,de(t.operation))}.bind(void 0),fn=function(t){return ne()(this,void 0),t.isActive?t:me()({},t,{isActive:!0})}.bind(void 0),un=void 0,dn=function(t){ne()(this,un),t.phoenixSocket.isConnected()?Kr(t):t.phoenixSocket.connect()}.bind(void 0),hn=function(t,e){ne()(this,un);var r=cn(e);return qe(t,k([r])),t.channelJoinCreated?Ur(t,r):dn(t),r}.bind(void 0),ln=function(t,e){return ne()(this,un),Fe(t,fn(e))}.bind(void 0),pn=function(t,e){return ne()(this,un),e.requestStatus===He?ln(t,Te(e)):ln(t,e)}.bind(void 0),bn=function(t,e){return ne()(this,un),e.isActive?e:pn(t,e)}.bind(void 0),vn=function(t,e){ne()(this,un);var r=Ve(t.notifiers,"request",e);return r&&bn(t,r)}.bind(void 0),yn=void function(t,e){return ne()(this,un),vn(t,e)||hn(t,e)}.bind(void 0),mn=function(t,e,r,n){var i=this,o=e.request;return ne()(this,yn),function(){ne()(this,i);var e=Ve(t.notifiers,"request",o);n(t,e,e?r:void 0)}.bind(this)}.bind(void 0),gn=function(t,e){var r=this,n=t.operationType;return ne()(this,yn),function(t){ne()(this,r),e.next(t),"subscription"!==n&&e.complete()}.bind(this)}.bind(void 0),wn=function(t,e,r){return ne()(this,yn),me()({},e,{onAbort:r.error.bind(r),onResult:gn(t,r)})}.bind(void 0),_n=void function(t,e){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n.unsubscribe,o=we()(n,["unsubscribe"]);return ne()(this,yn),new(ve())(function(n){ne()(this,r);var a=wn(e,o,n);return on(t,e,a),i&&mn(t,e,a,i)}.bind(this))}.bind(void 0),An=function(t,e){return ne()(this,_n),D(t.indexOf(e),1,t)}.bind(void 0),Mn=function(t,e){var r=t.activeObservers,n=we()(t,["activeObservers"]);return ne()(this,_n),me()({},n,{activeObservers:An(r,e)})}.bind(void 0),Sn=void 0,xn=function(t,e){if(ne()(this,Sn),t.activeObservers.includes(e))return t;throw new Error("Observer is not attached to notifier")}.bind(void 0),kn=function(t,e,r){return ne()(this,Sn),qe(t,je(Mn(xn(e,r),r)))}.bind(void 0),En=void 0,On=function(t,e,r){return ne()(this,En),1===e.activeObservers.length?Nr(t,e):kn(t,e,r)}.bind(void 0);(function(t,e,r){return ne()(this,En),e.isActive?On(t,e,r):t}).bind(void 0);var Rn,Pn,Cn,Bn,In,zn=r(3773);(Bn=Rn||(Rn={})).Closed="WalletRPCConnection_closed",Bn.Closing="WalletRPCConnection_closing",Bn.Connecting="WalletRPCConnection_connecting",Bn.Open="WalletRPCConnection_open",function(t){t[t.UnsupportedMethod=-32601]="UnsupportedMethod",t[t.Timeout=5001]="Timeout",t[t.Connectivity=4901]="Connectivity",t[t.ConsensusNotReached=5002]="ConsensusNotReached",t[t.InvalidParams=-32602]="InvalidParams",t[t.InvalidTransaction=5003]="InvalidTransaction",t[t.InvalidConfirmation=5006]="InvalidConfirmation",t[t.InsufficientFunds=5004]="InsufficientFunds",t[t.ServiceNotFound=5007]="ServiceNotFound",t[t.UserRejected=4001]="UserRejected",t[t.UnknownAccount=5005]="UnknownAccount",t[t.Other=5e3]="Other",t[t.ServiceAlreadyExists=5008]="ServiceAlreadyExists"}(Pn||(Pn={}));class Tn{origin;version;payload;constructor(t,e={},r=1){this.origin=t,this.version=r,this.payload=e}}(In=Cn||(Cn={}))[In.CONNECTING=0]="CONNECTING",In[In.OPEN=1]="OPEN",In[In.CLOSING=2]="CLOSING",In[In.CLOSED=3]="CLOSED";var Nn=document.currentScript?.dataset.params,jn=void 0===Nn?null:JSON.parse(Nn).extensionId;const Ln=jn?new class{extensionId;_port=null;_state=Cn.CLOSED;constructor(t){if(void 0===t)throw new Error("Archethic Wallet Web extension not available");this.extensionId=t}async connect(){null===this._port?(this._state=Cn.CONNECTING,console.log("[AWC] Wait for popup extension ..."),await chrome.runtime.sendMessage(this.extensionId,"ensureExtensionPopupOpened"),console.log("[AWC] ... opened"),console.log("[AWC] Connecting to popup extension ..."),this._port=chrome.runtime.connect(this.extensionId),this._port.onDisconnect.addListener((()=>{this._port=null,this._connectionClosed()})),this._port.onMessage.addListener(((t,e)=>{"connected"!==t?(console.log(`[AWC] Received message ${t}`),null!==this.onReceive&&this.onReceive(t)):this._connectionReady()}))):console.log("[AWC] Popup extension already running")}_connectionClosed(){console.log("[AWC] Connection closed"),this._state=Cn.CLOSED,null!==this.onClose&&this.onClose("")}_connectionReady(){console.log("[AWC] Connection ready"),this._state=Cn.OPEN,null!==this.onReady&&this.onReady()}async close(){this._port?.disconnect(),this._connectionClosed()}async send(t){if(null==this._port)throw"[AWC] Disconnected";await this._port.postMessage(t)}onReceive=null;onReady=null;onClose=null;get state(){return this._state}}(jn):void 0,qn=Ln?new class{origin;client;_channel;_connectionStateEventTarget;_rpcNotificationEventTarget;static _instance;constructor(t){this.origin={name:""},this._connectionStateEventTarget=new EventTarget,this._rpcNotificationEventTarget=new EventTarget,this._channel=t}static init(t){this._instance=new this(t)}static get instance(){if(!this._instance)throw"ArchethicWalletClient must be init before using it";return this._instance}setOrigin(t){return this.origin=t,this}_dispatchConnectionState(){this._connectionStateEventTarget.dispatchEvent(new Event(this.connectionState))}async connect(){return new Promise(((t,e)=>{if(console.log("Connection attempt"),this.connectionState!=Rn.Closed)return e(new Error("Connection already established. Cancelling new connection request"));this._dispatchConnectionState(),this.client=new zn.JSONRPCServerAndClient(new zn.JSONRPCServer,new zn.JSONRPCClient((t=>{try{return this._channel?.send(JSON.stringify(t)),Promise.resolve()}catch(t){return Promise.reject(t)}}))),this.client.addMethod("addSubscriptionNotification",(t=>{const e={subscriptionId:t.subscriptionId,data:t.data};this._rpcNotificationEventTarget.dispatchEvent(new CustomEvent(e.subscriptionId,{detail:e.data}))})),this._channel.onReceive=async t=>{this.client?.receiveAndSend(JSON.parse(t))},this._channel.onClose=async t=>{this.client?.rejectAllPendingRequests(`Connection is closed (${t}).`),this.close()},this._channel.onReady=async()=>{t(),this._dispatchConnectionState()},this._channel.connect()}))}async close(){this._channel?.close(),this.client=void 0,this._dispatchConnectionState()}_ensuresConnectionAlive(){if(null==this.client||this.connectionState!=Rn.Open)throw new Error("RPC connection must be alive.")}onAccountUpdate(t,e){return this._subscribe("subscribeAccount",{name:t},e)}_subscribe(t,e,r){return this._ensuresConnectionAlive(),this.client?.request(t,new Tn(this.origin,e)).then((t=>{const e={id:t.subscriptionId,eventListener:t=>r(t.detail)};return this._rpcNotificationEventTarget.addEventListener(e.id,e.eventListener),e}))}unsubscribe(t){this._rpcNotificationEventTarget.removeEventListener(t.id,t.eventListener)}get connectionState(){switch(this._channel?.state){case Cn.CLOSING:return Rn.Closing;case Cn.CONNECTING:return Rn.Connecting;case Cn.OPEN:return Rn.Open;default:return Rn.Closed}}onconnectionstatechange(t){return this._connectionStateEventTarget.addEventListener(Rn.Connecting,(()=>{t(Rn.Connecting)})),this._connectionStateEventTarget.addEventListener(Rn.Open,(()=>{t(Rn.Open)})),this._connectionStateEventTarget.addEventListener(Rn.Closed,(()=>{t(Rn.Closed)})),this}unsubscribeconnectionstatechange(){return this._connectionStateEventTarget.removeEventListener(Rn.Connecting,null),this._connectionStateEventTarget.removeEventListener(Rn.Open,null),this._connectionStateEventTarget.removeEventListener(Rn.Closed,null),this}async getEndpoint(){return this._ensuresConnectionAlive(),this.client?.request("getEndpoint",new Tn(this.origin))}async sendTransaction(t){return this._ensuresConnectionAlive(),this.client?.request("sendTransaction",new Tn(this.origin,t.toWalletRPC()))}async signTransactions(t,e,r){this._ensuresConnectionAlive();const n=r.map((t=>t.toWalletRPC()));return this.client.request("signTransactions",new Tn(this.origin,{serviceName:t,pathSuffix:e,transactions:n})).then((t=>{for(let e=0;e<t.signedTxs.length;e++)r[e].setAddress(t.signedTxs[e].address),r[e].setPreviousSignatureAndPreviousPublicKey(t.signedTxs[e].previousSignature,t.signedTxs[e].previousPublicKey),r[e].setOriginSign(t.signedTxs[e].originSignature);return r}))}async addService(t){return this._ensuresConnectionAlive(),this.client?.request("addService",new Tn(this.origin,{name:t}))}async getAccounts(){return this._ensuresConnectionAlive(),this.client?.request("getAccounts",new Tn(this.origin)).then((t=>t.accounts))}async getCurrentAccount(){return this._ensuresConnectionAlive(),this.client?.request("getCurrentAccount",new Tn(this.origin))}async getServices(){return this._ensuresConnectionAlive(),this.client?.request("getServicesFromKeychain",new Tn(this.origin)).then((t=>t.services))}async keychainDeriveKeypair(t,e=0,r=""){return this._ensuresConnectionAlive(),this.client?.request("keychainDeriveKeypair",new Tn(this.origin,{serviceName:t,index:e,pathSuffix:r}))}async keychainDeriveAddress(t,e=0,r=""){return this._ensuresConnectionAlive(),this.client?.request("keychainDeriveAddress",new Tn(this.origin,{serviceName:t,index:e,pathSuffix:r}))}onCurrentAccountChange(t){return this._subscribe("subscribeCurrentAccount",{},t)}refreshCurrentAccount(){this._ensuresConnectionAlive(),this.client?.request("refreshCurrentAccount",new Tn(this.origin))}}(Ln):void 0})(),archethic=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,